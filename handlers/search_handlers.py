"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
"""

import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.utils import create_callback_data, parse_callback_data
from core.security import is_admin
from managers.search_manager import SearchManager
from core.database import db_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∏—Å–∫–∞
search_manager = SearchManager(db_manager)

logger = logging.getLogger(__name__)

async def search_menu_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not is_admin(chat_id, user_id):
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = search_manager.get_events_statistics(chat_id)
    
    text = (
        "üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π</b>\n\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['total_employees']}\n"
        f"üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats['total_events']}\n\n"
        f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['overdue']}\n"
        f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ (1-3 –¥–Ω—è): {stats['critical']}\n"
        f"üü† –°—Ä–æ—á–Ω–æ (4-7 –¥–Ω–µ–π): {stats['urgent']}\n"
        f"üü° –ë–ª–∏–∂–∞–π—à–∏–µ (8-30 –¥–Ω–µ–π): {stats['upcoming']}\n"
        f"üü¢ –ü–ª–∞–Ω–æ–≤—ã–µ (30+ –¥–Ω–µ–π): {stats['planned']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üî§ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data=create_callback_data("text_search_start"))],
        [
            InlineKeyboardButton(f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ ({stats['overdue']})", callback_data=create_callback_data("search_filter", status="overdue")),
            InlineKeyboardButton(f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ ({stats['critical']})", callback_data=create_callback_data("search_filter", status="critical"))
        ],
        [
            InlineKeyboardButton(f"üü† –°—Ä–æ—á–Ω—ã–µ ({stats['urgent']})", callback_data=create_callback_data("search_filter", status="urgent")), 
            InlineKeyboardButton(f"üü° –ë–ª–∏–∂–∞–π—à–∏–µ ({stats['upcoming']})", callback_data=create_callback_data("search_filter", status="upcoming"))
        ],
        [
            InlineKeyboardButton("üë• –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data=create_callback_data("search_employees")),
            InlineKeyboardButton("üìã –ü–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è", callback_data=create_callback_data("search_by_type"))
        ],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def search_by_filter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ –ø–æ –±—ã—Å—Ç—Ä—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º (—Å—Ç–∞—Ç—É—Å)"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    status = data.get('status')
    page = data.get('page', 0)
    
    chat_id = update.effective_chat.id
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status_config = {
        'overdue': {'emoji': 'üî¥', 'title': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è', 'filters': {'status': 'overdue'}},
        'critical': {'emoji': 'üî¥', 'title': '–ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (1-3 –¥–Ω—è)', 'filters': {'status': 'critical'}},
        'urgent': {'emoji': 'üü†', 'title': '–°—Ä–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (4-7 –¥–Ω–µ–π)', 'filters': {'status': 'urgent'}},
        'upcoming': {'emoji': 'üü°', 'title': '–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è (8-30 –¥–Ω–µ–π)', 'filters': {'status': 'upcoming'}}
    }
    
    if status not in status_config:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        return
    
    config = status_config[status]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    results = await search_manager.search_events(
        chat_id=chat_id,
        query="",
        filters=config['filters'],
        page=page,
        per_page=5
    )
    
    await display_search_results(update, context, results, config['title'], status, page)

async def display_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, results: dict, title: str, search_type: str = None, page: int = 0) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = update.callback_query
    
    events = results['results']
    pagination = results['pagination']
    
    if not events:
        text = f"{title}\n\n‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        keyboard = [[InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))]]
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        text_lines = [f"üìã <b>{title}</b>", ""]
        
        for i, event in enumerate(events, 1):
            event_date = datetime.fromisoformat(event['next_notification_date']).strftime('%d.%m.%Y')
            text_lines.append(
                f"{i}. {event['status_emoji']} <b>{event['full_name']}</b>\n"
                f"   üíº {event['position']}\n"
                f"   üìã {event['event_type']}\n"
                f"   üìÖ {event_date} ({event['status_text']})\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        text_lines.append(
            f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination['current_page'] + 1} –∏–∑ {pagination['total_pages']}\n"
            f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(events)} –∏–∑ {pagination['total_count']} —Å–æ–±—ã—Ç–∏–π"
        )
        
        text = "\n".join(text_lines)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if pagination['has_prev']:
            pagination_buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", 
                    callback_data=create_callback_data("search_filter", status=search_type, page=page-1))
            )
        if pagination['has_next']:
            pagination_buttons.append(
                InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", 
                    callback_data=create_callback_data("search_filter", status=search_type, page=page+1))
            )
        
        if pagination_buttons:
            keyboard.append(pagination_buttons)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.extend([
            [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback_data=create_callback_data("export_search", status=search_type))],
            [InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))]
        ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def search_employees(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    page = parse_callback_data(query.data).get('page', 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    employees = search_manager.search_employees(chat_id)
    
    if not employees:
        text = "üë• <b>–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        keyboard = [[InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))]]
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        per_page = 8
        start_idx = page * per_page
        end_idx = start_idx + per_page
        page_employees = employees[start_idx:end_idx]
        
        text = (
            f"üë• <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π:\n\n"
            f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(len(employees) + per_page - 1) // per_page}\n"
            f"üë®‚Äçüíº –ü–æ–∫–∞–∑–∞–Ω–æ {len(page_employees)} –∏–∑ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        )
        
        # –ö–Ω–æ–ø–∫–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(page_employees), 2):
            row = []
            for j in range(2):
                if i + j < len(page_employees):
                    employee = page_employees[i + j]
                    # –û–±—Ä–µ–∑–∞–µ–º –∏–º—è –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    name = employee['full_name']
                    if len(name) > 20:
                        name = name[:17] + "..."
                    row.append(InlineKeyboardButton(
                        f"üë§ {name}",
                        callback_data=create_callback_data("employee_events", id=employee['id'])
                    ))
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", 
                    callback_data=create_callback_data("search_employees", page=page-1))
            )
        if end_idx < len(employees):
            pagination_buttons.append(
                InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", 
                    callback_data=create_callback_data("search_employees", page=page+1))
            )
        
        if pagination_buttons:
            keyboard.append(pagination_buttons)
            
        keyboard.append([InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def show_employee_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    employee_id = data.get('id')
    
    if not employee_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    employees = search_manager.search_employees(chat_id)
    employee = next((e for e in employees if e['id'] == int(employee_id)), None)
    
    if not employee:
        await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    events = search_manager.get_employee_events(int(employee_id))
    
    text_lines = [
        f"üë§ <b>{employee['full_name']}</b>",
        f"üíº {employee['position']}",
        "",
        "üìÖ <b>–°–æ–±—ã—Ç–∏—è:</b>"
    ]
    
    if not events:
        text_lines.append("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        for event in events:
            event_date = datetime.fromisoformat(event['next_notification_date'])
            days_until = int(event['days_until']) if event['days_until'] else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if days_until < 0:
                status_emoji = "üî¥"
                status_text = f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_until)} –¥–Ω."
            elif days_until <= 3:
                status_emoji = "üî¥" 
                status_text = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω. (–∫—Ä–∏—Ç–∏—á–Ω–æ!)"
            elif days_until <= 7:
                status_emoji = "üü†"
                status_text = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω. (—Å—Ä–æ—á–Ω–æ)"
            elif days_until <= 30:
                status_emoji = "üü°"
                status_text = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
            else:
                status_emoji = "üü¢"
                status_text = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
            
            text_lines.append(
                f"\n{status_emoji} <b>{event['event_type']}</b>\n"
                f"   üìÖ {event_date.strftime('%d.%m.%Y')} ({status_text})\n"
                f"   üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {event['interval_days']} –¥–Ω–µ–π"
            )
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data=create_callback_data("search_employees"))],
        [InlineKeyboardButton("üîç –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def search_by_event_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
    event_types = search_manager.get_available_event_types(chat_id)
    
    if not event_types:
        text = "üìã <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è</b>\n\n‚ùå –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        keyboard = [[InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))]]
    else:
        text = (
            "üìã <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        keyboard = []
        for event_type in event_types:
            # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            display_name = event_type
            if len(display_name) > 35:
                display_name = display_name[:32] + "..."
            
            keyboard.append([InlineKeyboardButton(
                f"üìã {display_name}",
                callback_data=create_callback_data("search_event_type", type=event_type[:50])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è callback_data
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def search_events_by_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    event_type = data.get('type')
    page = data.get('page', 0)
    
    if not event_type:
        await query.edit_message_text("‚ùå –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    results = await search_manager.search_events(
        chat_id=chat_id,
        query="",
        filters={'event_type': event_type},
        page=page,
        per_page=5
    )
    
    title = f"üìã {event_type}"
    await display_search_results(update, context, results, title, f"event_type_{event_type[:20]}", page)

async def text_search_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    popular_searches = search_manager.get_popular_searches(chat_id)
    
    text_lines = [
        "üîç <b>–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫</b>",
        "",
        "üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å:</b>",
        "üë§ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: \"–ò–≤–∞–Ω–æ–≤\", \"–ü–µ—Ç—Ä–æ–≤\"\n",
        "üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: \"–ø–ª–æ—Ç–Ω–∏–∫\", \"–º–∞–ª—è—Ä\"\n",
        "üìã –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: \"–º–µ–¥–æ—Å–º–æ—Ç—Ä\", \"–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂\"\n",
        "",
        "‚ö° <b>–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b>"
    ]
    
    if popular_searches:
        text_lines.insert(-1, "üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>")
        for search in popular_searches[:3]:
            text_lines.insert(-1, f"‚Ä¢ {search}")
        text_lines.insert(-1, "")
    
    text = "\n".join(text_lines)
    
    # –ö–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    keyboard = []
    
    if popular_searches:
        for i, search in enumerate(popular_searches[:4]):
            keyboard.append([InlineKeyboardButton(
                f"üîç {search[:30]}", 
                callback_data=create_callback_data("quick_text_search", q=search[:40])
            )])
    
    keyboard.extend([
        [InlineKeyboardButton("‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data=create_callback_data("text_search_advanced"))],
        [InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['waiting_for_text_search'] = True

async def handle_text_search_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    if not context.user_data.get('waiting_for_text_search'):
        return
    
    search_query = update.message.text.strip()
    chat_id = update.effective_chat.id
    
    if len(search_query) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))
            ]])
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['waiting_for_text_search'] = False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    await perform_text_search(update, context, search_query, 0)

async def quick_text_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    search_query = data.get('q', '')
    
    if search_query:
        await perform_text_search(update, context, search_query, 0)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def perform_text_search(update: Update, context: ContextTypes.DEFAULT_TYPE, search_query: str, page: int = 0) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    chat_id = update.effective_chat.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text("üîç –ü–æ–∏—Å–∫...")
    else:
        search_msg = await update.message.reply_text("üîç –ü–æ–∏—Å–∫...")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫
        results = await search_manager.smart_text_search(
            chat_id=chat_id,
            query=search_query,
            page=page,
            per_page=5
        )
        
        await display_text_search_results(update, context, results, search_query, page)
        
    except Exception as e:
        logger.error(f"Error in text search: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞"
        keyboard = [[InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))]]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                error_text, reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                error_text, reply_markup=InlineKeyboardMarkup(keyboard)
            )

async def display_text_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, results: dict, query: str, page: int) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    events = results.get('results', [])
    pagination = results.get('pagination', {})
    suggestions = results.get('search_suggestions', [])
    
    if not events:
        text_lines = [
            f"üîç <b>–ü–æ–∏—Å–∫: \"{query}\"</b>",
            "",
            "‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>",
            ""
        ]
        
        if suggestions:
            text_lines.extend([
                "üí° <b>–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏:</b>"
            ])
            for suggestion in suggestions:
                text_lines.append(f"‚Ä¢ {suggestion}")
        else:
            text_lines.extend([
                "üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>",
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞",
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ", 
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
            ])
        
        keyboard = [
            [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data=create_callback_data("text_search_start"))],
            [InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))]
        ]
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        text_lines = [
            f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"{query}\"</b>",
            f"üìä –ù–∞–π–¥–µ–Ω–æ {pagination.get('total_count', 0)} —Å–æ–±—ã—Ç–∏–π",
            ""
        ]
        
        for i, event in enumerate(events, 1):
            event_date = datetime.fromisoformat(event['next_notification_date']).strftime('%d.%m.%Y')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            matches_str = ""
            if event.get('match_highlights'):
                matches_str = f" (–Ω–∞–π–¥–µ–Ω–æ –≤: {', '.join(event['match_highlights'])})"
            
            text_lines.append(
                f"{i}. {event['status_emoji']} <b>{event['full_name']}</b>{matches_str}\n"
                f"   üíº {event['position']}\n"
                f"   üìã {event['event_type']}\n"
                f"   üìÖ {event_date} ({event['status_text']})\n"
            )
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if pagination.get('total_pages', 0) > 1:
            text_lines.append(
                f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination['current_page'] + 1} –∏–∑ {pagination['total_pages']}"
            )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination_buttons = []
        if pagination.get('has_prev'):
            pagination_buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", 
                    callback_data=create_callback_data("text_search_page", q=query, p=page-1))
            )
        if pagination.get('has_next'):
            pagination_buttons.append(
                InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", 
                    callback_data=create_callback_data("text_search_page", q=query, p=page+1))
            )
        
        if pagination_buttons:
            keyboard.append(pagination_buttons)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.extend([
            [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data=create_callback_data("text_search_start"))],
            [InlineKeyboardButton("‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data=create_callback_data("text_search_filters", q=query))],
            [InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data=create_callback_data("search_menu"))]
        ])
    
    text = "\n".join(text_lines)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

async def text_search_page(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–∏—Å–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    search_query = data.get('q', '')
    page = data.get('p', 0)
    
    if search_query:
        await perform_text_search(update, context, search_query, page)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã")