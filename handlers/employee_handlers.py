"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
"""

import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters, CommandHandler

from config.constants import ConversationStates, AVAILABLE_POSITIONS
from core.database import db_manager
from core.security import encrypt_data, decrypt_data, is_admin
from core.utils import create_callback_data, parse_callback_data, validate_name, validate_event_type, validate_date, validate_interval
from managers.template_manager import TemplateManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º template_manager
template_manager = TemplateManager(db_manager)

logger = logging.getLogger(__name__)

async def add_employee_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    logger.info(f"üöÄ add_employee_start –≤—ã–∑–≤–∞–Ω–∞! Update: {type(update)}")
    
    # Additional logging to debug the issue
    logger.info(f"üîç Callback query data: {update.callback_query.data if update.callback_query else 'No callback query'}")
    
    query = update.callback_query
    logger.info(f"üìû Callback query: {query.data if query else 'None'}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
    if query:
        try:
            await query.answer()
            logger.info(f"‚úÖ query.answer() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.warning(f"Failed to answer callback query in add_employee_start: {e}")

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    logger.info(f"üë§ Chat ID: {chat_id}, User ID: {user_id}")

    if not is_admin(chat_id, user_id):
        logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        if query:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
            )
        else:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        return ConversationHandler.END
    
    logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –§–ò–û –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –§–ò–û...")
    if query:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"
        )
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
        
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ADD_NAME")
    return ConversationStates.ADD_NAME

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    contact = update.message.contact
    context.user_data['user_id'] = contact.user_id
    context.user_data['full_name'] = f"{contact.first_name} {contact.last_name}" if contact.last_name else contact.first_name

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    await show_position_selection(update, context)
    return ConversationStates.ADD_POSITION

async def add_employee_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    logger.info(f"üî•üî•üî• add_employee_name –í–´–ó–í–ê–ù–ê! –¢–µ–∫—Å—Ç: '{update.message.text}'")
    logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ConversationHandler ADD_NAME")
    
    # Additional logging to debug the issue
    logger.info(f"üîç Update type: {type(update)}")
    logger.info(f"üîç Update message type: {type(update.message)}")
    logger.info(f"üîç Update message text: {update.message.text if update.message else 'No message'}")
    logger.info(f"üîç Context user data: {context.user_data}")
    logger.info(f"üîç Chat ID: {update.effective_chat.id if update.effective_chat else 'No chat'}")
    logger.info(f"üîç User ID: {update.effective_user.id if update.effective_user else 'No user'}")
    
    # Check if we're in the right state
    logger.info(f"üîç Current conversation state: {context.user_data.get('conversation_state', 'Not set')}")
    
    if not update.message or not update.message.text:
        logger.error("‚ùå No message text received in add_employee_name")
        return ConversationStates.ADD_NAME
    
    full_name = update.message.text
    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–º—è: '{full_name}'")
    
    if not validate_name(full_name):
        logger.warning(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –Ω–µ –ø—Ä–æ—à–ª–∞: '{full_name}'")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return ConversationStates.ADD_NAME

    logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    context.user_data['full_name'] = full_name
    logger.info(f"üíæ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ user_data: '{full_name}'")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    logger.info(f"üéØ –í—ã–∑—ã–≤–∞–µ–º show_position_selection...")
    await show_position_selection(update, context)
    logger.info(f"‚úÖ show_position_selection –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ADD_POSITION")
    
    return ConversationStates.ADD_POSITION

async def show_position_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏"""
    logger.info(f"üéØ show_position_selection –≤—ã–∑–≤–∞–Ω–∞")
    
    # Additional logging to debug the issue
    logger.info(f"üîç Update type: {type(update)}")
    logger.info(f"üîç Update message type: {type(update.message) if update.message else 'No message'}")
    logger.info(f"üîç Full name in context: {context.user_data.get('full_name', 'Not found')}")
    logger.info(f"üîç Update effective chat: {update.effective_chat if update.effective_chat else 'No chat'}")
    logger.info(f"üîç Update effective user: {update.effective_user if update.effective_user else 'No user'}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏ (–ø–æ 2 –≤ —Ä—è–¥—É)
    keyboard = []
    logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å {len(AVAILABLE_POSITIONS)} –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏")
    
    for i in range(0, len(AVAILABLE_POSITIONS), 2):
        row = []
        for j in range(2):
            if i + j < len(AVAILABLE_POSITIONS):
                row.append(InlineKeyboardButton(
                    AVAILABLE_POSITIONS[i + j],
                    callback_data=create_callback_data("select_position", position=AVAILABLE_POSITIONS[i + j])
                ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=create_callback_data("cancel_add_employee"))])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard)} —Ä—è–¥–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    full_name = context.user_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...")
        chat_id = update.effective_chat.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{full_name}</b>\n\n"
                 "üíº –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
        logger.error(f"‚ùå Update details: {update}")
        logger.error(f"‚ùå Context user data: {context.user_data}")

async def handle_position_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    logger.info("üì• handle_position_selection called!")
    logger.info(f"   Update type: {type(update)}")
    logger.info(f"   Callback query data: {update.callback_query.data if update.callback_query else 'No callback query'}")
    
    query = update.callback_query
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
    try:
        await query.answer()
        logger.info("‚úÖ Callback query answered")
    except Exception as e:
        logger.warning(f"Failed to answer callback query in handle_position_selection: {e}")
    
    data = parse_callback_data(query.data)
    logger.info(f"   Parsed data: {data}")
    position = data.get('position')
    logger.info(f"   Position: {position}")
    
    if not position:
        logger.warning("‚ùå No position in callback data")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        )
        return ConversationHandler.END
    
    user_data = context.user_data
    full_name = user_data.get('full_name')
    logger.info(f"   Full name from context: {full_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if not full_name:
        logger.warning("‚ùå No full name in user data")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        )
        return ConversationHandler.END
    
    user_id = user_data.get('user_id')
    chat_id = update.effective_chat.id
    logger.info(f"   User ID: {user_id}, Chat ID: {chat_id}")

    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    encrypted_name = encrypt_data(full_name)
    logger.info("‚úÖ Name encrypted")

    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                '''INSERT INTO employees (chat_id, user_id, full_name, position)
                   VALUES (?, ?, ?, ?)''',
                (chat_id, user_id, encrypted_name, position)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            user_data['new_employee_id'] = cursor.lastrowid
            conn.commit()
            logger.info(f"‚úÖ Employee inserted with ID: {cursor.lastrowid}")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        employee_id = user_data['new_employee_id']
        template_applied = await template_manager.apply_template_by_position(employee_id, position)
        logger.info(f"   Template applied: {template_applied}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if template_applied:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{full_name}</b> —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é <b>{position}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                     f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω —à–∞–±–ª–æ–Ω —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.\n"
                     f"üìÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.",
                parse_mode='HTML'
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–æ–±—ã—Ç–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{full_name}</b> —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é <b>{position}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                     "üìÖ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–µ–¥–æ—Å–º–æ—Ç—Ä' / '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –ü-1' –∏ —Ç.–¥.):",
                parse_mode='HTML'
            )
            return ConversationStates.ADD_EVENT_TYPE
            
        return ConversationHandler.END
        
    except sqlite3.IntegrityError as e:
        logger.error(f"SQLite integrity error: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error saving employee: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        )
        return ConversationHandler.END

async def add_event_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    event_type = update.message.text
    if not validate_event_type(event_type):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return ConversationStates.ADD_EVENT_TYPE

    context.user_data['event_type'] = event_type
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.2023):"
    )
    return ConversationStates.ADD_LAST_DATE

async def add_last_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    date_str = update.message.text
    if not validate_date(date_str):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return ConversationStates.ADD_LAST_DATE

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
        last_date = datetime.strptime(date_str, "%d.%m.%Y").date()
        context.user_data['last_date'] = last_date.isoformat()

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 365):"
        )
        return ConversationStates.ADD_INTERVAL
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        return ConversationStates.ADD_LAST_DATE

async def add_interval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    interval_str = update.message.text
    if not validate_interval(interval_str):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3650.")
        return ConversationStates.ADD_INTERVAL

    interval = int(interval_str)
    user_data = context.user_data

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    from datetime import timedelta
    last_date = datetime.fromisoformat(user_data['last_date']).date()
    next_date = last_date + timedelta(days=interval)

    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                '''INSERT INTO employee_events 
                   (employee_id, event_type, last_event_date, interval_days, next_notification_date)
                   VALUES (?, ?, ?, ?, ?)''',
                (user_data['new_employee_id'], user_data['event_type'],
                 user_data['last_date'], interval, next_date.isoformat())
            )
            conn.commit()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await update.message.reply_text(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{user_data['event_type']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {next_date.strftime('%d.%m.%Y')}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error saving event: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
        return ConversationHandler.END

async def cancel_add_employee(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        )
    else:
        await update.message.reply_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
    return ConversationHandler.END

async def list_employees(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(chat_id, user_id):
        if update.callback_query:
            await update.callback_query.answer()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
            )
        return

    from config.settings import BotConfig
    page = context.user_data.get('employee_page', 0)
    limit = BotConfig.EMPLOYEES_PER_PAGE
    offset = page * limit

    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cursor.execute(
                "SELECT COUNT(*) as count FROM employees WHERE chat_id = ? AND is_active = 1",
                (chat_id,)
            )
            total_count = cursor.fetchone()['count']

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            cursor.execute(
                '''SELECT id, full_name, position 
                   FROM employees 
                   WHERE chat_id = ? AND is_active = 1 
                   ORDER BY full_name 
                   LIMIT ? OFFSET ?''',
                (chat_id, limit, offset)
            )
            employees = cursor.fetchall()

        if not employees and page == 0:
            response = "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!"
            if update.callback_query:
                await update.callback_query.answer()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=response
                )
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = [f"üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{((total_count - 1) // limit) + 1}):</b>"]
        for emp in employees:
            try:
                decrypted_name = decrypt_data(emp['full_name'])
            except ValueError:
                decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
            response.append(f"‚Ä¢ {decrypted_name} ({emp['position']})")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        keyboard = []
        for emp in employees:
            try:
                decrypted_name = decrypt_data(emp['full_name'])
            except ValueError:
                decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
            keyboard.append([
                InlineKeyboardButton(
                    f"{decrypted_name}",
                    callback_data=create_callback_data("select_employee", id=emp['id'])
                )
            ])

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=create_callback_data("emp_page", page=page - 1)
            ))
        if (page + 1) * limit < total_count:
            nav_buttons.append(InlineKeyboardButton(
                "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=create_callback_data("emp_page", page=page + 1)
            ))

        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append([InlineKeyboardButton(
            "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=create_callback_data("menu")
        )])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message:
            await update.message.reply_text(
                "\n".join(response),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            query = update.callback_query
            await query.answer()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="\n".join(response),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context.user_data['employee_page'] = page

    except Exception as e:
        logger.error(f"Error in list_employees: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        if update.message:
            await update.message.reply_text(error_msg)
        else:
            query = update.callback_query
            await query.answer()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_msg
            )

async def view_employee_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    from handlers.event_handlers import view_employee_details as view_details
    await view_details(update, context)

async def edit_employee_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    employee_id = data.get('id')
    
    if not employee_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    employee = db_manager.execute_with_retry('''
        SELECT id, full_name, position FROM employees WHERE id = ?
    ''', (employee_id,), fetch="one")
    
    if not employee:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    try:
        decrypted_name = decrypt_data(employee['full_name'])
    except ValueError:
        decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=create_callback_data("edit_name", id=employee_id))],
        [InlineKeyboardButton("üíº –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data=create_callback_data("edit_position", id=employee_id))],
        [InlineKeyboardButton("üìÖ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=create_callback_data("add_event_to_employee", id=employee_id))],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=create_callback_data("delete_employee", id=employee_id))],
        [InlineKeyboardButton("üîô –ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", callback_data=create_callback_data("select_employee", id=employee_id))]
    ]
    
    text = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
        f"üë§ –ò–º—è: <b>{decrypted_name}</b>\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{employee['position']}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def edit_employee_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    employee_id = data.get('id')
    
    if not employee_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    employee = db_manager.execute_with_retry('''
        SELECT full_name, position FROM employees WHERE id = ?
    ''', (employee_id,), fetch="one")
    
    if not employee:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return ConversationHandler.END
    
    try:
        current_name = decrypt_data(employee['full_name'])
    except ValueError:
        current_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['editing_employee_id'] = employee_id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = [
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            f"üë§ –¢–µ–∫—É—â–µ–µ –∏–º—è: <b>{current_name}</b>\n"
            f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{employee['position']}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"
        ),
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    return ConversationStates.EDIT_NAME

async def save_employee_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    new_name = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
    if new_name == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if not validate_name(new_name):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return ConversationStates.EDIT_NAME
    
    employee_id = context.user_data.get('editing_employee_id')
    if not employee_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        employee = db_manager.execute_with_retry('''
            SELECT full_name, position FROM employees WHERE id = ?
        ''', (employee_id,), fetch="one")
        
        if not employee:
            await update.message.reply_text(
                "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        try:
            old_name = decrypt_data(employee['full_name'])
        except ValueError:
            old_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if old_name == new_name:
            await update.message.reply_text(
                f"‚ÑπÔ∏è <b>–ò–º—è –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ</b>\n\n"
                f"üë§ –ò–º—è: <b>{new_name}</b>\n"
                f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{employee['position']}</b>\n\n"
                f"–ò–º—è —É–∂–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode='HTML'
            )
            return ConversationHandler.END
        
        # –®–∏—Ñ—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
        encrypted_name = encrypt_data(new_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ
        db_manager.execute_with_retry('''
            UPDATE employees SET full_name = ? WHERE id = ?
        ''', (encrypted_name, employee_id))
        
        await update.message.reply_text(
            f"‚úÖ <b>–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"üë§ –°—Ç–∞—Ä–æ–µ –∏–º—è: <b>{old_name}</b>\n"
            f"üë§ –ù–æ–≤–æ–µ –∏–º—è: <b>{new_name}</b>\n"
            f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{employee['position']}</b>",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='HTML'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        logger.info(f"Employee {employee_id} name changed from '{old_name}' to '{new_name}'")
        
        return ConversationHandler.END
        
    except sqlite3.IntegrityError:
        await update.message.reply_text(
            "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error updating employee name: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def edit_employee_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    employee_id = data.get('id')
    
    if not employee_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    employee = db_manager.execute_with_retry('''
        SELECT full_name, position FROM employees WHERE id = ?
    ''', (employee_id,), fetch="one")
    
    if not employee:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    try:
        decrypted_name = decrypt_data(employee['full_name'])
    except ValueError:
        decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏ (–ø–æ 2 –≤ —Ä—è–¥—É)
    keyboard = []
    for i in range(0, len(AVAILABLE_POSITIONS), 2):
        row = []
        for j in range(2):
            if i + j < len(AVAILABLE_POSITIONS):
                position = AVAILABLE_POSITIONS[i + j]
                # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
                prefix = "‚úÖ " if position == employee['position'] else ""
                row.append(InlineKeyboardButton(
                    f"{prefix}{position}",
                    callback_data=create_callback_data("save_position", id=employee_id, pos=position)
                ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=create_callback_data("edit_employee", id=employee_id))])
    
    text = (
        f"üíº <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</b>\n\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{decrypted_name}</b>\n"
        f"–¢–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{employee['position']}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def save_employee_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    employee_id = data.get('id')
    new_position = data.get('pos')
    
    if not employee_id or not new_position:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = db_manager.execute_with_retry('''
            SELECT full_name, position FROM employees WHERE id = ?
        ''', (employee_id,), fetch="one")
        
        if not employee:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return
            
        old_position = employee['position']
        
        try:
            decrypted_name = decrypt_data(employee['full_name'])
        except ValueError:
            decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
        
        # –ï—Å–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if old_position == new_position:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚ÑπÔ∏è <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞</b>\n\n"
                     f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{decrypted_name}</b>\n"
                     f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{new_position}</b>\n\n"
                     f"–î–æ–ª–∂–Ω–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
                parse_mode='HTML'
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        db_manager.execute_with_retry('''
            UPDATE employees SET position = ? WHERE id = ?
        ''', (new_position, employee_id))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        template_applied = await template_manager.apply_template_by_position(employee_id, new_position)
        
        if template_applied:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –∏ —à–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>\n\n"
                     f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{decrypted_name}</b>\n"
                     f"üíº –°—Ç–∞—Ä–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{old_position}</b>\n"
                     f"üíº –ù–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{new_position}</b>\n\n"
                     f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω —à–∞–±–ª–æ–Ω —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ <b>{new_position}</b>.\n"
                     f"üìÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.",
                parse_mode='HTML'
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n"
                     f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{decrypted_name}</b>\n"
                     f"üíº –°—Ç–∞—Ä–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{old_position}</b>\n"
                     f"üíº –ù–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{new_position}</b>\n\n"
                     f"‚ÑπÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω.",
                parse_mode='HTML'
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        logger.info(f"Employee {employee_id} ({decrypted_name}) position changed from '{old_position}' to '{new_position}', template applied: {template_applied}")
        
    except Exception as e:
        logger.error(f"Error updating employee position: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        )

async def add_event_to_employee(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    employee_id = data.get('id')
    
    if not employee_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_employee_id'] = employee_id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = [
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–µ–¥–æ—Å–º–æ—Ç—Ä' / '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –ü-1' –∏ —Ç.–¥.):",
        reply_markup=reply_markup
    )
    
    return ConversationStates.ADD_EVENT_TO_EMPLOYEE_TYPE

async def add_event_to_employee_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    event_type = update.message.text.strip()
    
    if not validate_event_type(event_type):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.\n"
            "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return ConversationStates.ADD_EVENT_TO_EMPLOYEE_TYPE
    
    context.user_data['new_event_type'] = event_type
    
    employee_name = context.user_data.get('current_employee_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{event_type}</b>\n\n"
        f"üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è\n"
        f"–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        f"‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: 15.03.2024",
        parse_mode='HTML'
    )
    
    return ConversationStates.ADD_EVENT_TO_EMPLOYEE_DATE

async def add_event_to_employee_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    date_str = update.message.text.strip()
    
    if not validate_date(date_str):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ü—Ä–∏–º–µ—Ä: 15.03.2024"
        )
        return ConversationStates.ADD_EVENT_TO_EMPLOYEE_DATE
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
        last_date = datetime.strptime(date_str, "%d.%m.%Y").date()
        context.user_data['new_event_last_date'] = last_date.isoformat()
        
        event_type = context.user_data.get('new_event_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        await update.message.reply_text(
            f"‚úÖ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è: <b>{date_str}</b>\n\n"
            f"üîÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö\n"
            f"–º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ '{event_type}'\n\n"
            f"‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä—ã: 365 (–≥–æ–¥), 180 (–ø–æ–ª–≥–æ–¥–∞), 90 (3 –º–µ—Å—è—Ü–∞)",
            parse_mode='HTML'
        )
        
        return ConversationStates.ADD_EVENT_TO_EMPLOYEE_INTERVAL
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì"
        )
        return ConversationStates.ADD_EVENT_TO_EMPLOYEE_DATE

async def add_event_to_employee_interval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    interval_str = update.message.text.strip()
    
    if not validate_interval(interval_str):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3650."
        )
        return ConversationStates.ADD_EVENT_TO_EMPLOYEE_INTERVAL

    interval = int(interval_str)
    user_data = context.user_data

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    from datetime import timedelta
    last_date = datetime.fromisoformat(user_data['new_event_last_date']).date()
    next_date = last_date + timedelta(days=interval)

    try:
        employee_id = user_data['current_employee_id']
        
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                '''INSERT INTO employee_events 
                   (employee_id, event_type, last_event_date, interval_days, next_notification_date)
                   VALUES (?, ?, ?, ?, ?)''',
                (employee_id, user_data['new_event_type'],
                 user_data['new_event_last_date'], interval, next_date.isoformat())
            )
            conn.commit()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await update.message.reply_text(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É!\n\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{user_data['current_employee_name']}</b>\n"
            f"üìù –°–æ–±—ã—Ç–∏–µ: <b>{user_data['new_event_type']}</b>\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: <b>{last_date.strftime('%d.%m.%Y')}</b>\n"
            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{interval}</b> –¥–Ω–µ–π\n"
            f"üîî –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: <b>{next_date.strftime('%d.%m.%Y')}</b>",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='HTML'
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error saving employee event: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def cancel_add_event_to_employee(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for key in ['current_employee_id', 'current_employee_name', 'current_employee_position',
               'new_event_type', 'new_event_last_date']:
        context.user_data.pop(key, None)
    
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ"
        )
    else:
        await update.message.reply_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ"
        )
    
    return ConversationHandler.END

async def delete_employee(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    employee_id = data.get('id')
    
    if not employee_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    employee = db_manager.execute_with_retry('''
        SELECT full_name, position FROM employees WHERE id = ?
    ''', (employee_id,), fetch="one")
    
    if not employee:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    try:
        decrypted_name = decrypt_data(employee['full_name'])
    except ValueError:
        decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
    events_count = db_manager.execute_with_retry('''
        SELECT COUNT(*) as count FROM employee_events WHERE employee_id = ?
    ''', (employee_id,), fetch="one")['count']
    
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=create_callback_data("confirm_delete", id=employee_id))],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=create_callback_data("edit_employee", id=employee_id))]
    ]
    
    text = (
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{decrypted_name}</b>\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{employee['position']}</b>\n"
        f"üìÖ –°–æ–±—ã—Ç–∏—è: <b>{events_count} —à—Ç.</b>\n\n"
        f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
        f"–ë—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã:\n"
        f"‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
        f"‚Ä¢ –í—Å–µ –µ–≥–æ —Å–æ–±—ã—Ç–∏—è ({events_count} —à—Ç.)\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def confirm_delete_employee(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    employee_id = data.get('id')
    
    if not employee_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    employee = db_manager.execute_with_retry('''
        SELECT full_name, position FROM employees WHERE id = ?
    ''', (employee_id,), fetch="one")
    
    if not employee:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    try:
        decrypted_name = decrypt_data(employee['full_name'])
    except ValueError:
        decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
    
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        events_count = db_manager.execute_with_retry('''
            SELECT COUNT(*) as count FROM employee_events WHERE employee_id = ?
        ''', (employee_id,), fetch="one")['count']
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        events_deleted = db_manager.execute_with_retry('''
            DELETE FROM employee_events WHERE employee_id = ?
        ''', (employee_id,))
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee_deleted = db_manager.execute_with_retry('''
            DELETE FROM employees WHERE id = ?
        ''', (employee_id,))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>\n\n"
                 f"üë§ –£–¥–∞–ª–µ–Ω: <b>{decrypted_name}</b>\n"
                 f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{employee['position']}</b>\n"
                 f"üìÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: <b>{events_count} —à—Ç.</b>\n\n"
                 f"üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            parse_mode='HTML'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        logger.info(f"Employee {employee_id} ({decrypted_name}) and {events_count} events deleted")
        
    except Exception as e:
        logger.error(f"Error deleting employee {employee_id}: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏</b>\n\n"
                 f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n"
                 f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='HTML'
        )

# Removed duplicate conversation handler to prevent conflicts
# The conversation handler is properly defined in main.py

# Conversation handler for employee management

