"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.security import is_admin
from core.utils import create_callback_data, parse_callback_data
from managers.export_manager import ExportManager
from core.database import db_manager

# Initialize export manager
excel_exporter = ExportManager(db_manager)

logger = logging.getLogger(__name__)

async def export_menu_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not is_admin(chat_id, user_id):
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìà Excel (.xlsx)", callback_data=create_callback_data("export", format="xlsx"))],
        [InlineKeyboardButton("üìÑ CSV (.csv)", callback_data=create_callback_data("export", format="csv"))],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]
    ]
    
    text = (
        "üìÅ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
        "üìà <b>Excel</b> - —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n"
        "üìÑ <b>CSV</b> - –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
        "–§–∞–π–ª –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏."
    )
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def handle_export(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    file_format = data.get('format', 'xlsx')
    chat_id = update.effective_chat.id
    
    await query.edit_message_text("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        file_buffer = await excel_exporter.export_all_events(chat_id, file_format)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        current_date = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"events_report_{current_date}.{file_format}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await context.bot.send_document(
            chat_id=chat_id,
            document=file_buffer,
            filename=filename,
            caption=f"üìä –û—Ç—á–µ—Ç –ø–æ —Å–æ–±—ã—Ç–∏—è–º –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await query.edit_message_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"Export error: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

# Alias for backward compatibility
export_data_start = export_menu_start