"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.utils import create_callback_data, parse_callback_data
from core.security import is_admin
from managers.automated_reports_manager import AutomatedReportsManager
from core.database import db_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
automated_reports_manager = AutomatedReportsManager(db_manager)

logger = logging.getLogger(__name__)

async def reports_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not is_admin(chat_id, user_id):
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç–∞–º–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = automated_reports_manager.get_report_settings(chat_id)
    
    text_lines = [
        "üìä <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã</b>",
        "",
        "üîÑ <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>",
        f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('daily_enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}",
        f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('weekly_enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}",
        f"üìà –ú–µ—Å—è—á–Ω—ã–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('monthly_enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}",
        "",
        "‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>",
        f"üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: {settings.get('daily_time', '09:00')}",
        f"üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 08:00",
        f"üìä –ï–∂–µ–º–µ—Å—è—á–Ω–æ: 1 —á–∏—Å–ª–æ –≤ 09:00",
        "",
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    ]
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤", callback_data=create_callback_data("reports_settings")),
            InlineKeyboardButton("üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=create_callback_data("request_report"))
        ],
        [
            InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤", callback_data=create_callback_data("reports_history")),
            InlineKeyboardButton("üìä –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data=create_callback_data("test_report"))
        ],
        [
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def reports_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = automated_reports_manager.get_report_settings(chat_id)
    
    text_lines = [
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤</b>",
        "",
        "üìä <b>–¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤:</b>",
        "",
        f"üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏</b>",
        f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('daily_enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}",
        f"   –í—Ä–µ–º—è: {settings.get('daily_time', '09:00')}",
        f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: —Å–æ–±—ã—Ç–∏—è –¥–Ω—è, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ, –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ",
        "",
        f"üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>",
        f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('weekly_enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}",
        f"   –í—Ä–µ–º—è: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 08:00",
        f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: —Ç—Ä–µ–Ω–¥—ã, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø—Ä–æ–≥–Ω–æ–∑—ã",
        "",
        f"üìà <b>–ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</b>",
        f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('monthly_enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}",
        f"   –í—Ä–µ–º—è: 1 —á–∏—Å–ª–æ –≤ 09:00",
        f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –∏—Ç–æ–≥–∏ –º–µ—Å—è—Ü–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    ]
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton(
                f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ {'‚ùå' if settings.get('daily_enabled') else '‚úÖ'}", 
                callback_data=create_callback_data("toggle_daily_reports")
            ),
            InlineKeyboardButton(
                f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ {'‚ùå' if settings.get('weekly_enabled') else '‚úÖ'}", 
                callback_data=create_callback_data("toggle_weekly_reports")
            )
        ],
        [
            InlineKeyboardButton(
                f"üìà –ú–µ—Å—è—á–Ω—ã–µ {'‚ùå' if settings.get('monthly_enabled') else '‚úÖ'}", 
                callback_data=create_callback_data("toggle_monthly_reports")
            ),
            InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è", callback_data=create_callback_data("set_report_time"))
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("reports_settings")),
            InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def request_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üìä <b>–ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
        "üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</b> - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é\n"
        "üìà <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</b> - –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü\n"
        "üéØ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç</b> - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data=create_callback_data("generate_daily")),
            InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=create_callback_data("generate_weekly"))
        ],
        [
            InlineKeyboardButton("üìà –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data=create_callback_data("generate_monthly")),
            InlineKeyboardButton("üéØ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data=create_callback_data("generate_full"))
        ],
        [
            InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def generate_daily_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    query = update.callback_query
    await query.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    try:
        await automated_reports_manager.send_custom_report(
            context, chat_id, 'daily', user_id
        )
        
        await query.edit_message_text(
            "‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error generating daily report: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )

async def generate_weekly_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    query = update.callback_query
    await query.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    try:
        await automated_reports_manager.send_custom_report(
            context, chat_id, 'weekly', user_id
        )
        
        await query.edit_message_text(
            "‚úÖ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error generating weekly report: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )

async def generate_monthly_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    query = update.callback_query
    await query.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    try:
        await automated_reports_manager.send_custom_report(
            context, chat_id, 'monthly', user_id
        )
        
        await query.edit_message_text(
            "‚úÖ <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error generating monthly report: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )

async def generate_full_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–∏ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–æ–≤
        await automated_reports_manager.send_custom_report(context, chat_id, 'daily', user_id)
        await automated_reports_manager.send_custom_report(context, chat_id, 'weekly', user_id)
        await automated_reports_manager.send_custom_report(context, chat_id, 'monthly', user_id)
        
        await query.edit_message_text(
            "‚úÖ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error generating full report: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )

async def toggle_daily_reports(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = automated_reports_manager.get_report_settings(chat_id)
        new_status = not settings.get('daily_enabled', True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        db_manager.execute_with_retry('''
            INSERT OR REPLACE INTO report_settings 
            (chat_id, daily_enabled, weekly_enabled, monthly_enabled, daily_time, weekly_day, monthly_day)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            chat_id, new_status, settings.get('weekly_enabled', True),
            settings.get('monthly_enabled', True), settings.get('daily_time', '09:00'),
            settings.get('weekly_day', 1), settings.get('monthly_day', 1)
        ))
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await query.answer(f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã {status_text}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await reports_settings(update, context)
        
    except Exception as e:
        logger.error(f"Error toggling daily reports: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

async def toggle_weekly_reports(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    try:
        settings = automated_reports_manager.get_report_settings(chat_id)
        new_status = not settings.get('weekly_enabled', True)
        
        db_manager.execute_with_retry('''
            INSERT OR REPLACE INTO report_settings 
            (chat_id, daily_enabled, weekly_enabled, monthly_enabled, daily_time, weekly_day, monthly_day)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            chat_id, settings.get('daily_enabled', True), new_status,
            settings.get('monthly_enabled', True), settings.get('daily_time', '09:00'),
            settings.get('weekly_day', 1), settings.get('monthly_day', 1)
        ))
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await query.answer(f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã {status_text}")
        
        await reports_settings(update, context)
        
    except Exception as e:
        logger.error(f"Error toggling weekly reports: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

async def toggle_monthly_reports(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    try:
        settings = automated_reports_manager.get_report_settings(chat_id)
        new_status = not settings.get('monthly_enabled', True)
        
        db_manager.execute_with_retry('''
            INSERT OR REPLACE INTO report_settings 
            (chat_id, daily_enabled, weekly_enabled, monthly_enabled, daily_time, weekly_day, monthly_day)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            chat_id, settings.get('daily_enabled', True), settings.get('weekly_enabled', True),
            new_status, settings.get('daily_time', '09:00'),
            settings.get('weekly_day', 1), settings.get('monthly_day', 1)
        ))
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await query.answer(f"üìà –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã {status_text}")
        
        await reports_settings(update, context)
        
    except Exception as e:
        logger.error(f"Error toggling monthly reports: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

async def test_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer("üìä –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç...")
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    try:
        test_report = (
            "üìä <b>–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"üïí –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üíª –ß–∞—Ç ID: {chat_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n\n"
            "‚úÖ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b> –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
            "üìä <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã:</b> –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã\n"
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –§—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç\n"
            "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b> –î–æ—Å—Ç—É–ø–Ω–∞\n\n"
            "üí° –≠—Ç–æ—Ç –æ—Ç—á–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text=test_report,
            parse_mode='HTML'
        )
        
        await query.edit_message_text(
            "‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            "üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error sending test report: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data=create_callback_data("reports_menu"))
            ]])
        )