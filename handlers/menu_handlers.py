"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.security import is_admin
from core.utils import create_callback_data, parse_callback_data

logger = logging.getLogger(__name__)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    keyboard = [
        [InlineKeyboardButton("üìÖ –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", callback_data=create_callback_data("my_events"))]
    ]

    if is_admin(chat_id, user_id):
        admin_buttons = [
            [
                InlineKeyboardButton("üìä –î–∞—à–±–æ—Ä–¥", callback_data=create_callback_data("dashboard")),
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data=create_callback_data("search_menu"))
            ],
            [
                InlineKeyboardButton("üë®‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=create_callback_data("add_employee")),
                InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data=create_callback_data("list_employees"))
            ],
            [
                InlineKeyboardButton("üìä –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data=create_callback_data("all_events")),
                InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=create_callback_data("export_menu"))
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=create_callback_data("settings")),
                InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data=create_callback_data("help"))
            ]
        ]
        keyboard.extend(admin_buttons)
    else:
        keyboard.append([
            InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data=create_callback_data("help"))
        ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    menu_text = (
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )

    if update.message:
        await update.message.reply_text(menu_text, reply_markup=reply_markup, parse_mode='HTML')
    elif update.callback_query:
        await update.callback_query.edit_message_text(menu_text, reply_markup=reply_markup, parse_mode='HTML')

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–Ω—é"""
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å: {update.callback_query.data if update.callback_query else 'None'}")
    
    # Additional logging to debug the issue
    logger.info(f"üîç Update type: {type(update)}")
    logger.info(f"üîç Callback query: {update.callback_query if update.callback_query else 'No callback query'}")
    
    query = update.callback_query
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback
    try:
        await query.answer()
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.warning(f"Failed to answer callback query (network timeout): {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–∞–π–º–∞—É—Ç
    
    try:
        data = parse_callback_data(query.data)
        logger.info(f"üìù –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        action = data.get('action')
        
        if not action:
            logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ callback –¥–∞–Ω–Ω—ã—Ö")
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return
        
        logger.info(f"üéØ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        if action == "menu":
            await show_menu(update, context)
            
        elif action == "help":
            await help_command(update, context)
            
        elif action == "my_events":
            from handlers.event_handlers import my_events
            await my_events(update, context)
            
        elif action == "add_employee":
            from handlers.employee_handlers import add_employee_start
            await add_employee_start(update, context)
            
        elif action == "list_employees":
            from handlers.employee_handlers import list_employees
            await list_employees(update, context)
            
        elif action == "all_events":
            from handlers.event_handlers import all_events
            await all_events(update, context)
            
        elif action == "search_menu":
            from handlers.search_handlers import search_menu_start
            await search_menu_start(update, context)
            
        elif action == "export_menu":
            from handlers.export_handlers import export_menu_start
            await export_menu_start(update, context)
            
        elif action == "templates":
            from handlers.template_handlers import templates_menu
            await templates_menu(update, context)
            
        elif action == "settings":
            await settings_menu(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        elif action == "select_employee":
            employee_id = data.get('id')
            if employee_id:
                context.user_data['selected_employee'] = employee_id
                from handlers.employee_handlers import view_employee_details
                await view_employee_details(update, context)
                
        elif action == "emp_page":
            page = data.get('page', 0)
            context.user_data['employee_page'] = page
            from handlers.employee_handlers import list_employees
            await list_employees(update, context)
            
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
        elif action == "search_filter":
            from handlers.search_handlers import search_by_filter
            await search_by_filter(update, context)
            
        elif action == "search_employees":
            from handlers.search_handlers import search_employees
            await search_employees(update, context)
            
        elif action == "employee_events":
            from handlers.search_handlers import show_employee_events
            await show_employee_events(update, context)
            
        elif action == "search_by_type":
            from handlers.search_handlers import search_by_event_type
            await search_by_event_type(update, context)
            
        elif action == "search_event_type":
            from handlers.search_handlers import search_events_by_type
            await search_events_by_type(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
        elif action == "dashboard":
            from handlers.dashboard_handlers import dashboard_main
            await dashboard_main(update, context)
            
        elif action == "dashboard_analytics":
            from handlers.dashboard_handlers import dashboard_analytics
            await dashboard_analytics(update, context)
            
        elif action == "dashboard_employees":
            from handlers.dashboard_handlers import dashboard_employees
            await dashboard_employees(update, context)
            
        elif action == "dashboard_performance":
            from handlers.dashboard_handlers import dashboard_performance
            await dashboard_performance(update, context)
            
        elif action == "dashboard_alerts":
            from handlers.dashboard_handlers import dashboard_alerts
            await dashboard_alerts(update, context)
            
        elif action == "dashboard_timeline":
            from handlers.dashboard_handlers import dashboard_timeline
            await dashboard_timeline(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        elif action == "text_search_start":
            from handlers.search_handlers import text_search_start
            await text_search_start(update, context)
            
        elif action == "quick_text_search":
            from handlers.search_handlers import quick_text_search
            await quick_text_search(update, context)
            
        elif action == "text_search_page":
            from handlers.search_handlers import text_search_page
            await text_search_page(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        elif action == "analytics_menu":
            from handlers.analytics_handlers import analytics_main_menu
            await analytics_main_menu(update, context)
            
        elif action == "analytics_trends":
            from handlers.analytics_handlers import analytics_trends
            await analytics_trends(update, context)
            
        elif action == "analytics_timeline":
            from handlers.analytics_handlers import analytics_timeline
            await analytics_timeline(update, context)
            
        elif action == "analytics_forecast":
            from handlers.analytics_handlers import analytics_forecast
            await analytics_forecast(update, context)
            
        elif action == "analytics_efficiency":
            from handlers.analytics_handlers import analytics_efficiency
            await analytics_efficiency(update, context)
            
        elif action == "analytics_summary":
            from handlers.analytics_handlers import analytics_summary
            await analytics_summary(update, context)
            
        elif action == "analytics_export_excel":
            from handlers.analytics_handlers import analytics_export_excel
            await analytics_export_excel(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
        elif action == "analytics_monthly_chart":
            from handlers.analytics_handlers import show_monthly_chart
            await show_monthly_chart(update, context)
            
        elif action == "analytics_weekly_chart":
            from handlers.analytics_handlers import show_weekly_chart
            await show_weekly_chart(update, context)
            
        elif action == "analytics_daily_chart":
            from handlers.analytics_handlers import show_daily_chart
            await show_daily_chart(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
        elif action == "reports_menu":
            from handlers.reports_handlers import reports_main_menu
            await reports_main_menu(update, context)
            
        elif action == "reports_settings":
            from handlers.reports_handlers import reports_settings
            await reports_settings(update, context)
            
        elif action == "request_report":
            from handlers.reports_handlers import request_report
            await request_report(update, context)
            
        elif action == "generate_daily":
            from handlers.reports_handlers import generate_daily_report
            await generate_daily_report(update, context)
            
        elif action == "generate_weekly":
            from handlers.reports_handlers import generate_weekly_report
            await generate_weekly_report(update, context)
            
        elif action == "generate_monthly":
            from handlers.reports_handlers import generate_monthly_report
            await generate_monthly_report(update, context)
            
        elif action == "generate_full":
            from handlers.reports_handlers import generate_full_report
            await generate_full_report(update, context)
            
        elif action == "toggle_daily_reports":
            from handlers.reports_handlers import toggle_daily_reports
            await toggle_daily_reports(update, context)
            
        elif action == "toggle_weekly_reports":
            from handlers.reports_handlers import toggle_weekly_reports
            await toggle_weekly_reports(update, context)
            
        elif action == "toggle_monthly_reports":
            from handlers.reports_handlers import toggle_monthly_reports
            await toggle_monthly_reports(update, context)
            
        elif action == "test_report":
            from handlers.reports_handlers import test_report
            await test_report(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        elif action == "advanced_workload_forecast":
            from handlers.analytics_handlers import advanced_workload_forecast
            await advanced_workload_forecast(update, context)
            
        elif action == "forecast_short":
            from handlers.analytics_handlers import forecast_short
            await forecast_short(update, context)
            
        elif action == "forecast_medium":
            from handlers.analytics_handlers import forecast_medium
            await forecast_medium(update, context)
            
        elif action == "forecast_long":
            from handlers.analytics_handlers import forecast_long
            await forecast_long(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif action == "set_notif_days":
            from handlers.settings_handlers import set_notification_days
            await set_notification_days(update, context)
            
        elif action == "set_timezone":
            from handlers.settings_handlers import set_timezone
            await set_timezone(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        elif action == "export":
            from handlers.export_handlers import handle_export
            await handle_export(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
        elif action == "select_template":
            from handlers.template_handlers import select_employee_for_template
            await select_employee_for_template(update, context)
            
        elif action == "apply_template":
            from handlers.template_handlers import apply_template_to_employee
            await apply_template_to_employee(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        elif action == "edit_employee":
            from handlers.employee_handlers import edit_employee_start
            await edit_employee_start(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif action == "save_notif_days":
            from handlers.settings_handlers import save_notification_days
            await save_notification_days(update, context)
            
        elif action == "save_timezone":
            from handlers.settings_handlers import save_timezone
            await save_timezone(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        elif action == "save_position":
            from handlers.employee_handlers import save_employee_position
            await save_employee_position(update, context)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        elif action == "delete_employee":
            from handlers.employee_handlers import delete_employee
            await delete_employee(update, context)
            
        elif action == "confirm_delete":
            from handlers.employee_handlers import confirm_delete_employee
            await confirm_delete_employee(update, context)
            
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"Error in menu_handler: {e}")
        logger.error(f"Update details: {update}")
        logger.error(f"Context details: {context}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏</b>\n\n"
        
        "üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ üìÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (90-30-7-3 –¥–Ω—è)\n"
        "‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel/CSV\n"
        "‚Ä¢ üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n"
        "‚Ä¢ üìã –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π\n\n"
        
        "üîç <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞:</b>\n"
        "‚Ä¢ üî¥ –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ, –∫—Ä–∏—Ç–∏—á–Ω—ã–µ, —Å—Ä–æ—á–Ω—ã–µ)\n"
        "‚Ä¢ üë• –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º\n"
        "‚Ä¢ üìã –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ üìÅ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞\n\n"
        
        "üë§ <b>–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "üìÖ –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è - –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n"
        
        "üë®‚Äçüíº <b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        "‚Ä¢ üìä –î–∞—à–±–æ—Ä–¥ - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π\n"
        "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–±—ã—Ç–∏–π\n"
        "‚Ä¢ üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel/CSV —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
        "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤\n\n"
        
        "üìä <b>–î–∞—à–±–æ—Ä–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        "‚Ä¢ üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π\n"
        "‚Ä¢ üë• –ê–Ω–∞–ª–∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞\n"
        "‚Ä¢ üìã –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –∏ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π\n"
        "‚Ä¢ üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∏ —Ç—Ä–µ–Ω–¥—ã\n"
        "‚Ä¢ üö® –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ ‚ö° –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã\n\n"
        
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ü–ª–æ—Ç–Ω–∏–∫\n"
        "‚Ä¢ –ú–∞–ª—è—Ä\n"
        "‚Ä¢ –†–∞–±–æ—á–∏–π –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∏ —Ä–µ–º–æ–Ω—Ç—É –∑–¥–∞–Ω–∏–π\n"
        "‚Ä¢ –î–≤–æ—Ä–Ω–∏–∫\n"
        "‚Ä¢ –£–±–æ—Ä—â–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ú–∞—Å—Ç–µ—Ä / –°—Ç–∞—Ä—à–∏–π –º–∞—Å—Ç–µ—Ä\n\n"
        
        "üîî <b>–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n"
        "‚Ä¢ üü¢ –ó–∞ 90 –¥–Ω–µ–π - –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ üü° –ó–∞ 30 –¥–Ω–µ–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
        "‚Ä¢ üü† –ó–∞ 7 –¥–Ω–µ–π - —Å—Ä–æ—á–Ω–æ\n"
        "‚Ä¢ üî¥ –ó–∞ 1-3 –¥–Ω—è - –∫—Ä–∏—Ç–∏—á–Ω–æ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)\n"
        "‚Ä¢ ‚ö´ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ + —ç—Å–∫–∞–ª–∞—Ü–∏—è\n\n"
        
        "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
    )

    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.callback_query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='HTML')

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not is_admin(chat_id, user_id):
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return

    keyboard = [
        [InlineKeyboardButton("‚è∞ –î–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data=create_callback_data("set_notif_days"))],
        [InlineKeyboardButton("üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data=create_callback_data("set_timezone"))],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]
    ]

    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
        "‚è∞ <b>–î–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b> - –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        "üïí <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b> - –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )

    await query.edit_message_text(
        settings_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )