"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.database import db_manager
from core.security import decrypt_data, is_admin
from core.utils import create_callback_data

logger = logging.getLogger(__name__)

async def my_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()

            # –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ user_id
            cursor.execute(
                '''SELECT e.id, e.full_name, e.position 
                   FROM employees e 
                   WHERE e.chat_id = ? AND e.user_id = ? AND e.is_active = 1''',
                (chat_id, user_id)
            )
            employee = cursor.fetchone()

            if not employee:
                response = "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
                keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if update.message:
                    await update.message.reply_text(response, reply_markup=reply_markup)
                else:
                    query = update.callback_query
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=response,
                        reply_markup=reply_markup
                    )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            cursor.execute(
                '''SELECT event_type, next_notification_date, interval_days 
                   FROM employee_events 
                   WHERE employee_id = ? 
                   ORDER BY next_notification_date''',
                (employee['id'],)
            )
            events = cursor.fetchall()

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–º–µ–Ω–∏
        try:
            decrypted_name = decrypt_data(employee['full_name'])
        except ValueError:
            decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = [
            f"üìÖ <b>–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n",
            f"üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {decrypted_name}",
            f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employee['position']}",
            "",
            "üìÖ <b>–°–æ–±—ã—Ç–∏—è:</b>"
        ]

        if not events:
            response.append("‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")
        else:
            for event in events:
                event_date = datetime.fromisoformat(event['next_notification_date']).date()
                days_left = (event_date - datetime.now().date()).days
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
                if days_left < 0:
                    status = f"üî¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_left)} –¥–Ω."
                elif days_left <= 3:
                    status = f"üî¥ —á–µ—Ä–µ–∑ {days_left} –¥–Ω. (–∫—Ä–∏—Ç–∏—á–Ω–æ!)"
                elif days_left <= 7:
                    status = f"üü† —á–µ—Ä–µ–∑ {days_left} –¥–Ω. (—Å—Ä–æ—á–Ω–æ)"
                elif days_left <= 30:
                    status = f"üü° —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
                else:
                    status = f"üü¢ —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
                
                response.append(
                    f"‚Ä¢ <b>{event['event_type']}</b>\n"
                    f"  üìÖ {event_date.strftime('%d.%m.%Y')} ({status})"
                )

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = "\n".join(response)
        if update.message:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
        else:
            query = update.callback_query
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

    except Exception as e:
        logger.error(f"Error in my_events: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π"
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(error_msg, reply_markup=reply_markup)
        else:
            query = update.callback_query
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_msg,
                reply_markup=reply_markup
            )

async def all_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not is_admin(chat_id, user_id):
        query = update.callback_query
        await query.answer()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —á–∞—Ç–∞
        events = db_manager.execute_with_retry('''
            SELECT 
                e.full_name,
                e.position,
                ee.event_type,
                ee.next_notification_date,
                (julianday(ee.next_notification_date) - julianday('now')) as days_until
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            ORDER BY ee.next_notification_date
            LIMIT 20
        ''', (chat_id,), fetch="all")

        if not events:
            response = "‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π"
        else:
            response_lines = ["üìä <b>–í—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n"]
            
            for event in events:
                try:
                    decrypted_name = decrypt_data(event['full_name'])
                except ValueError:
                    decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
                
                event_date = datetime.fromisoformat(event['next_notification_date']).date()
                days_until = int(event['days_until']) if event['days_until'] else 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if days_until < 0:
                    status_emoji = "üî¥"
                    status_text = f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_until)} –¥–Ω."
                elif days_until <= 3:
                    status_emoji = "üî¥"
                    status_text = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω. (–∫—Ä–∏—Ç–∏—á–Ω–æ!)"
                elif days_until <= 7:
                    status_emoji = "üü†"
                    status_text = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω. (—Å—Ä–æ—á–Ω–æ)"
                elif days_until <= 30:
                    status_emoji = "üü°"
                    status_text = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
                else:
                    status_emoji = "üü¢"
                    status_text = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
                
                response_lines.append(
                    f"{status_emoji} <b>{decrypted_name}</b> ({event['position']})\n"
                    f"   üìã {event['event_type']}\n"
                    f"   üìÖ {event_date.strftime('%d.%m.%Y')} ({status_text})\n"
                )
            
            if len(events) >= 20:
                response_lines.append("üìù <i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 —Å–æ–±—ã—Ç–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.</i>")
            
            response = "\n".join(response_lines)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π", callback_data=create_callback_data("search_menu")),
                InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=create_callback_data("export_menu"))
            ],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text(response, reply_markup=reply_markup, parse_mode='HTML')
        else:
            query = update.callback_query
            await query.answer()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=response,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

    except Exception as e:
        logger.error(f"Error in all_events: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(error_msg, reply_markup=reply_markup)
        else:
            query = update.callback_query
            await query.answer()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_msg,
                reply_markup=reply_markup
            )

async def view_employee_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    await query.answer()
    employee_id = context.user_data.get('selected_employee')

    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
            cursor.execute(
                "SELECT full_name, position FROM employees WHERE id = ?",
                (employee_id,)
            )
            employee = cursor.fetchone()

            if not employee:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            cursor.execute(
                '''SELECT event_type, next_notification_date, interval_days
                   FROM employee_events 
                   WHERE employee_id = ? 
                   ORDER BY next_notification_date''',
                (employee_id,)
            )
            events = cursor.fetchall()

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–º–µ–Ω–∏
        try:
            decrypted_name = decrypt_data(employee['full_name'])
        except ValueError:
            decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = [
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ</b>\n",
            f"üìù <b>–§–ò–û:</b> {decrypted_name}",
            f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employee['position']}",
            "",
            "üìÖ <b>–°–æ–±—ã—Ç–∏—è:</b>"
        ]

        if not events:
            response.append("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π")
        else:
            for event in events:
                event_date = datetime.fromisoformat(event['next_notification_date']).date()
                days_left = (event_date - datetime.now().date()).days
                
                if days_left < 0:
                    status = f"üî¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_left)} –¥–Ω."
                elif days_left <= 7:
                    status = f"üü† —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
                else:
                    status = f"üü¢ —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
                
                response.append(
                    f"‚Ä¢ <b>{event['event_type']}</b>\n"
                    f"  üìÖ {event_date.strftime('%d.%m.%Y')} ({status})\n"
                    f"  üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {event['interval_days']} –¥–Ω–µ–π"
                )

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                  callback_data=create_callback_data("edit_employee", id=employee_id))],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data=create_callback_data("list_employees"))]
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="\n".join(response),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"Error in view_employee_details: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        )

# Alias for backward compatibility
view_all_events = all_events