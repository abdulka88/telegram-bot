"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.utils import create_callback_data, parse_callback_data
from core.security import is_admin
from managers.dashboard_manager import DashboardManager
from core.database import db_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
dashboard_manager = DashboardManager(db_manager)

logger = logging.getLogger(__name__)

async def dashboard_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not is_admin(chat_id, user_id):
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = dashboard_manager.get_overview_statistics(chat_id)
    performance = dashboard_manager.get_performance_metrics(chat_id)
    alerts = dashboard_manager.get_alerts_and_recommendations(chat_id)
    
    main_stats = stats.get('main', {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–∞—à–±–æ—Ä–¥–∞
    text_lines = [
        "üìä <b>–î–∞—à–±–æ—Ä–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
        f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        "",
        "üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
        f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {main_stats.get('total_employees', 0)}",
        f"üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {main_stats.get('total_events', 0)}",
        f"üìä –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: {performance.get('compliance_rate', 0)}%",
        "",
    ]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
    text_lines.append("üö¶ <b>–°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏–π:</b>")
    
    total = main_stats.get('total_events', 0)
    if total > 0:
        status_data = {
            '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ': main_stats.get('overdue', 0),
            '–ö—Ä–∏—Ç–∏—á–Ω–æ': main_stats.get('critical', 0),
            '–°—Ä–æ—á–Ω–æ': main_stats.get('urgent', 0),
            '–ë–ª–∏–∂–∞–π—à–∏–µ': main_stats.get('upcoming', 0),
            '–ü–ª–∞–Ω–æ–≤—ã–µ': main_stats.get('planned', 0)
        }
        
        status_emojis = {
            '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ': 'üî¥',
            '–ö—Ä–∏—Ç–∏—á–Ω–æ': 'üî¥', 
            '–°—Ä–æ—á–Ω–æ': 'üü†',
            '–ë–ª–∏–∂–∞–π—à–∏–µ': 'üü°',
            '–ü–ª–∞–Ω–æ–≤—ã–µ': 'üü¢'
        }
        
        for status, count in status_data.items():
            if count > 0:
                percentage = (count / total) * 100
                bar_length = max(1, int(percentage / 10))  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
                bar = "‚ñà" * bar_length
                emoji = status_emojis.get(status, 'üìä')
                text_lines.append(f"{emoji} {status}: {count} ({percentage:.1f}%) {bar}")
    else:
        text_lines.append("üìã –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if alerts:
        text_lines.extend(["", "üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>"])
        for alert in alerts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-3
            text_lines.append(f"{alert['emoji']} {alert['title']}: {alert['message']}")
    
    text = "\n".join(text_lines)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –¥–∞—à–±–æ—Ä–¥–∞
    keyboard = [
        [
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=create_callback_data("dashboard_analytics")),
            InlineKeyboardButton("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", callback_data=create_callback_data("dashboard_employees"))
        ],
        [
            InlineKeyboardButton("üìã –ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º", callback_data=create_callback_data("dashboard_positions")),
            InlineKeyboardButton("üìÖ –ü–æ —Å–æ–±—ã—Ç–∏—è–º", callback_data=create_callback_data("dashboard_events"))
        ],
        [
            InlineKeyboardButton("üìà –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑", callback_data=create_callback_data("dashboard_timeline")),
            InlineKeyboardButton("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data=create_callback_data("dashboard_performance"))
        ],
        [
            InlineKeyboardButton("üîÆ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=create_callback_data("analytics_menu")),
        ],
        [
            InlineKeyboardButton("üö® –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data=create_callback_data("dashboard_alerts")),
            InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", callback_data=create_callback_data("dashboard_export"))
        ],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def dashboard_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    stats = dashboard_manager.get_overview_statistics(chat_id)
    
    text_lines = [
        "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä</b>",
        "",
        "üìã <b>–¢–û–ü-5 –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –ø–æ —Å–æ–±—ã—Ç–∏—è–º:</b>"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    positions = stats.get('positions', [])[:5]
    if positions:
        position_data = {pos['position']: pos['event_count'] for pos in positions}
        chart = dashboard_manager.generate_text_chart(position_data, "bar", 15)
        text_lines.extend(["```", chart, "```", ""])
    else:
        text_lines.append("üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è—Ö")
        text_lines.append("")
    
    # –¢–û–ü —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    text_lines.append("üîÑ <b>–¢–û–ü-5 —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π:</b>")
    event_types = stats.get('event_types', [])[:5]
    if event_types:
        events_data = {et['event_type'][:20]: et['count'] for et in event_types}
        chart = dashboard_manager.generate_text_chart(events_data, "bar", 15)
        text_lines.extend(["```", chart, "```"])
    else:
        text_lines.append("üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–ø–∞—Ö —Å–æ–±—ã—Ç–∏–π")
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=create_callback_data("dashboard_detailed")),
            InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥—ã", callback_data=create_callback_data("dashboard_trends"))
        ],
        [InlineKeyboardButton("üîô –ö –¥–∞—à–±–æ—Ä–¥—É", callback_data=create_callback_data("dashboard"))]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def dashboard_employees(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º - –∫—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    page = parse_callback_data(query.data).get('page', 0)
    
    employees = dashboard_manager.get_employee_analysis(chat_id)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    per_page = 8
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_employees = employees[start_idx:end_idx]
    
    text_lines = [
        "üë• <b>–ê–Ω–∞–ª–∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>",
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(len(employees) + per_page - 1) // per_page}",
        "",
        "üéØ <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ —É—Ä–æ–≤–Ω—é –≤–Ω–∏–º–∞–Ω–∏—è:</b>",
        ""
    ]
    
    if not page_employees:
        text_lines.append("üë®‚Äçüíº –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö")
    else:
        for i, emp in enumerate(page_employees, start_idx + 1):
            name = emp['full_name'][:25]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
            position = emp['position'][:15]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            
            text_lines.append(
                f"{i}. {emp['risk_emoji']} <b>{name}</b>\n"
                f"   üíº {position}\n"
                f"   üìä –°–æ–±—ã—Ç–∏—è: {emp['total_events']} | {emp['risk_text']}\n"
            )
    
    text = "\n".join(text_lines)
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []
    
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", 
                callback_data=create_callback_data("dashboard_employees", page=page-1))
        )
    if end_idx < len(employees):
        pagination_buttons.append(
            InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", 
                callback_data=create_callback_data("dashboard_employees", page=page+1))
        )
    
    if pagination_buttons:
        keyboard.append(pagination_buttons)
    
    keyboard.extend([
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data=create_callback_data("dashboard_emp_details"))],
        [InlineKeyboardButton("üîô –ö –¥–∞—à–±–æ—Ä–¥—É", callback_data=create_callback_data("dashboard"))]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def dashboard_performance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    performance = dashboard_manager.get_performance_metrics(chat_id)
    
    general = performance.get('general', {})
    overdue = performance.get('overdue', {})
    
    text_lines = [
        "‚ö° <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã</b>",
        "",
        "üìä <b>–û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</b>",
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {general.get('active_employees', 0)}",
        f"üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {general.get('total_events', 0)}",
        f"‚≠ï –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {general.get('avg_interval', 0):.0f} –¥–Ω–µ–π",
        "",
        f"üìà <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–æ–±–ª—é–¥–µ–Ω–∏—è: {performance.get('compliance_rate', 0)}%</b>",
        ""
    ]
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è
    compliance = performance.get('compliance_rate', 0)
    bar_length = int(compliance / 10)
    compliance_bar = "üü¢" * bar_length + "‚ö™" * (10 - bar_length)
    text_lines.append(f"–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: {compliance_bar} {compliance:.1f}%")
    text_lines.append("")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–∫
    if overdue.get('total_overdue', 0) > 0:
        text_lines.extend([
            "‚ö†Ô∏è <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ä–æ—á–µ–∫:</b>",
            f"üî¥ –í—Å–µ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue.get('total_overdue', 0)}",
            f"üìÖ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Å—Ä–æ—á–∫–∞: {overdue.get('avg_overdue_days', 0):.1f} –¥–Ω–µ–π",
            f"‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å—Ä–æ—á–∫–∞: {overdue.get('max_overdue_days', 0):.0f} –¥–Ω–µ–π",
            ""
        ])
    
    # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    if general.get('earliest_event') and general.get('latest_event'):
        text_lines.extend([
            "üìÖ <b>–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</b>",
            f"‚è™ –†–∞–Ω–Ω—è—è –¥–∞—Ç–∞: {general.get('earliest_event')}",
            f"‚è© –ü–æ–∑–¥–Ω—è—è –¥–∞—Ç–∞: {general.get('latest_event')}"
        ])
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=create_callback_data("dashboard_detailed_stats")),
            InlineKeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", callback_data=create_callback_data("dashboard_history"))
        ],
        [InlineKeyboardButton("üîô –ö –¥–∞—à–±–æ—Ä–¥—É", callback_data=create_callback_data("dashboard"))]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def dashboard_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    alerts = dashboard_manager.get_alerts_and_recommendations(chat_id)
    
    text_lines = [
        "üö® <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        ""
    ]
    
    if not alerts:
        text_lines.extend([
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>",
            "üéâ –í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º",
            "üìä –ù–∏–∫–∞–∫–∏—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
            "üí™ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
        ])
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
        critical_alerts = [a for a in alerts if a['level'] == 'critical']
        warning_alerts = [a for a in alerts if a['level'] == 'warning']
        info_alerts = [a for a in alerts if a['level'] == 'info']
        
        if critical_alerts:
            text_lines.extend(["üö® <b>–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>"])
            for alert in critical_alerts:
                text_lines.extend([
                    f"{alert['emoji']} <b>{alert['title']}</b>",
                    f"   üìã {alert['message']}",
                    f"   üí° {alert['action']}",
                    ""
                ])
        
        if warning_alerts:
            text_lines.extend(["‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>"])
            for alert in warning_alerts:
                text_lines.extend([
                    f"{alert['emoji']} <b>{alert['title']}</b>",
                    f"   üìã {alert['message']}",
                    f"   üí° {alert['action']}",
                    ""
                ])
        
        if info_alerts:
            text_lines.extend(["‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>"])
            for alert in info_alerts:
                text_lines.extend([
                    f"{alert['emoji']} <b>{alert['title']}</b>",
                    f"   üìã {alert['message']}",
                    f"   üí° {alert['action']}",
                    ""
                ])
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º", callback_data=create_callback_data("dashboard_problem_analysis")),
            InlineKeyboardButton("üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π", callback_data=create_callback_data("dashboard_action_plan"))
        ],
        [InlineKeyboardButton("üîô –ö –¥–∞—à–±–æ—Ä–¥—É", callback_data=create_callback_data("dashboard"))]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def dashboard_timeline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    timeline = dashboard_manager.get_timeline_analysis(chat_id, 12)
    
    text_lines = [
        "üìà <b>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑</b>",
        "",
        "üìÖ <b>–°–æ–±—ã—Ç–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å.):</b>",
        ""
    ]
    
    if not timeline:
        text_lines.append("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6
        sorted_months = sorted(timeline.keys())[-6:]
        
        if sorted_months:
            month_data = {}
            for month in sorted_months:
                total = timeline[month]['total']
                overdue = timeline[month]['overdue']
                month_name = datetime.strptime(month, '%Y-%m').strftime('%m/%y')
                month_data[month_name] = total
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
                text_lines.append(
                    f"üìÖ {month_name}: {total} —Å–æ–±—ã—Ç–∏–π "
                    f"({overdue} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)" if overdue > 0 else f"üìÖ {month_name}: {total} —Å–æ–±—ã—Ç–∏–π ‚úÖ"
                )
            
            text_lines.append("")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
            if month_data:
                chart = dashboard_manager.generate_text_chart(month_data, "bar", 12)
                text_lines.extend(["üìä <b>–ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏:</b>", "```", chart, "```"])
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ì–æ–¥–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑", callback_data=create_callback_data("dashboard_yearly")),
            InlineKeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã", callback_data=create_callback_data("dashboard_forecast"))
        ],
        [InlineKeyboardButton("üîô –ö –¥–∞—à–±–æ—Ä–¥—É", callback_data=create_callback_data("dashboard"))]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )