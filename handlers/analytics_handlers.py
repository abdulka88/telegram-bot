"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞
–í–∫–ª—é—á–∞–µ—Ç —Ç—Ä–µ–Ω–¥—ã, –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.utils import create_callback_data, parse_callback_data
from core.security import is_admin
from managers.advanced_analytics_manager import AdvancedAnalyticsManager
from managers.export_manager import ExportManager
from core.database import db_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
advanced_analytics_manager = AdvancedAnalyticsManager(db_manager)
export_manager = ExportManager(db_manager)

logger = logging.getLogger(__name__)

async def analytics_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not is_admin(chat_id, user_id):
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
        return
    
    text = (
        "üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "üìà <b>–¢—Ä–µ–Ω–¥—ã</b> - –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        "‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º –∏ –º–µ—Å—è—Ü–∞–º\n"
        "üéØ <b>–ü—Ä–æ–≥–Ω–æ–∑—ã</b> - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏\n"
        "‚ö° <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b> - –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", callback_data=create_callback_data("analytics_trends")),
            InlineKeyboardButton("‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑", callback_data=create_callback_data("analytics_timeline"))
        ],
        [
            InlineKeyboardButton("üéØ –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞–≥—Ä—É–∑–∫–∏", callback_data=create_callback_data("analytics_forecast")),
            InlineKeyboardButton("‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data=create_callback_data("analytics_efficiency"))
        ],
        [
            InlineKeyboardButton("üîÆ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data=create_callback_data("advanced_workload_forecast")),
            InlineKeyboardButton("üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data=create_callback_data("analytics_summary"))
        ],
        [
            InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã", callback_data=create_callback_data("reports_menu"))
        ],
        [
            InlineKeyboardButton("üîô –ö –¥–∞—à–±–æ—Ä–¥—É", callback_data=create_callback_data("dashboard"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def analytics_trends(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    trends = advanced_analytics_manager.get_trends_analysis(chat_id, 6)
    
    if trends.get('trend') == 'no_data':
        text = (
            "üìà <b>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤</b>\n\n"
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤\n\n"
            "üí° –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
    else:
        total_trend = trends.get('total_events_trend', {})
        overdue_trend = trends.get('overdue_trend', {})
        summary = trends.get('period_summary', {})
        predictions = trends.get('predictions', {})
        
        text_lines = [
            "üìà <b>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ (6 –º–µ—Å—è—Ü–µ–≤)</b>",
            "",
            "üìä <b>–û–±—â–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>",
            f"   {advanced_analytics_manager.generate_text_charts(total_trend, 'trend')}",
            f"   {total_trend.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}",
            "",
            "üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>",
            f"   {advanced_analytics_manager.generate_text_charts(overdue_trend, 'trend')}",
            f"   {overdue_trend.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}",
            "",
            "üìã <b>–°–≤–æ–¥–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b>",
            f"üìÖ –ú–µ—Å—è—Ü–µ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ: {summary.get('total_months', 0)}",
            f"‚≠ï –°—Ä–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–π/–º–µ—Å—è—Ü: {summary.get('avg_events_per_month', 0):.1f}",
            f"üìà –ü–∏–∫ —Å–æ–±—ã—Ç–∏–π: {summary.get('max_events_month', 0)}",
            f"üìâ –ú–∏–Ω–∏–º—É–º —Å–æ–±—ã—Ç–∏–π: {summary.get('min_events_month', 0)}",
            f"üî¥ –í—Å–µ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {summary.get('total_overdue', 0)}",
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if predictions:
            text_lines.extend(["", "üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑—ã:</b>"])
            if 'next_month_events' in predictions:
                pred = predictions['next_month_events']
                text_lines.append(f"üìà –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü: ~{pred['estimate']} —Å–æ–±—ã—Ç–∏–π ({pred['confidence']} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)")
            if 'next_month_overdue' in predictions:
                pred = predictions['next_month_overdue']
                text_lines.append(f"üî¥ –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏: ~{pred['estimate']} ({pred['risk_level']} —Ä–∏—Å–∫)")
        
        text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=create_callback_data("analytics_detailed_trends")),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("analytics_trends"))
        ],
        [
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def analytics_timeline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    weekly_stats = advanced_analytics_manager.get_weekly_analysis(chat_id, 8)
    
    text_lines = [
        "‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑</b>",
        "",
        "üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –Ω–µ–¥–µ–ª—å):</b>",
        ""
    ]
    
    if not weekly_stats:
        text_lines.extend([
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            "",
            "üí° –î–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        ])
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–µ–¥–µ–ª—å
        recent_weeks = list(weekly_stats.items())[-5:]
        
        for week, data in recent_weeks:
            week_display = week.replace('W', ' –Ω–µ–¥–µ–ª—è ')
            total = data['total']
            overdue = data['overdue']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–µ–ª–∏
            if overdue > 5:
                week_emoji = "üî¥"
                status = "–∫—Ä–∏—Ç–∏—á–Ω–∞—è"
            elif overdue > 2:
                week_emoji = "üü°"
                status = "–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–∞—è"
            elif total > 10:
                week_emoji = "üü†"
                status = "–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è"
            else:
                week_emoji = "üü¢"
                status = "—Å–ø–æ–∫–æ–π–Ω–∞—è"
            
            text_lines.extend([
                f"{week_emoji} <b>{week_display}</b> ({status})",
                f"   üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total}",
                f"   üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue}",
                ""
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        if recent_weeks:
            last_week_data = recent_weeks[-1][1]
            days_data = last_week_data.get('days', {})
            
            if days_data:
                text_lines.extend([
                    "üìÖ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è):</b>",
                    ""
                ])
                
                for day, count in days_data.items():
                    if count > 0:
                        bar = "‚ñà" * min(count, 10)
                        text_lines.append(f"{day}: {bar} {count}")
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=create_callback_data("analytics_monthly_chart")),
            InlineKeyboardButton("üìà –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=create_callback_data("analytics_weekly_chart"))
        ],
        [
            InlineKeyboardButton("üìÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=create_callback_data("analytics_daily_chart")),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("analytics_timeline"))
        ],
        [
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def analytics_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π
    forecast = advanced_analytics_manager.get_workload_forecast(chat_id, 30)
    
    daily_forecast = forecast.get('daily_forecast', [])
    summary = forecast.get('summary', {})
    
    text_lines = [
        "üéØ <b>–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏</b>",
        f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å–ª–µ–¥—É—é—â–∏–µ {summary.get('forecast_period', 30)} –¥–Ω–µ–π",
        "",
        "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
        f"üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {summary.get('total_events', 0)}",
        f"‚≠ï –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {summary.get('avg_per_day', 0):.1f}",
        ""
    ]
    
    if summary.get('peak_day') and summary.get('peak_count', 0) > 0:
        text_lines.extend([
            f"üî• <b>–ü–∏–∫–æ–≤—ã–π –¥–µ–Ω—å:</b> {summary['peak_day']}",
            f"   üìä –°–æ–±—ã—Ç–∏–π: {summary['peak_count']}",
            ""
        ])
    
    if daily_forecast:
        text_lines.append("üìÖ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π:</b>")
        text_lines.append("")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π
        high_load_days = [day for day in daily_forecast if day['events_count'] >= 3][:7]
        
        if high_load_days:
            for day in high_load_days:
                date_obj = datetime.strptime(day['event_date'], '%Y-%m-%d')
                date_display = date_obj.strftime('%d.%m (%a)')
                
                text_lines.append(
                    f"{day['load_emoji']} <b>{date_display}</b> - {day['events_count']} —Å–æ–±—ã—Ç–∏–π"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–Ω–µ–π —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
                if day['events_count'] >= 5:
                    event_types = day.get('event_types', '')[:50]
                    if event_types:
                        text_lines.append(f"   üìã {event_types}...")
                
                text_lines.append("")
        else:
            text_lines.append("‚úÖ –ù–µ—Ç –¥–Ω–µ–π —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–º –ø–µ—Ä–∏–æ–¥–µ")
    else:
        text_lines.append("üìã –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–∏–æ–¥")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if summary.get('total_events', 0) > 0:
        avg_per_day = summary.get('avg_per_day', 0)
        text_lines.extend([
            "",
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>"
        ])
        
        if avg_per_day > 5:
            text_lines.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        elif avg_per_day > 3:
            text_lines.append("üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–∏–∫–æ–≤—ã–º–∏ –¥–Ω—è–º–∏")
        else:
            text_lines.append("üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º")
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data=create_callback_data("analytics_detailed_forecast")),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("analytics_forecast"))
        ],
        [
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def analytics_efficiency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    efficiency = advanced_analytics_manager.get_efficiency_metrics(chat_id)
    
    text_lines = [
        "‚ö° <b>–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>",
        "",
        f"üìä <b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {efficiency.get('efficiency_grade', 'N/A')} {efficiency.get('efficiency_emoji', '')}</b>",
        "",
        "üìà <b>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>",
        f"‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤: {efficiency.get('compliance_rate', 0)}%",
        f"üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {efficiency.get('total_events', 0)}",
        f"üü¢ –í–æ–≤—Ä–µ–º—è: {efficiency.get('on_time_events', 0)}",
        f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {efficiency.get('overdue_events', 0)}",
        ""
    ]
    
    if efficiency.get('avg_overdue_days', 0) > 0:
        text_lines.extend([
            f"‚è∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Å—Ä–æ—á–∫–∞: {efficiency.get('avg_overdue_days', 0):.1f} –¥–Ω–µ–π",
            ""
        ])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–æ–±–ª—é–¥–µ–Ω–∏—è
    compliance_rate = efficiency.get('compliance_rate', 0)
    bar_length = int(compliance_rate / 10)
    compliance_bar = "üü¢" * bar_length + "‚ö™" * (10 - bar_length)
    text_lines.extend([
        "üìä <b>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è:</b>",
        f"{compliance_bar} {compliance_rate}%",
        ""
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = efficiency.get('recommendations', [])
    if recommendations:
        text_lines.append("üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:</b>")
        for rec in recommendations:
            text_lines.append(f"   {rec}")
    else:
        text_lines.append("üéâ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</b> –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.")
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data=create_callback_data("analytics_efficiency_history")),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("analytics_efficiency"))
        ],
        [
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def analytics_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    trends = advanced_analytics_manager.get_trends_analysis(chat_id, 3)
    efficiency = advanced_analytics_manager.get_efficiency_metrics(chat_id)
    forecast = advanced_analytics_manager.get_workload_forecast(chat_id, 14)
    
    text_lines = [
        "üìä <b>–°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</b>",
        f"üïí –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        "",
        "‚ö° <b>–¢–µ–∫—É—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>",
        f"   {efficiency.get('efficiency_emoji', 'üìä')} {efficiency.get('efficiency_grade', 'N/A')} ({efficiency.get('compliance_rate', 0)}%)",
        ""
    ]
    
    # –¢—Ä–µ–Ω–¥—ã
    if trends.get('trend') != 'no_data':
        total_trend = trends.get('total_events_trend', {})
        text_lines.extend([
            "üìà <b>–¢—Ä–µ–Ω–¥ —Å–æ–±—ã—Ç–∏–π:</b>",
            f"   {advanced_analytics_manager.generate_text_charts(total_trend, 'trend')} {total_trend.get('description', '')}",
            ""
        ])
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏
    forecast_summary = forecast.get('summary', {})
    if forecast_summary.get('total_events', 0) > 0:
        text_lines.extend([
            "üéØ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏:</b>",
            f"   üìä –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–π: {forecast_summary.get('total_events', 0)}",
            f"   ‚≠ï –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {forecast_summary.get('avg_per_day', 0):.1f}",
            ""
        ])
        
        if forecast_summary.get('peak_day'):
            text_lines.append(f"   üî• –ü–∏–∫–æ–≤—ã–π –¥–µ–Ω—å: {forecast_summary['peak_day']} ({forecast_summary.get('peak_count', 0)} —Å–æ–±—ã—Ç–∏–π)")
            text_lines.append("")
    
    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    text_lines.extend([
        "üéØ <b>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>",
        f"   üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {efficiency.get('total_events', 0)}",
        f"   üî¥ –¢–µ–∫—É—â–∏—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {efficiency.get('overdue_events', 0)}",
        ""
    ])
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    overdue_events = efficiency.get('overdue_events', 0)
    total_events = efficiency.get('total_events', 0)
    
    if total_events == 0:
        system_status = "üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        status_description = "–î–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    elif overdue_events == 0:
        system_status = "üü¢ –û—Ç–ª–∏—á–Ω–æ"
        status_description = "–í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤–æ–≤—Ä–µ–º—è"
    elif overdue_events / total_events <= 0.1:
        system_status = "üü° –•–æ—Ä–æ—à–æ"
        status_description = "–ù–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫"
    elif overdue_events / total_events <= 0.25:
        system_status = "üü† –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        status_description = "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Å—Ä–æ–∫–æ–≤"
    else:
        system_status = "üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ"
        status_description = "–ú–Ω–æ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
    
    text_lines.extend([
        f"üèÜ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {system_status}</b>",
        f"   üí¨ {status_description}",
        ""
    ])
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = efficiency.get('recommendations', [])
    if recommendations:
        text_lines.append("üí° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>")
        for rec in recommendations[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-2
            text_lines.append(f"   {rec}")
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data=create_callback_data("analytics_export_excel")),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("analytics_summary"))
        ],
        [
            InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=create_callback_data("analytics_trends")),
            InlineKeyboardButton("üéØ –ü—Ä–æ–≥–Ω–æ–∑—ã", callback_data=create_callback_data("analytics_forecast"))
        ],
        [
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def show_monthly_chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—è—á–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
    charts = advanced_analytics_manager.get_detailed_timeline_charts(chat_id)
    monthly_data = charts.get('monthly', {})
    
    text_lines = [
        "üìÖ <b>–ú–µ—Å—è—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–±—ã—Ç–∏–π</b>",
        "",
        monthly_data.get('chart', 'üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
        ""
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    summary = monthly_data.get('summary', {})
    if summary:
        text_lines.extend([
            "üìä <b>–°–≤–æ–¥–∫–∞:</b>",
            f"üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {summary.get('total_events', 0)}",
            f"üî¥ –í—Å–µ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {summary.get('total_overdue', 0)}",
            f"‚≠ï –°—Ä–µ–¥–Ω–µ–µ/–º–µ—Å—è—Ü: {summary.get('avg_per_month', 0):.1f}"
        ])
        
        if summary.get('peak_month'):
            text_lines.append(f"üî• –ü–∏–∫–æ–≤—ã–π –º–µ—Å—è—Ü: {summary['peak_month']} ({summary.get('peak_count', 0)} —Å–æ–±—ã—Ç–∏–π)")
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", callback_data=create_callback_data("analytics_weekly_chart")),
            InlineKeyboardButton("üìà –î–Ω–µ–≤–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", callback_data=create_callback_data("analytics_daily_chart"))
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("analytics_monthly_chart")),
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def show_weekly_chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
    charts = advanced_analytics_manager.get_detailed_timeline_charts(chat_id)
    weekly_data = charts.get('weekly', {})
    
    text_lines = [
        "üìÖ <b>–ù–µ–¥–µ–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–±—ã—Ç–∏–π</b>",
        "",
        weekly_data.get('chart', 'üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
        ""
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    summary = weekly_data.get('summary', {})
    if summary:
        text_lines.extend([
            "üìä <b>–°–≤–æ–¥–∫–∞:</b>",
            f"üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {summary.get('total_events', 0)}",
            f"üî¥ –í—Å–µ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {summary.get('total_overdue', 0)}",
            f"‚≠ï –°—Ä–µ–¥–Ω–µ–µ/–Ω–µ–¥–µ–ª—é: {summary.get('avg_per_week', 0):.1f}"
        ])
        
        if summary.get('peak_week'):
            text_lines.append(f"üî• –ü–∏–∫–æ–≤–∞—è –Ω–µ–¥–µ–ª—è: {summary['peak_week']} ({summary.get('peak_count', 0)} —Å–æ–±—ã—Ç–∏–π)")
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ú–µ—Å—è—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", callback_data=create_callback_data("analytics_monthly_chart")),
            InlineKeyboardButton("üìà –î–Ω–µ–≤–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", callback_data=create_callback_data("analytics_daily_chart"))
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("analytics_weekly_chart")),
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def show_daily_chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
    charts = advanced_analytics_manager.get_detailed_timeline_charts(chat_id)
    daily_data = charts.get('daily', {})
    
    text_lines = [
        "üìÖ <b>–î–Ω–µ–≤–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–±—ã—Ç–∏–π</b>",
        "",
        daily_data.get('chart', 'üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
        ""
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    summary = daily_data.get('summary', {})
    if summary:
        text_lines.extend([
            "üìä <b>–°–≤–æ–¥–∫–∞:</b>",
            f"üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {summary.get('total_events', 0)}",
            f"üî¥ –í—Å–µ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {summary.get('total_overdue', 0)}",
            f"üìÖ –î–Ω–µ–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏: {summary.get('days_with_events', 0)}"
        ])
        
        if summary.get('peak_day'):
            peak_day_obj = datetime.strptime(summary['peak_day'], '%Y-%m-%d')
            peak_day_display = peak_day_obj.strftime('%d.%m.%Y')
            text_lines.append(f"üî• –ü–∏–∫–æ–≤—ã–π –¥–µ–Ω—å: {peak_day_display} ({summary.get('peak_count', 0)} —Å–æ–±—ã—Ç–∏–π)")
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ú–µ—Å—è—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", callback_data=create_callback_data("analytics_monthly_chart")),
            InlineKeyboardButton("üìà –ù–µ–¥–µ–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", callback_data=create_callback_data("analytics_weekly_chart"))
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("analytics_daily_chart")),
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def advanced_workload_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    periods = {'short': 7, 'medium': 30, 'long': 90}
    advanced_forecast = advanced_analytics_manager.get_advanced_workload_forecast(chat_id, periods)
    
    forecasts = advanced_forecast.get('forecasts', {})
    analysis = advanced_forecast.get('comparative_analysis', {})
    
    text_lines = [
        "üéØ <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏</b>",
        "",
        "üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>"
    ]
    
    period_names = {
        'short': '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π (7 –¥–Ω–µ–π)',
        'medium': '–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π (30 –¥–Ω–µ–π)',
        'long': '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π (90 –¥–Ω–µ–π)'
    }
    
    for period_key, forecast_data in forecasts.items():
        forecast = forecast_data['forecast']
        risk = forecast_data['risk_assessment']
        summary = forecast['summary']
        
        period_name = period_names.get(period_key, period_key)
        
        text_lines.extend([
            "",
            f"üìÖ <b>{period_name}</b>",
            f"   üéØ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {summary.get('avg_per_day', 0):.1f} —Å–æ–±—ã—Ç–∏–π/–¥–µ–Ω—å",
            f"   üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {summary.get('total_events', 0)}",
            f"   {risk['risk_emoji']} –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk['risk_level']}"
        ])
        
        if summary.get('peak_day'):
            peak_date = datetime.strptime(summary['peak_day'], '%Y-%m-%d')
            text_lines.append(f"   üî• –ü–∏–∫: {peak_date.strftime('%d.%m')} ({summary.get('peak_count', 0)} —Å–æ–±—ã—Ç–∏–π)")
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if analysis:
        text_lines.extend([
            "",
            "üîÑ <b>–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b>"
        ])
        
        trends = analysis.get('trends', {})
        if trends.get('load_trend'):
            trend_emoji = {
                '—Ä–æ—Å—Ç': 'üìà',
                '—Å–Ω–∏–∂–µ–Ω–∏–µ': 'üìâ',
                '—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å': '‚û°Ô∏è'
            }.get(trends['load_trend'], 'üìä')
            text_lines.append(f"   {trend_emoji} –¢—Ä–µ–Ω–¥: {trends['load_trend']}")
        
        recommendations = analysis.get('recommendations', [])
        if recommendations:
            text_lines.extend(["", "üí° <b>–ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>"])
            for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3
                text_lines.append(f"   {rec}")
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π", callback_data=create_callback_data("forecast_short")),
            InlineKeyboardButton("üìÜ –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π", callback_data=create_callback_data("forecast_medium"))
        ],
        [
            InlineKeyboardButton("üìá –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π", callback_data=create_callback_data("forecast_long")),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data("advanced_workload_forecast"))
        ],
        [
            InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def show_detailed_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE, period: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    period_days = {
        'short': 7,
        'medium': 30,
        'long': 90
    }
    
    period_names = {
        'short': '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π (7 –¥–Ω–µ–π)',
        'medium': '–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π (30 –¥–Ω–µ–π)',
        'long': '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π (90 –¥–Ω–µ–π)'
    }
    
    days = period_days.get(period, 30)
    period_name = period_names.get(period, period)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    forecast = advanced_analytics_manager.get_workload_forecast(chat_id, days)
    
    summary = forecast.get('summary', {})
    metrics = forecast.get('workload_metrics', {})
    daily_forecast = forecast.get('daily_forecast', [])
    
    text_lines = [
        f"üéØ <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {period_name}</b>",
        "",
        "üìä <b>–û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</b>",
        f"üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {summary.get('total_events', 0)}",
        f"‚≠ï –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {summary.get('avg_per_day', 0):.1f}/–¥–µ–Ω—å"
    ]
    
    if summary.get('peak_day'):
        peak_date = datetime.strptime(summary['peak_day'], '%Y-%m-%d')
        text_lines.extend([
            f"üî• –ü–∏–∫–æ–≤—ã–π –¥–µ–Ω—å: {peak_date.strftime('%d.%m.%Y')}",
            f"üìà –ú–∞–∫—Å–∏–º—É–º —Å–æ–±—ã—Ç–∏–π: {summary.get('peak_count', 0)}"
        ])
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    if metrics:
        text_lines.extend([
            "",
            "üìä <b>–ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏:</b>",
            f"üîÑ –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {metrics.get('overall_load', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
            f"üî¥ –î–Ω–µ–π —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π: {metrics.get('high_load_days', 0)}",
            f"üü° –î–Ω–µ–π —Å–æ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π: {metrics.get('medium_load_days', 0)}",
            f"üü¢ –î–Ω–µ–π —Å –Ω–∏–∑–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π: {metrics.get('low_load_days', 0)}"
        ])
        
        if metrics.get('busiest_day') and metrics.get('busiest_day') != '–ù/–î':
            text_lines.extend([
                "",
                f"üìÖ –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å: {metrics['busiest_day']}",
                f"üü¢ –°–∞–º—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å: {metrics.get('quietest_day', '–ù/–î')}"
            ])
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = metrics.get('recommendations', [])
    if recommendations:
        text_lines.extend(["", "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>"])
        for rec in recommendations[:4]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 4
            text_lines.append(f"   {rec}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–Ω–∏
    if daily_forecast:
        high_load_days = [d for d in daily_forecast if d.get('priority') in ['critical', 'high']][:5]
        if high_load_days:
            text_lines.extend(["", "üî• <b>–ö–ª—é—á–µ–≤—ã–µ –¥–Ω–∏:</b>"])
            for day in high_load_days:
                date_obj = datetime.strptime(day['event_date'], '%Y-%m-%d')
                date_display = date_obj.strftime('%d.%m (%a)')
                text_lines.append(
                    f"   {day['load_emoji']} {date_display}: {day['events_count']} —Å–æ–±—ã—Ç–∏–π"
                )
    
    text = "\n".join(text_lines)
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", callback_data=create_callback_data(f"forecast_chart_{period}")),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=create_callback_data(f"forecast_{period}"))
        ],
        [
            InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑–∞–º", callback_data=create_callback_data("advanced_workload_forecast"))
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
async def forecast_short(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"""
    await show_detailed_forecast(update, context, 'short')

async def forecast_medium(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"""
    await show_detailed_forecast(update, context, 'medium')

async def forecast_long(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"""
    await show_detailed_forecast(update, context, 'long')


async def analytics_export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Excel"""
    query = update.callback_query
    await query.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel –æ—Ç—á–µ—Ç...")
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not is_admin(chat_id, user_id):
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã")
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        excel_buffer = await export_manager.export_analytics_report(chat_id, "full")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
        filename = f"analytics_report_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_document(
            chat_id=user_id,
            document=excel_buffer,
            filename=filename,
            caption="üìä <b>–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</b>\n\n"
                   "–í–∫–ª—é—á–∞–µ—Ç:\n"
                   "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Å–æ–±—ã—Ç–∏–π\n"
                   "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏\n"
                   "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                   "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã\n"
                   "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
            parse_mode='HTML'
        )
        
        await query.edit_message_text(
            "‚úÖ <b>Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            "üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Ñ–∞–π–ª—ã",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error exporting analytics to Excel: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data=create_callback_data("analytics_menu"))
            ]])
        )
