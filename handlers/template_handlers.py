"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–±—ã—Ç–∏–π
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.security import is_admin, decrypt_data
from core.utils import create_callback_data, parse_callback_data
from core.database import db_manager
from managers.template_manager import TemplateManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º template_manager
template_manager = TemplateManager(db_manager)

logger = logging.getLogger(__name__)

async def templates_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not is_admin(chat_id, user_id):
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    templates = template_manager.get_template_list()
    
    keyboard = []
    for template in templates:
        keyboard.append([InlineKeyboardButton(
            f"üìã {template['name']} ({template['events_count']} —Å–æ–±—ã—Ç–∏–π)",
            callback_data=create_callback_data("select_template", key=template['key'])
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=create_callback_data("menu"))])
    
    text = (
        "üìã <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–±—ã—Ç–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.\n"
        "–®–∞–±–ª–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:\n\n"
    )
    
    for template in templates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 5 —à–∞–±–ª–æ–Ω–æ–≤
        text += f"‚Ä¢ <b>{template['name']}</b>\n"
    
    if len(templates) > 5:
        text += f"‚Ä¢ ... –∏ –µ—â–µ {len(templates) - 5} —à–∞–±–ª–æ–Ω–æ–≤\n"
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def select_employee_for_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    template_key = data.get('key')
    
    if not template_key:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
    template_info = template_manager.get_template_info(template_key)
    if not template_info:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    context.user_data['selected_template'] = template_key
    chat_id = update.effective_chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                '''SELECT id, full_name, position 
                   FROM employees 
                   WHERE chat_id = ? AND is_active = 1 
                   ORDER BY full_name''',
                (chat_id,)
            )
            employees = cursor.fetchall()
        
        if not employees:
            await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            return
        
        text = (
            f"üìã <b>–®–∞–±–ª–æ–Ω: {template_info['name']}</b>\n\n"
            f"üìä –°–æ–±—ã—Ç–∏–π –≤ —à–∞–±–ª–æ–Ω–µ: {template_info['events_count']}\n\n"
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:"
        )
        
        keyboard = []
        for emp in employees:
            try:
                decrypted_name = decrypt_data(emp['full_name'])
            except ValueError:
                decrypted_name = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
            
            keyboard.append([InlineKeyboardButton(
                f"{decrypted_name} ({emp['position']})",
                callback_data=create_callback_data("apply_template", emp_id=emp['id'])
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data=create_callback_data("templates"))])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error selecting employee for template: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

async def apply_template_to_employee(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    data = parse_callback_data(query.data)
    employee_id = data.get('emp_id')
    template_key = context.user_data.get('selected_template')
    
    if not employee_id or not template_key:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    await query.edit_message_text("‚è≥ –ü—Ä–∏–º–µ–Ω—è—é —à–∞–±–ª–æ–Ω...")
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        success = await template_manager.apply_template(employee_id, template_key)
        
        if success:
            template_info = template_manager.get_template_info(template_key)
            await query.edit_message_text(
                f"‚úÖ <b>–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>\n\n"
                f"üìã –®–∞–±–ª–æ–Ω: {template_info['name']}\n"
                f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {template_info['events_count']}\n\n"
                f"–í—Å–µ —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")
        
    except Exception as e:
        logger.error(f"Error applying template: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")