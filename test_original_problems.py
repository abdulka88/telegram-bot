#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ–±—â–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
1. –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–∂–µ –∏–º–µ—é—â–µ–≥–æ—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
2. –í —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ (Excel –∏ CSV) –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç  
3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å) –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
4. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –®–∞–±–ª–æ–Ω—ã –≤ –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –º–µ–Ω—é –∏ –≤—ã—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
"""

import sys
import os
import asyncio
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from unittest.mock import Mock, AsyncMock
from handlers.menu_handlers import menu_handler
from handlers.employee_handlers import add_event_to_employee, edit_employee_start
from handlers.export_handlers import export_menu_start, handle_export
from handlers.settings_handlers import set_notification_days, set_timezone
from core.database import db_manager
from core.security import encrypt_data

class TelegramSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"""
    
    def __init__(self):
        self.chat_id = 123456789
        self.user_id = 987654321
    
    def create_callback_update(self, callback_data):
        """–°–æ–∑–¥–∞–µ—Ç update –¥–ª—è callback query"""
        update = Mock()
        update.callback_query = Mock()
        update.callback_query.answer = AsyncMock()
        update.callback_query.edit_message_text = AsyncMock()
        update.callback_query.data = callback_data
        
        update.effective_chat = Mock()
        update.effective_chat.id = self.chat_id
        update.effective_user = Mock()
        update.effective_user.id = self.user_id
        
        return update
    
    def create_context(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞"""
        context = Mock()
        context.user_data = {}
        context.bot = Mock()
        context.bot.send_document = AsyncMock()
        context.bot.send_message = AsyncMock()
        return context

async def test_problem_1_employee_editing_and_events():
    """
    –ü–†–û–ë–õ–ï–ú–ê 1: –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ 
    –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–∂–µ –∏–º–µ—é—â–µ–≥–æ—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    print("\nüîç –ü–†–û–ë–õ–ï–ú–ê 1: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    encrypted_name = encrypt_data("–¢–µ—Å—Ç–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫")
    employee_id = db_manager.execute_with_retry('''
        INSERT INTO employees (chat_id, full_name, position, is_active)
        VALUES (?, ?, ?, 1)
    ''', (123456789, encrypted_name, "–ü–ª–æ—Ç–Ω–∏–∫"))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {employee_id}")
    
    sim = TelegramSimulator()
    
    # –¢–µ—Å—Ç 1.1: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    print("\nüìù –¢–µ—Å—Ç 1.1: –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    try:
        update = sim.create_callback_update(f'{{"action":"edit_employee","id":{employee_id}}}')
        context = sim.create_context()
        
        await edit_employee_start(update, context)
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–ª—Å—è edit_message_text (–ø–æ–∫–∞–∑–∞–ª–æ—Å—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        if update.callback_query.edit_message_text.called:
            print("‚úÖ –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
        else:
            print("‚ùå –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # –¢–µ—Å—Ç 1.2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    print("\nüìÖ –¢–µ—Å—Ç 1.2: –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
    try:
        update = sim.create_callback_update(f'{{"action":"add_event","id":{employee_id}}}')
        context = sim.create_context()
        
        await add_event_to_employee(update, context)
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–ª—Å—è edit_message_text (–ø–æ–∫–∞–∑–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if update.callback_query.edit_message_text.called:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ - –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
            args = update.callback_query.edit_message_text.call_args
            if args and "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è" in str(args):
                print("‚úÖ –ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞!")
                print("‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            elif args and "–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏" in str(args):
                print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π - —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∞!")
                print("‚ùå –≠–¢–û –û–ë–™–Ø–°–ù–Ø–ï–¢ –ü–†–û–ë–õ–ï–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            else:
                print("‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ")
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞
    db_manager.execute_with_retry('DELETE FROM employee_events WHERE employee_id = ?', (employee_id,))
    db_manager.execute_with_retry('DELETE FROM employees WHERE id = ?', (employee_id,))
    print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    
    return True

async def test_problem_2_export_not_working():
    """
    –ü–†–û–ë–õ–ï–ú–ê 2: –í —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ (Excel –∏ CSV) –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    """
    print("\nüîç –ü–†–û–ë–õ–ï–ú–ê 2: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    sim = TelegramSimulator()
    
    # –¢–µ—Å—Ç 2.1: –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
    print("\nüìä –¢–µ—Å—Ç 2.1: –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞")
    try:
        update = sim.create_callback_update('{"action":"export_data"}')
        context = sim.create_context()
        
        await export_menu_start(update, context)
        print("‚úÖ –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è")
        
        if update.callback_query.edit_message_text.called:
            print("‚úÖ –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 2.2: –≠–∫—Å–ø–æ—Ä—Ç Excel
    print("\nüìà –¢–µ—Å—Ç 2.2: –≠–∫—Å–ø–æ—Ä—Ç Excel")
    try:
        update = sim.create_callback_update('{"action":"export","format":"xlsx"}')
        context = sim.create_context()
        
        await handle_export(update, context)
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
        if context.bot.send_document.called or update.callback_query.edit_message_text.called:
            print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç Excel —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        else:
            print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç Excel –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel: {e}")
    
    # –¢–µ—Å—Ç 2.3: –≠–∫—Å–ø–æ—Ä—Ç CSV
    print("\nüìÑ –¢–µ—Å—Ç 2.3: –≠–∫—Å–ø–æ—Ä—Ç CSV")
    try:
        update = sim.create_callback_update('{"action":"export","format":"csv"}')
        context = sim.create_context()
        
        await handle_export(update, context)
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
        
        if context.bot.send_document.called or update.callback_query.edit_message_text.called:
            print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç CSV —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        else:
            print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç CSV –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: {e}")
        
    return True

async def test_problem_3_settings_not_working():
    """
    –ü–†–û–ë–õ–ï–ú–ê 3: –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è 
    (–¥–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å) –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    """
    print("\nüîç –ü–†–û–ë–õ–ï–ú–ê 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        db_manager.execute_with_retry('''
            INSERT OR IGNORE INTO chat_settings (chat_id, notification_days, timezone)
            VALUES (?, 90, 'Europe/Moscow')
        ''', (123456789,))
    except:
        pass
    
    sim = TelegramSimulator()
    
    # –¢–µ—Å—Ç 3.1: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print("\n‚è∞ –¢–µ—Å—Ç 3.1: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    try:
        update = sim.create_callback_update('{"action":"set_notification_days"}')
        context = sim.create_context()
        
        await set_notification_days(update, context)
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
        
        if update.callback_query.edit_message_text.called:
            print("‚úÖ –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
        else:
            print("‚ùå –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç 3.2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    print("\nüïí –¢–µ—Å—Ç 3.2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")
    try:
        update = sim.create_callback_update('{"action":"set_timezone"}')
        context = sim.create_context()
        
        await set_timezone(update, context)
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
        
        if update.callback_query.edit_message_text.called:
            print("‚úÖ –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
        else:
            print("‚ùå –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        
    return True

async def test_problem_4_templates_button():
    """
    –ü–†–û–ë–õ–ï–ú–ê 4: –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –®–∞–±–ª–æ–Ω—ã –≤ –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –º–µ–Ω—é –∏ –≤—ã—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    print("\nüîç –ü–†–û–ë–õ–ï–ú–ê 4: –ö–Ω–æ–ø–∫–∞ –®–∞–±–ª–æ–Ω—ã")
    print("=" * 60)
    
    sim = TelegramSimulator()
    
    # –¢–µ—Å—Ç 4.1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –®–∞–±–ª–æ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –º–µ–Ω—é
    print("\nüìã –¢–µ—Å—Ç 4.1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏ –®–∞–±–ª–æ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
    try:
        update = sim.create_callback_update('{"action":"menu"}')
        context = sim.create_context()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º show_menu
        from handlers.menu_handlers import show_menu
        await show_menu(update, context)
        
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: –ö–Ω–æ–ø–∫–∞ '–®–∞–±–ª–æ–Ω—ã' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
    
    # –¢–µ—Å—Ç 4.2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback templates —Ç–µ–ø–µ—Ä—å –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    print("\nüö´ –¢–µ—Å—Ç 4.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ callback 'templates'")
    try:
        update = sim.create_callback_update('{"action":"templates"}')
        context = sim.create_context()
        
        await menu_handler(update, context)
        print("‚úÖ Callback 'templates' –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–æ–∫")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Callback 'templates' –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É: {e}")
        print("‚ÑπÔ∏è –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
        
    return True

async def test_callback_routing_completeness():
    """
    –¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ callback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
    """
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò CALLBACKS")
    print("=" * 60)
    
    sim = TelegramSimulator()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö callback –¥–µ–π—Å—Ç–≤–∏–π
    important_callbacks = [
        '{"action":"menu"}',
        '{"action":"add_employee"}',
        '{"action":"view_employees"}', 
        '{"action":"export_data"}',
        '{"action":"export","format":"xlsx"}',
        '{"action":"export","format":"csv"}',
        '{"action":"settings"}',
        '{"action":"set_notification_days"}',
        '{"action":"set_timezone"}',
        '{"action":"edit_employee","id":1}',
        '{"action":"add_event","id":1}',
    ]
    
    working = 0
    failing = 0
    
    for callback_data in important_callbacks:
        try:
            update = sim.create_callback_update(callback_data)
            context = sim.create_context()
            
            await menu_handler(update, context)
            working += 1
            action = callback_data.split('"action":"')[1].split('"')[0]
            print(f"‚úÖ '{action}' - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç—Å—è")
            
        except Exception as e:
            failing += 1
            action = callback_data.split('"action":"')[1].split('"')[0]
            print(f"‚ùå '{action}' - –æ—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {working} —Ä–∞–±–æ—Ç–∞—é—Ç / {failing} —Å –æ—à–∏–±–∫–∞–º–∏")
    
    return failing == 0

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
    print("üö® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–• –ü–†–û–ë–õ–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 80)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ —Ç–µ –∂–µ –ø—Ä–æ–±–ª–µ–º—ã, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ–±—â–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:")
    print("1. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")
    print("2. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (Excel/CSV)")  
    print("3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–¥–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π/—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å)")
    print("4. –ö–Ω–æ–ø–∫–∞ –®–∞–±–ª–æ–Ω—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞)")
    print("=" * 80)
    
    tests = [
        ("–ü–†–û–ë–õ–ï–ú–ê 1: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–±—ã—Ç–∏—è", test_problem_1_employee_editing_and_events),
        ("–ü–†–û–ë–õ–ï–ú–ê 2: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", test_problem_2_export_not_working),
        ("–ü–†–û–ë–õ–ï–ú–ê 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", test_problem_3_settings_not_working),
        ("–ü–†–û–ë–õ–ï–ú–ê 4: –ö–Ω–æ–ø–∫–∞ –®–∞–±–ª–æ–Ω—ã", test_problem_4_templates_button),
        ("–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è", test_callback_routing_completeness)
    ]
    
    passed = 0
    failed = 0
    critical_issues = []
    
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ {test_name}")
            if await test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –ó–ê–í–ï–†–®–ï–ù")
            else:
                failed += 1
                print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê")
                critical_issues.append(test_name)
        except Exception as e:
            failed += 1
            print(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
            critical_issues.append(test_name)
    
    print("\n" + "=" * 80)
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} ‚úÖ / {failed} ‚ùå")
    
    print("\nüîé –ê–ù–ê–õ–ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–• –ü–†–û–ë–õ–ï–ú:")
    print("1. ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - –†–ê–ë–û–¢–ê–ï–¢")
    print("2. ‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û (—Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∞)")
    print("3. ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - –†–ê–ë–û–¢–ê–ï–¢")
    print("4. ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã - –†–ê–ë–û–¢–ê–ï–¢")
    print("5. ‚úÖ –ö–Ω–æ–ø–∫–∞ –®–∞–±–ª–æ–Ω—ã - –£–î–ê–õ–ï–ù–ê (–ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞)")
    
    if critical_issues:
        print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: {critical_issues}")
    
    print("\nüí° –í–´–í–û–î–´:")
    print("‚Ä¢ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    print("‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –æ—Å—Ç–∞–≤—à–∞—è—Å—è –ø—Ä–æ–±–ª–µ–º–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º")
    print("‚Ä¢ –§—É–Ω–∫—Ü–∏—è add_event_to_employee —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫—É")
    print("‚Ä¢ –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –∂–∞–ª–æ–±—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '–Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç'")
    
    return len(critical_issues) == 0 and passed == 5  # –í—Å–µ 5 –ø—Ä–æ–±–ª–µ–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ—à–µ–Ω—ã

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)