# ================================================================
# PHASE1_IMPROVEMENTS.PY - –£–õ–£–ß–®–ï–ù–ò–Ø –§–ê–ó–´ 1
# ================================================================

import io
import csv
import xlsxwriter
from datetime import datetime, timedelta
from enum import Enum
from typing import List, Dict, Optional
import logging

# –ü–æ–ª—É—á–∞–µ–º logger (–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ main.py)
logger = logging.getLogger(__name__)

# ================================================================
# 1. –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
# ================================================================

class NotificationLevel(Enum):
    INFO = "info"           # 90+ –¥–Ω–µ–π (–ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 90 –¥–Ω–µ–π)
    WARNING = "warning"     # 8-30 –¥–Ω–µ–π (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 30 –¥–Ω–µ–π)
    URGENT = "urgent"       # 4-7 –¥–Ω–µ–π (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 7 –¥–Ω–µ–π)
    CRITICAL = "critical"   # 0-3 –¥–Ω—è (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
    OVERDUE = "overdue"     # –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)

class NotificationManager:
    def __init__(self, db_manager):
        self.db = db_manager
        
    def get_notification_level(self, days_until: int) -> NotificationLevel:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if days_until < 0:
            return NotificationLevel.OVERDUE
        elif days_until <= 3:
            return NotificationLevel.CRITICAL
        elif days_until <= 7:
            return NotificationLevel.URGENT
        elif days_until <= 30:
            return NotificationLevel.WARNING
        else:
            return NotificationLevel.INFO
    
    def should_send_notification(self, level: NotificationLevel, days_until: int) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
        
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if level == NotificationLevel.OVERDUE:
            return True
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ (0-3 –¥–Ω—è) - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if level == NotificationLevel.CRITICAL:
            return True
        
        # –°—Ä–æ—á–Ω—ã–µ (4-7 –¥–Ω–µ–π) - —Ç–æ–ª—å–∫–æ –≤ –∫–ª—é—á–µ–≤—ã–µ –¥–Ω–∏
        if level == NotificationLevel.URGENT:
            return days_until in [7]  # –¢–æ–ª—å–∫–æ –∑–∞ 7 –¥–Ω–µ–π
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (8-30 –¥–Ω–µ–π) - —Ç–æ–ª—å–∫–æ –∑–∞ 30 –¥–Ω–µ–π
        if level == NotificationLevel.WARNING:
            return days_until in [30]  # –¢–æ–ª—å–∫–æ –∑–∞ 30 –¥–Ω–µ–π
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ (31+ –¥–Ω–µ–π) - —Ç–æ–ª—å–∫–æ –∑–∞ 90 –¥–Ω–µ–π
        if level == NotificationLevel.INFO:
            return days_until in [90]  # –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 90 –¥–Ω–µ–π
        
        return False
    
    def format_notification_message(self, notification: dict, level: NotificationLevel) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏ –∏–∑ main
        from main import decrypt_data
        
        full_name = decrypt_data(notification['full_name'])
        event_date = datetime.fromisoformat(notification['next_notification_date']).date()
        days_until = (event_date - datetime.now().date()).days
        
        # –≠–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        level_config = {
            NotificationLevel.INFO: {
                "emoji": "‚ÑπÔ∏è",
                "title": "–ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                "color": "üü¢",
                "urgency": f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
            },
            NotificationLevel.WARNING: {
                "emoji": "‚ö†Ô∏è", 
                "title": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "color": "üü°",
                "urgency": f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
            },
            NotificationLevel.URGENT: {
                "emoji": "üö®",
                "title": "–°–†–û–ß–ù–û",
                "color": "üü†", 
                "urgency": f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
            },
            NotificationLevel.CRITICAL: {
                "emoji": "üî¥",
                "title": "–ö–†–ò–¢–ò–ß–ù–û",
                "color": "üî¥",
                "urgency": "–°–ö–û–†–û!" if days_until > 0 else "–°–ï–ì–û–î–ù–Ø!"
            },
            NotificationLevel.OVERDUE: {
                "emoji": "üíÄ",
                "title": "–ü–†–û–°–†–û–ß–ï–ù–û",
                "color": "‚ö´",
                "urgency": f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_until)} –¥–Ω."
            }
        }
        
        config = level_config[level]
        
        message = (
            f"{config['emoji']} <b>{config['title']}: {notification['event_type']}</b>\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {full_name}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: {event_date.strftime('%d.%m.%Y')}\n"
            f"{config['color']} –°—Ä–æ—á–Ω–æ—Å—Ç—å: {config['urgency']}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if level in [NotificationLevel.CRITICAL, NotificationLevel.OVERDUE]:
            message += f"\n\nüìû <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!</b>"
            if notification.get('position'):
                message += f"\nüíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {notification['position']}"
        
        return message

    async def send_escalated_notifications(self, context, notification: dict, level: NotificationLevel):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        if level not in [NotificationLevel.CRITICAL, NotificationLevel.OVERDUE]:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
            admins = self.db.execute_with_retry(
                "SELECT admin_id FROM chat_settings WHERE chat_id = ?",
                (notification['chat_id'],),
                fetch="all"
            )
            
            escalation_message = (
                f"üö® <b>–≠–°–ö–ê–õ–ê–¶–ò–Ø</b>\n"
                f"{self.format_notification_message(notification, level)}\n\n"
                f"‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin in admins:
                try:
                    await context.bot.send_message(
                        chat_id=admin['admin_id'],
                        text=escalation_message,
                        parse_mode='HTML',
                        reply_markup=self.create_action_keyboard(notification)
                    )
                except Exception as e:
                    logger.warning(f"Failed to send escalation to admin {admin['admin_id']}: {e}")
                    
        except Exception as e:
            logger.error(f"Error in escalated notifications: {e}")

    def create_action_keyboard(self, notification: dict):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        from main import create_callback_data
        
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", 
                    callback_data=create_callback_data("mark_completed", event_id=notification['id'])
                ),
                InlineKeyboardButton(
                    "üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞—Ç—É", 
                    callback_data=create_callback_data("reschedule", event_id=notification['id'])
                )
            ],
            [
                InlineKeyboardButton(
                    "üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", 
                    callback_data=create_callback_data("contact_employee", emp_id=notification.get('employee_id'))
                )
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

# ================================================================
# 2. –≠–ö–°–ü–û–†–¢ –í EXCEL –° –†–ê–°–®–ò–†–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨–Æ  
# ================================================================

class ExcelExporter:
    def __init__(self, db_manager):
        self.db = db_manager
    
    async def export_all_events(self, chat_id: int, file_format: str = "xlsx") -> io.BytesIO:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        events_data = self.db.execute_with_retry('''
            SELECT 
                e.full_name,
                e.position,
                ee.event_type,
                ee.last_event_date,
                ee.next_notification_date,
                ee.interval_days,
                CASE 
                    WHEN date(ee.next_notification_date) < date('now') THEN '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'
                    WHEN date(ee.next_notification_date) <= date('now', '+7 days') THEN '–ö—Ä–∏—Ç–∏—á–Ω–æ'
                    WHEN date(ee.next_notification_date) <= date('now', '+14 days') THEN '–°—Ä–æ—á–Ω–æ'
                    WHEN date(ee.next_notification_date) <= date('now', '+30 days') THEN '–í–Ω–∏–º–∞–Ω–∏–µ'
                    ELSE '–ü–ª–∞–Ω–æ–≤–æ–µ'
                END as status,
                (julianday(ee.next_notification_date) - julianday('now')) as days_until
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            ORDER BY ee.next_notification_date
        ''', (chat_id,), fetch="all")
        
        if file_format == "csv":
            return self._export_to_csv(events_data)
        else:
            return self._export_to_xlsx(events_data)
    
    def _export_to_csv(self, events_data: List) -> io.BytesIO:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        from main import decrypt_data
        
        output = io.BytesIO()
        output_str = io.StringIO()
        
        writer = csv.writer(output_str, delimiter=';')
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            '–§–ò–û', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–∏–ø —Å–æ–±—ã—Ç–∏—è', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ', 
            '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ', '–ò–Ω—Ç–µ—Ä–≤–∞–ª (–¥–Ω–∏)', '–°—Ç–∞—Ç—É—Å', '–î–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è'
        ]
        writer.writerow(headers)
        
        # –î–∞–Ω–Ω—ã–µ
        for event in events_data:
            decrypted_name = decrypt_data(event['full_name'])
            row = [
                decrypted_name,
                event['position'],
                event['event_type'],
                event['last_event_date'],
                event['next_notification_date'],
                event['interval_days'],
                event['status'],
                int(event['days_until']) if event['days_until'] else 0
            ]
            writer.writerow(row)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BytesIO
        output.write(output_str.getvalue().encode('utf-8-sig'))
        output.seek(0)
        return output
    
    def _export_to_xlsx(self, events_data: List) -> io.BytesIO:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from main import decrypt_data
        
        output = io.BytesIO()
        workbook = xlsxwriter.Workbook(output, {'in_memory': True})
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
        events_sheet = workbook.add_worksheet('–°–æ–±—ã—Ç–∏—è')
        stats_sheet = workbook.add_worksheet('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        
        # –§–æ—Ä–º–∞—Ç—ã
        header_format = workbook.add_format({
            'bold': True,
            'bg_color': '#4472C4',
            'font_color': 'white',
            'border': 1,
            'align': 'center'
        })
        
        date_format = workbook.add_format({
            'num_format': 'dd.mm.yyyy',
            'border': 1
        })
        
        # –§–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        status_formats = {
            '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ': workbook.add_format({'bg_color': '#FF0000', 'font_color': 'white', 'border': 1}),
            '–ö—Ä–∏—Ç–∏—á–Ω–æ': workbook.add_format({'bg_color': '#FF6600', 'font_color': 'white', 'border': 1}),
            '–°—Ä–æ—á–Ω–æ': workbook.add_format({'bg_color': '#FFFF00', 'border': 1}),
            '–í–Ω–∏–º–∞–Ω–∏–µ': workbook.add_format({'bg_color': '#90EE90', 'border': 1}),
            '–ü–ª–∞–Ω–æ–≤–æ–µ': workbook.add_format({'bg_color': '#87CEEB', 'border': 1})
        }
        
        default_format = workbook.add_format({'border': 1})
        
        # === –õ–ò–°–¢ –°–û–ë–´–¢–ò–ô ===
        headers = [
            '–§–ò–û', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–∏–ø —Å–æ–±—ã—Ç–∏—è', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ',
            '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ', '–ò–Ω—Ç–µ—Ä–≤–∞–ª (–¥–Ω–∏)', '–°—Ç–∞—Ç—É—Å', '–î–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è'
        ]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers):
            events_sheet.write(0, col, header, header_format)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row, event in enumerate(events_data, 1):
            decrypted_name = decrypt_data(event['full_name'])
            
            events_sheet.write(row, 0, decrypted_name, default_format)
            events_sheet.write(row, 1, event['position'], default_format)
            events_sheet.write(row, 2, event['event_type'], default_format)
            events_sheet.write_datetime(row, 3, datetime.fromisoformat(event['last_event_date']), date_format)
            events_sheet.write_datetime(row, 4, datetime.fromisoformat(event['next_notification_date']), date_format)
            events_sheet.write(row, 5, event['interval_days'], default_format)
            
            # –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            status = event['status']
            status_format = status_formats.get(status, default_format)
            events_sheet.write(row, 6, status, status_format)
            events_sheet.write(row, 7, int(event['days_until']) if event['days_until'] else 0, default_format)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        events_sheet.set_column('A:A', 25)  # –§–ò–û
        events_sheet.set_column('B:B', 20)  # –î–æ–ª–∂–Ω–æ—Å—Ç—å
        events_sheet.set_column('C:C', 20)  # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
        events_sheet.set_column('D:E', 15)  # –î–∞—Ç—ã
        events_sheet.set_column('F:F', 12)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª
        events_sheet.set_column('G:G', 12)  # –°—Ç–∞—Ç—É—Å
        events_sheet.set_column('H:H', 15)  # –î–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è
        
        # === –õ–ò–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
        self._add_statistics_sheet(stats_sheet, events_data, workbook)
        
        workbook.close()
        output.seek(0)
        return output
    
    def _add_statistics_sheet(self, sheet, events_data: List, workbook):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        
        # –§–æ—Ä–º–∞—Ç—ã
        title_format = workbook.add_format({
            'bold': True, 'font_size': 14, 'bg_color': '#4472C4', 
            'font_color': 'white', 'border': 1, 'align': 'center'
        })
        
        subtitle_format = workbook.add_format({
            'bold': True, 'bg_color': '#D9E2F3', 'border': 1
        })
        
        data_format = workbook.add_format({'border': 1, 'align': 'center'})
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from collections import Counter
        
        status_counts = Counter(event['status'] for event in events_data)
        event_type_counts = Counter(event['event_type'] for event in events_data)
        
        row = 0
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        sheet.merge_range(row, 0, row, 3, '–û–¢–ß–ï–¢ –ü–û –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ú –°–û–ë–´–¢–ò–Ø–ú', title_format)
        row += 2
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        sheet.write(row, 0, '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', subtitle_format)
        row += 1
        sheet.write(row, 0, '–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π:', data_format)
        sheet.write(row, 1, len(events_data), data_format)
        row += 1
        
        sheet.write(row, 0, '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', data_format)
        unique_employees = len(set(event['full_name'] for event in events_data))
        sheet.write(row, 1, unique_employees, data_format)
        row += 2
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        sheet.write(row, 0, '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', subtitle_format)
        row += 1
        
        for status, count in status_counts.items():
            sheet.write(row, 0, status, data_format)
            sheet.write(row, 1, count, data_format)
            percentage = (count / len(events_data)) * 100
            sheet.write(row, 2, f"{percentage:.1f}%", data_format)
            row += 1
        
        row += 1
        
        # –¢–æ–ø —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        sheet.write(row, 0, '–¢–æ–ø-5 —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π:', subtitle_format)
        row += 1
        
        for event_type, count in event_type_counts.most_common(5):
            sheet.write(row, 0, event_type, data_format)
            sheet.write(row, 1, count, data_format)
            row += 1
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        sheet.set_column('A:A', 25)
        sheet.set_column('B:B', 15)
        sheet.set_column('C:C', 15)

# ================================================================
# 3. –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê –ò –§–ò–õ–¨–¢–†–û–í
# ================================================================

class SearchManager:
    def __init__(self, db_manager):
        self.db = db_manager
    
    async def search_events(self, chat_id: int, query: str, filters: Dict = None) -> List[Dict]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–±—ã—Ç–∏—è–º"""
        
        base_query = '''
            SELECT 
                e.id as employee_id,
                e.full_name,
                e.position,
                ee.id as event_id,
                ee.event_type,
                ee.next_notification_date,
                ee.interval_days,
                (julianday(ee.next_notification_date) - julianday('now')) as days_until
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
        '''
        
        params = [chat_id]
        conditions = []
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        if query and query.strip():
            search_condition = '''
                (LOWER(e.full_name) LIKE LOWER(?) OR 
                 LOWER(e.position) LIKE LOWER(?) OR 
                 LOWER(ee.event_type) LIKE LOWER(?))
            '''
            conditions.append(search_condition)
            search_term = f"%{query.strip()}%"
            params.extend([search_term, search_term, search_term])
        
        # –§–∏–ª—å—Ç—Ä—ã
        if filters:
            if filters.get('status'):
                status = filters['status']
                if status == 'overdue':
                    conditions.append("date(ee.next_notification_date) < date('now')")
                elif status == 'urgent':
                    conditions.append("date(ee.next_notification_date) BETWEEN date('now') AND date('now', '+7 days')")
                elif status == 'upcoming':
                    conditions.append("date(ee.next_notification_date) BETWEEN date('now', '+8 days') AND date('now', '+30 days')")
            
            if filters.get('event_type'):
                conditions.append("ee.event_type = ?")
                params.append(filters['event_type'])
            
            if filters.get('date_from'):
                conditions.append("date(ee.next_notification_date) >= date(?)")
                params.append(filters['date_from'])
            
            if filters.get('date_to'):
                conditions.append("date(ee.next_notification_date) <= date(?)")
                params.append(filters['date_to'])
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if conditions:
            final_query = base_query + " AND " + " AND ".join(conditions)
        else:
            final_query = base_query
            
        final_query += " ORDER BY ee.next_notification_date"
        
        results = self.db.execute_with_retry(final_query, tuple(params), fetch="all")
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏–º–µ–Ω–∞
        from main import decrypt_data
        
        decrypted_results = []
        for result in results:
            result_dict = dict(result)
            try:
                result_dict['full_name'] = decrypt_data(result_dict['full_name'])
            except ValueError:
                result_dict['full_name'] = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
            decrypted_results.append(result_dict)
        
        return decrypted_results

    def get_available_event_types(self, chat_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        result = self.db.execute_with_retry('''
            SELECT DISTINCT ee.event_type 
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            ORDER BY ee.event_type
        ''', (chat_id,), fetch="all")
        
        return [row['event_type'] for row in result]

# ================================================================
# 4. –®–ê–ë–õ–û–ù–´ –°–û–ë–´–¢–ò–ô
# ================================================================

class EventTemplate:
    def __init__(self, name: str, events: List[Dict]):
        self.name = name
        self.events = events  # [{'type': '–ú–µ–¥–æ—Å–º–æ—Ç—Ä', 'interval_days': 365}, ...]

class TemplateManager:
    def __init__(self, db_manager):
        self.db = db_manager
        self.predefined_templates = self._load_predefined_templates()
    
    def _load_predefined_templates(self) -> Dict[str, EventTemplate]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        templates = {
            'carpenter': EventTemplate(
                name="–ü–ª–æ—Ç–Ω–∏–∫",
                events=[
                    {'type': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä', 'interval_days': 365},
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –û–¢ (–ü-2, –ü-3, –ü-4)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º –Ω–∞ –≤—ã—Å–æ—Ç–µ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç –Ω–∞ –≤—ã—Å–æ—Ç–µ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365},
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365}
                ]
            ),
            'painter': EventTemplate(
                name="–ú–∞–ª—è—Ä",
                events=[
                    {'type': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä', 'interval_days': 365},
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –û–¢ (–ü-2, –ü-3, –ü-4)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º –Ω–∞ –≤—ã—Å–æ—Ç–µ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç –Ω–∞ –≤—ã—Å–æ—Ç–µ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365},
                    {'type': '–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (1 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365}
                ]
            ),
            'maintenance_worker': EventTemplate(
                name="–†–∞–±–æ—á–∏–π –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∏ —Ä–µ–º–æ–Ω—Ç—É –∑–¥–∞–Ω–∏–π",
                events=[
                    {'type': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä', 'interval_days': 365},
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –û–¢ (–ü-2, –ü-3, –ü-4)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º –Ω–∞ –≤—ã—Å–æ—Ç–µ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç –Ω–∞ –≤—ã—Å–æ—Ç–µ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365},
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365}
                ]
            ),
            'janitor': EventTemplate(
                name="–î–≤–æ—Ä–Ω–∏–∫",
                events=[
                    {'type': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä', 'interval_days': 730},  # 2 –≥–æ–¥–∞
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –û–¢ (–ü-2, –ü-3)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (1 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365}
                ]
            ),
            'cleaner': EventTemplate(
                name="–£–±–æ—Ä—â–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π",
                events=[
                    {'type': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä', 'interval_days': 365},
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –û–¢ (–ü-2, –ü-3)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (1 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365}
                ]
            ),
            'senior_master': EventTemplate(
                name="–°—Ç–∞—Ä—à–∏–π –º–∞—Å—Ç–µ—Ä",
                events=[
                    {'type': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä', 'interval_days': 730},  # 2 –≥–æ–¥–∞
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –û–¢ (–ü-1, –ü-2, –ü-3, –ü-4)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –û–¢ (–ü-5.10, –ü-5.11)', 'interval_days': 365},
                    {'type': '–û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º –Ω–∞ –≤—ã—Å–æ—Ç–µ (3 –≥—Ä—É–ø–ø–∞)', 'interval_days': 1825},  # 5 –ª–µ—Ç
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365}
                ]
            ),
            'master': EventTemplate(
                name="–ú–∞—Å—Ç–µ—Ä",
                events=[
                    {'type': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä', 'interval_days': 730},  # 2 –≥–æ–¥–∞
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –û–¢ (–ü-1, –ü-2, –ü-3, –ü-4)', 'interval_days': 1095},  # 3 –≥–æ–¥–∞
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –û–¢ (–ü-5.10, –ü-5.11)', 'interval_days': 365},
                    {'type': '–û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º –Ω–∞ –≤—ã—Å–æ—Ç–µ (3 –≥—Ä—É–ø–ø–∞)', 'interval_days': 1825},  # 5 –ª–µ—Ç
                    {'type': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (2 –≥—Ä—É–ø–ø–∞)', 'interval_days': 365}
                ]
            )
        }
        return templates
    
    def get_template_list(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        templates = []
        for key, template in self.predefined_templates.items():
            templates.append({
                'key': key,
                'name': template.name,
                'events_count': len(template.events),
                'description': ', '.join([f"{e['type']} ({e['interval_days']}–¥)" for e in template.events[:3]])
            })
        return templates
    
    async def apply_template(self, employee_id: int, template_key: str, base_date: datetime = None) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
        if template_key not in self.predefined_templates:
            return False
        
        template = self.predefined_templates[template_key]
        base_date = base_date or datetime.now().date()
        
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                
                for event in template.events:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                    cursor.execute(
                        "SELECT id FROM employee_events WHERE employee_id = ? AND event_type = ?",
                        (employee_id, event['type'])
                    )
                    
                    if not cursor.fetchone():  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç
                        next_date = base_date + timedelta(days=event['interval_days'])
                        
                        cursor.execute('''
                            INSERT INTO employee_events 
                            (employee_id, event_type, last_event_date, interval_days, next_notification_date)
                            VALUES (?, ?, ?, ?, ?)
                        ''', (
                            employee_id,
                            event['type'],
                            base_date.isoformat(),
                            event['interval_days'],
                            next_date.isoformat()
                        ))
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"Error applying template: {e}")
            return False

# ================================================================
# –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ main.py)
# ================================================================

def init_phase1_managers(db_manager):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –§–∞–∑—ã 1"""
    notification_manager = NotificationManager(db_manager)
    excel_exporter = ExcelExporter(db_manager)
    search_manager = SearchManager(db_manager)
    template_manager = TemplateManager(db_manager)
    
    return notification_manager, excel_exporter, search_manager, template_manager