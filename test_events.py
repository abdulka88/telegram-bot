#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""

import sys
import os
import asyncio
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from unittest.mock import Mock, AsyncMock
from handlers.menu_handlers import menu_handler
from handlers.event_handlers import add_event_start, add_event_name, add_event_date, save_event
from core.database import db_manager
from core.security import encrypt_data

class TelegramSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self):
        self.chat_id = 123456789
        self.user_id = 987654321
    
    def create_callback_update(self, callback_data):
        """–°–æ–∑–¥–∞–µ—Ç update –¥–ª—è callback query"""
        update = Mock()
        update.callback_query = Mock()
        update.callback_query.answer = AsyncMock()
        update.callback_query.edit_message_text = AsyncMock()
        update.callback_query.data = callback_data
        
        update.effective_chat = Mock()
        update.effective_chat.id = self.chat_id
        update.effective_user = Mock()
        update.effective_user.id = self.user_id
        
        return update
    
    def create_message_update(self, text):
        """–°–æ–∑–¥–∞–µ—Ç update –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        update = Mock()
        update.message = Mock()
        update.message.text = text
        update.message.reply_text = AsyncMock()
        
        update.effective_chat = Mock()
        update.effective_chat.id = self.chat_id
        update.effective_user = Mock()
        update.effective_user.id = self.user_id
        
        return update
    
    def create_context(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞"""
        context = Mock()
        context.user_data = {}
        context.bot = Mock()
        context.bot.send_message = AsyncMock()
        return context

async def test_add_event_to_employee():
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
    print("\nüìÖ –¢–ï–°–¢: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    encrypted_name = encrypt_data("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –°–æ–±—ã—Ç–∏—è")
    employee_id = db_manager.execute_with_retry('''
        INSERT INTO employees (chat_id, full_name, position, is_active)
        VALUES (?, ?, ?, 1)
    ''', (123456789, encrypted_name, "–ü–ª–æ—Ç–Ω–∏–∫"))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {employee_id}")
    
    sim = TelegramSimulator()
    
    # –®–∞–≥ 1: –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    try:
        update1 = sim.create_callback_update(f'{{"action":"add_event","id":{employee_id}}}')
        context1 = sim.create_context()
        
        result1 = await add_event_start(update1, context1)
        print(f"‚úÖ –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result1}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ employee_id —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        if 'current_employee_id' in context1.user_data:
            print("‚úÖ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
        else:
            print("‚ùå ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return False
    
    # –®–∞–≥ 2: –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    try:
        update2 = sim.create_message_update("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
        context2 = sim.create_context()
        context2.user_data = context1.user_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        result2 = await add_event_name(update2, context2)
        print(f"‚úÖ –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result2}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        return False
    
    # –®–∞–≥ 3: –í–≤–æ–¥–∏–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
    try:
        update3 = sim.create_message_update("01.01.2024")
        context3 = sim.create_context()
        context3.user_data = context2.user_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        result3 = await add_event_date(update3, context3)
        print(f"‚úÖ –í–≤–æ–¥ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result3}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã: {e}")
        return False
    
    # –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    try:
        update4 = sim.create_callback_update('{"action":"save_event","interval":"365"}')
        context4 = sim.create_context()
        context4.user_data = context3.user_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        result4 = await save_event(update4, context4)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result4}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –≤ –±–∞–∑—É
        event = db_manager.execute_with_retry('''
            SELECT * FROM employee_events WHERE employee_id = ?
        ''', (employee_id,), fetch="one")
        
        if event:
            print("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –≤ –±–∞–∑—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return False
    
    # –û—á–∏—Å—Ç–∫–∞
    db_manager.execute_with_retry('DELETE FROM employee_events WHERE employee_id = ?', (employee_id,))
    db_manager.execute_with_retry('DELETE FROM employees WHERE id = ?', (employee_id,))
    print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    
    return True

async def test_view_employee_with_events():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏"""
    print("\nüëÄ –¢–ï–°–¢: –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Å–æ–±—ã—Ç–∏–µ–º
    encrypted_name = encrypt_data("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –°–æ–±—ã—Ç–∏—è")
    employee_id = db_manager.execute_with_retry('''
        INSERT INTO employees (chat_id, full_name, position, is_active)
        VALUES (?, ?, ?, 1)
    ''', (123456789, encrypted_name, "–ú–∞–ª—è—Ä"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    db_manager.execute_with_retry('''
        INSERT INTO employee_events (employee_id, event_type, last_event_date, interval_days, next_notification_date)
        VALUES (?, ?, ?, ?, ?)
    ''', (employee_id, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", "2024-01-01", 365, "2024-12-31"))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {employee_id} —Å —Å–æ–±—ã—Ç–∏–µ–º")
    
    sim = TelegramSimulator()
    
    # –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    try:
        update = sim.create_callback_update(f'{{"action":"add_event","id":{employee_id}}}')
        context = sim.create_context()
        
        await menu_handler(update, context)
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ' —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ menu_handler")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞
    db_manager.execute_with_retry('DELETE FROM employee_events WHERE employee_id = ?', (employee_id,))
    db_manager.execute_with_retry('DELETE FROM employees WHERE id = ?', (employee_id,))
    print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
    print("üìÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–ë–´–¢–ò–Ø–ú–ò")
    print("=" * 60)
    
    tests = [
        ("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", test_add_event_to_employee),
        ("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏", test_view_employee_with_events)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            if await test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
            else:
                failed += 1
                print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê")
        except Exception as e:
            failed += 1
            print(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–ë–´–¢–ò–ô: {passed} ‚úÖ / {failed} ‚ùå")
    
    return failed == 0

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)