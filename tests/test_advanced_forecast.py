#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.database import db_manager
from managers.advanced_analytics_manager import AdvancedAnalyticsManager

async def test_advanced_workload_forecast():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    analytics_manager = AdvancedAnalyticsManager(db_manager)
    
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –ù–ê–ì–†–£–ó–ö–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π chat_id
    test_chat_id = 12345
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        print("\nüìä –¢–µ—Å—Ç 1: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏")
        forecast = analytics_manager.get_workload_forecast(test_chat_id, 30)
        print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        print(f"üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞: {len(forecast.get('summary', {}))} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {len(forecast.get('daily_forecast', []))} –¥–Ω–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
        if 'workload_metrics' in forecast:
            metrics = forecast['workload_metrics']
            print(f"üéØ –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏: {len(metrics)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            print(f"   üìä –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {metrics.get('overall_load', 'N/A')}")
            print(f"   üìÖ –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å: {metrics.get('busiest_day', 'N/A')}")
            print(f"   üî¥ –î–Ω–µ–π —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π: {metrics.get('high_load_days', 0)}")
        
        # –¢–µ—Å—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤
        print("\nüîÆ –¢–µ—Å—Ç 2: –ú–Ω–æ–≥–æ–ø–µ—Ä–∏–æ–¥–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
        periods = {'short': 7, 'medium': 30, 'long': 90}
        advanced_forecast = analytics_manager.get_advanced_workload_forecast(test_chat_id, periods)
        print(f"‚úÖ –ú–Ω–æ–≥–æ–ø–µ—Ä–∏–æ–¥–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å–æ–∑–¥–∞–Ω")
        
        forecasts = advanced_forecast.get('forecasts', {})
        print(f"üìä –ü–µ—Ä–∏–æ–¥–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ: {len(forecasts)}")
        
        for period_name, period_data in forecasts.items():
            risk = period_data['risk_assessment']
            print(f"   üìÖ {period_name}: {risk['risk_emoji']} {risk['risk_level']} (–±–∞–ª–ª: {risk['risk_score']})")
        
        # –¢–µ—Å—Ç 3: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("\nüîÑ –¢–µ—Å—Ç 3: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–æ–≤")
        analysis = advanced_forecast.get('comparative_analysis', {})
        print(f"‚úÖ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"üìà –¢—Ä–µ–Ω–¥—ã: {len(analysis.get('trends', {}))}")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(analysis.get('recommendations', []))}")
        
        if analysis.get('trends'):
            trends = analysis['trends']
            print(f"   üìä –¢—Ä–µ–Ω–¥ –Ω–∞–≥—Ä—É–∑–∫–∏: {trends.get('load_trend', 'N/A')}")
        
        if analysis.get('recommendations'):
            print("   üí° –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for i, rec in enumerate(analysis['recommendations'][:2], 1):
                print(f"      {i}. {rec}")
        
        # –¢–µ—Å—Ç 4: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤")
        test_forecast = {
            'summary': {'avg_per_day': 5.5, 'peak_count': 12, 'forecast_period': 30},
            'workload_metrics': {'high_load_days': 8}
        }
        risk_assessment = analytics_manager._assess_period_risk(test_forecast)
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_assessment['risk_level']} {risk_assessment['risk_emoji']}")
        print(f"üìä –ë–∞–ª–ª —Ä–∏—Å–∫–∞: {risk_assessment['risk_score']}")
        print(f"üéØ –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞: {len(risk_assessment['factors'])}")
        
        # –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print("\nüí° –¢–µ—Å—Ç 5: –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        test_daily_forecast = [
            {'events_count': 8, 'priority': 'critical'},
            {'events_count': 6, 'priority': 'high'},
            {'events_count': 3, 'priority': 'medium'},
            {'events_count': 1, 'priority': 'low'}
        ]
        recommendations = analytics_manager._generate_workload_recommendations(
            6.5, 2, 1, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', test_daily_forecast
        )
        print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec}")
        
        # –¢–µ—Å—Ç 6: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        print("\nüìÖ –¢–µ—Å—Ç 6: –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
        weekly_distribution = [5, 3, 7, 4, 8, 2, 1]  # –ü–Ω-–í—Å
        day_names = ['–ü–æ–Ω', '–í—Ç–æ', '–°—Ä–µ', '–ß–µ—Ç', '–ü—è—Ç', '–°—É–±', '–í–æ—Å']
        
        busiest_day = day_names[weekly_distribution.index(max(weekly_distribution))]
        quietest_day = day_names[weekly_distribution.index(min(weekly_distribution))]
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"üìÖ –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å: {busiest_day} ({max(weekly_distribution)} —Å–æ–±—ã—Ç–∏–π)")
        print(f"üü¢ –°–∞–º—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å: {quietest_day} ({min(weekly_distribution)} —Å–æ–±—ã—Ç–∏–π)")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ô–î–ï–ù–´!")
        print("\nüìù –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç:")
        print("  ‚úÖ –ú–Ω–æ–≥–æ–ø–µ—Ä–∏–æ–¥–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ (7, 30, 90 –¥–Ω–µ–π)")
        print("  ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–Ω–µ–π")
        print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ —Å –±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–æ–π")
        print("  ‚úÖ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏")
        print("  ‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        print("  ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
        print("  ‚úÖ –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–∏–∫–æ–≤—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫")
        print("  ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π")
        print("  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success = await test_advanced_workload_forecast()
    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)