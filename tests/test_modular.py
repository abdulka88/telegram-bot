#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Telegram –±–æ—Ç–∞
"""

import os
import sys
import importlib
import traceback
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ü–û–†–¢–û–í –ú–û–î–£–õ–ï–ô")
    print("=" * 50)
    
    modules_to_test = [
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        ('config.settings', 'BotConfig'),
        ('config.constants', 'AVAILABLE_POSITIONS'),
        
        # –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
        ('core.database', 'DatabaseManager'),
        ('core.security', 'encrypt_data'),
        ('core.utils', 'create_callback_data'),
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        ('managers.notification_manager', 'NotificationManager'),
        ('managers.template_manager', 'TemplateManager'),
        ('managers.export_manager', 'ExportManager'),
        ('managers.search_manager', 'SearchManager'),
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        ('handlers.menu_handlers', 'show_menu'),
        ('handlers.employee_handlers', 'add_employee_start'),
        ('handlers.event_handlers', 'view_all_events'),
        ('handlers.export_handlers', 'export_data_start'),
        ('handlers.template_handlers', 'templates_menu'),
        ('handlers.search_handlers', 'search_menu_start'),
    ]
    
    success_count = 0
    total_count = len(modules_to_test)
    
    for module_name, class_or_func in modules_to_test:
        try:
            module = importlib.import_module(module_name)
            
            if hasattr(module, class_or_func):
                print(f"  ‚úÖ {module_name}.{class_or_func}")
                success_count += 1
            else:
                print(f"  ‚ùå {module_name}.{class_or_func} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        except ImportError as e:
            print(f"  ‚ùå {module_name} - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        except Exception as e:
            print(f"  ‚ùå {module_name} - –æ—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–æ–≤: {success_count}/{total_count}")
    return success_count == total_count

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        from core.database import DatabaseManager
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        db = DatabaseManager('test_db.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        print("  ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            
        expected_tables = ['chat_settings', 'employees', 'employee_events', 'notification_history', 'custom_templates']
        existing_tables = [table[0] for table in tables]
        
        for table in expected_tables:
            if table in existing_tables:
                print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"  ‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        if os.path.exists('test_db.db'):
            os.remove('test_db.db')
            
        print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        traceback.print_exc()
        return False

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\n‚öôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        from config.settings import BotConfig
        from config.constants import AVAILABLE_POSITIONS, ConversationStates
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config_items = [
            ('BOT_TOKEN', getattr(BotConfig, 'BOT_TOKEN', None) is not None),
            ('DB_PATH', hasattr(BotConfig, 'DB_PATH')),
            ('DEFAULT_TIMEZONE', hasattr(BotConfig, 'DEFAULT_TIMEZONE')),
            ('NOTIFICATION_TIME_HOUR', hasattr(BotConfig, 'NOTIFICATION_TIME_HOUR')),
        ]
        
        for item, exists in config_items:
            if exists:
                print(f"  ‚úÖ {item} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print(f"  ‚ö†Ô∏è {item} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        if len(AVAILABLE_POSITIONS) > 0:
            print(f"  ‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(AVAILABLE_POSITIONS)} —à—Ç.")
        else:
            print(f"  ‚ùå –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conversation_states = ['ADD_NAME', 'ADD_POSITION', 'ADD_EVENT_TYPE', 'ADD_LAST_DATE', 'ADD_INTERVAL']
        for state in conversation_states:
            if hasattr(ConversationStates, state):
                print(f"  ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ {state} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            else:
                print(f"  ‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ {state} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False

def test_managers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—ã"""
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–û–í")
    print("=" * 50)
    
    try:
        from core.database import DatabaseManager
        from managers.notification_manager import NotificationManager
        from managers.template_manager import TemplateManager
        from managers.export_manager import ExportManager
        from managers.search_manager import SearchManager
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        db = DatabaseManager('test_managers.db')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º NotificationManager
        notif_manager = NotificationManager(db)
        from config.constants import NotificationLevel
        level = notif_manager.get_notification_level(5)
        if level == NotificationLevel.URGENT:
            print("  ‚úÖ NotificationManager —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("  ‚ùå NotificationManager –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TemplateManager
        template_manager = TemplateManager(db)
        templates = template_manager.get_template_list()
        if len(templates) > 0:
            print(f"  ‚úÖ TemplateManager: {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
        else:
            print("  ‚ùå TemplateManager: —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º ExportManager
        export_manager = ExportManager(db)
        print("  ‚úÖ ExportManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º SearchManager  
        search_manager = SearchManager(db)
        print("  ‚úÖ SearchManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists('test_managers.db'):
            os.remove('test_managers.db')
            
        print("  ‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        traceback.print_exc()
        return False

def test_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    print("=" * 50)
    
    try:
        from handlers import menu_handlers, employee_handlers, event_handlers
        from handlers import export_handlers, template_handlers, search_handlers
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        handler_functions = [
            (menu_handlers, 'show_menu'),
            (menu_handlers, 'menu_handler'),
            (employee_handlers, 'add_employee_start'),
            (employee_handlers, 'show_position_selection'),
            (event_handlers, 'view_all_events'),
            (export_handlers, 'export_data_start'),
            (template_handlers, 'templates_menu'),
            (search_handlers, 'search_menu_start'),
        ]
        
        for module, function_name in handler_functions:
            if hasattr(module, function_name):
                print(f"  ‚úÖ {module.__name__}.{function_name}")
            else:
                print(f"  ‚ùå {module.__name__}.{function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        traceback.print_exc()
        return False

def test_security():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 50)
    
    try:
        from core.security import encrypt_data, decrypt_data, is_admin
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        test_data = "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"
        encrypted = encrypt_data(test_data)
        decrypted = decrypt_data(encrypted)
        
        if decrypted == test_data:
            print("  ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é is_admin (–¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        try:
            is_admin(12345, 67890)  # –¢–µ—Å—Ç–æ–≤—ã–µ ID
            print("  ‚úÖ –§—É–Ω–∫—Ü–∏—è is_admin —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ is_admin: {e}")
            return False
        
        print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
    current_dir = os.path.dirname(os.path.abspath(__file__))
    if current_dir not in sys.path:
        sys.path.insert(0, current_dir)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_connection),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã", test_managers),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", test_handlers),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", test_security),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            traceback.print_exc()
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)