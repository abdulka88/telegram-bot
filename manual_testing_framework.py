#!/usr/bin/env python3
"""
–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Telegram –±–æ—Ç–∞
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
"""

import asyncio
import json
import sys
import os
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from telegram import Update, CallbackQuery, Message, User, Chat
from telegram.ext import Application, ContextTypes
from core.database import db_manager
from core.security import encrypt_data, decrypt_data

class ManualTestingFramework:
    """
    –§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    """
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.test_chat_id = 999999999  # –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç ID
        self.test_user_id = 888888888  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID
        self.application = None
        self.test_results = []
        self.current_test = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('manual_testing.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    async def initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            from main import main as bot_main
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    
    def create_test_update(self, text: str = None, callback_data: str = None) -> Update:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π Update –æ–±—ä–µ–∫—Ç"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            id=self.test_user_id,
            is_bot=False,
            first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
            last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            username="test_user"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        chat = Chat(
            id=self.test_chat_id,
            type="private"
        )
        
        update_data = {
            'update_id': int(time.time()),
        }
        
        if text:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_data = {
                'message_id': int(time.time()),
                'date': datetime.now(),
                'chat': chat,
                'from_user': user,
                'text': text
            }
            message = Message(
                message_id=message_data['message_id'],
                date=message_data['date'],
                chat=chat,
                from_user=user,
                text=text
            )
            update_data['message'] = message
            
        elif callback_data:
            # –°–æ–∑–¥–∞–µ–º callback query
            callback_query = CallbackQuery(
                id=str(int(time.time())),
                from_user=user,
                chat_instance="test_instance",
                data=callback_data
            )
            update_data['callback_query'] = callback_query
        
        return Update(**update_data)
    
    def log_test_result(self, test_name: str, status: str, details: str = "", error: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        result = {
            'test_name': test_name,
            'status': status,  # SUCCESS, ERROR, WARNING
            'details': details,
            'error': error,
            'timestamp': datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
        color = {
            'SUCCESS': '‚úÖ',
            'ERROR': '‚ùå',
            'WARNING': '‚ö†Ô∏è'
        }.get(status, '‚ùì')
        
        self.logger.info(f"{color} {test_name}: {status}")
        if details:
            self.logger.info(f"   üìã {details}")
        if error:
            self.logger.error(f"   üî• {error}")
    
    async def test_scenario_1_employee_management(self):
        """
        –°–¶–ï–ù–ê–†–ò–ô 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤  
        - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        - –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        """
        self.logger.info("\nüß™ === –°–¶–ï–ù–ê–†–ò–ô 1: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê–ú–ò ===")
        
        scenario_results = []
        
        try:
            # 1.1 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.logger.info("üìã –¢–µ—Å—Ç 1.1: –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
            update = self.create_test_update(text="/start")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            scenario_results.append("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - OK")
            
            # 1.2 –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            self.logger.info("üë§ –¢–µ—Å—Ç 1.2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            update = self.create_test_update(callback_data='{"action":"add_employee"}')
            scenario_results.append("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - OK")
            
            # 1.3 –í–≤–æ–¥ –∏–º–µ–Ω–∏
            self.logger.info("üìù –¢–µ—Å—Ç 1.3: –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            update = self.create_test_update(text="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –¢–µ—Å—Ç–æ–≤")
            scenario_results.append("–í–≤–æ–¥ –∏–º–µ–Ω–∏ - OK")
            
            # 1.4 –í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            self.logger.info("üíº –¢–µ—Å—Ç 1.4: –í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
            update = self.create_test_update(callback_data='{"action":"select_position","position":"–ú–∞–ª—è—Ä"}')
            scenario_results.append("–í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ - OK")
            
            # 1.5 –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞
            self.logger.info("üìä –¢–µ—Å—Ç 1.5: –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            update = self.create_test_update(callback_data='{"action":"view_employees"}')
            scenario_results.append("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ - OK")
            
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏", "SUCCESS", 
                               f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(scenario_results)} —à–∞–≥–æ–≤")
            
        except Exception as e:
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏", "ERROR", 
                               "", str(e))
    
    async def test_scenario_2_events_management(self):
        """
        –°–¶–ï–ù–ê–†–ò–ô 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏
        - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        """
        self.logger.info("\nüß™ === –°–¶–ï–ù–ê–†–ò–ô 2: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø–ú–ò ===")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        try:
            encrypted_name = encrypt_data("–¢–µ—Å—Ç–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –°–æ–±—ã—Ç–∏–π")
            employee_id = db_manager.execute_with_retry('''
                INSERT INTO employees (chat_id, full_name, position, is_active)
                VALUES (?, ?, ?, 1)
            ''', (self.test_chat_id, encrypted_name, "–ü–ª–æ—Ç–Ω–∏–∫"))
            
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {employee_id}")
            
            # 2.1 –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            self.logger.info("üìÖ –¢–µ—Å—Ç 2.1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É")
            update = self.create_test_update(callback_data=f'{{"action":"add_event","id":{employee_id}}}')
            
            # 2.2 –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            self.logger.info("üìù –¢–µ—Å—Ç 2.2: –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
            update = self.create_test_update(text="–ú–µ–¥–æ—Å–º–æ—Ç—Ä")
            
            # 2.3 –í–≤–æ–¥ –¥–∞—Ç—ã
            self.logger.info("üìÖ –¢–µ—Å—Ç 2.3: –í–≤–æ–¥ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è")
            update = self.create_test_update(text="15.01.2024")
            
            # 2.4 –í–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            self.logger.info("üîÑ –¢–µ—Å—Ç 2.4: –í–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
            update = self.create_test_update(text="365")
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            db_manager.execute_with_retry('DELETE FROM employee_events WHERE employee_id = ?', (employee_id,))
            db_manager.execute_with_retry('DELETE FROM employees WHERE id = ?', (employee_id,))
            
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏", "SUCCESS", 
                               "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
            
        except Exception as e:
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏", "ERROR", 
                               "", str(e))
    
    async def test_scenario_3_export_functionality(self):
        """
        –°–¶–ï–ù–ê–†–ò–ô 3: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        - –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        - –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        - –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        """
        self.logger.info("\nüß™ === –°–¶–ï–ù–ê–†–ò–ô 3: –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ===")
        
        try:
            # 3.1 –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.logger.info("üìä –¢–µ—Å—Ç 3.1: –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞")
            update = self.create_test_update(callback_data='{"action":"export_data"}')
            
            # 3.2 –≠–∫—Å–ø–æ—Ä—Ç Excel
            self.logger.info("üìà –¢–µ—Å—Ç 3.2: –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
            update = self.create_test_update(callback_data='{"action":"export","format":"xlsx"}')
            
            # 3.3 –≠–∫—Å–ø–æ—Ä—Ç CSV
            self.logger.info("üìÑ –¢–µ—Å—Ç 3.3: –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
            update = self.create_test_update(callback_data='{"action":"export","format":"csv"}')
            
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 3: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "SUCCESS", 
                               "–í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
        except Exception as e:
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 3: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "ERROR", 
                               "", str(e))
    
    async def test_scenario_4_settings_management(self):
        """
        –°–¶–ï–ù–ê–†–ò–ô 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        - –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        """
        self.logger.info("\nüß™ === –°–¶–ï–ù–ê–†–ò–ô 4: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ===")
        
        try:
            # 4.1 –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.logger.info("‚öôÔ∏è –¢–µ—Å—Ç 4.1: –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            update = self.create_test_update(callback_data='{"action":"settings"}')
            
            # 4.2 –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.logger.info("‚è∞ –¢–µ—Å—Ç 4.2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            update = self.create_test_update(callback_data='{"action":"set_notification_days"}')
            update = self.create_test_update(callback_data='{"action":"notification_days","days":"60"}')
            
            # 4.3 –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            self.logger.info("üïí –¢–µ—Å—Ç 4.3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")
            update = self.create_test_update(callback_data='{"action":"set_timezone"}')
            update = self.create_test_update(callback_data='{"action":"timezone","tz":"Europe/Kiev"}')
            
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏", "SUCCESS", 
                               "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
        except Exception as e:
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏", "ERROR", 
                               "", str(e))
    
    async def test_edge_cases(self):
        """
        –°–¶–ï–ù–ê–†–ò–ô 5: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏  
        - –ù–µ–≤–µ—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        """
        self.logger.info("\nüß™ === –°–¶–ï–ù–ê–†–ò–ô 5: –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò ===")
        
        try:
            # 5.1 –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
            self.logger.info("üìÖ –¢–µ—Å—Ç 5.1: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            update = self.create_test_update(text="32.13.2024")
            
            # 5.2 –ü—É—Å—Ç–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            self.logger.info("üë§ –¢–µ—Å—Ç 5.2: –ü—É—Å—Ç–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            update = self.create_test_update(text="   ")
            
            # 5.3 –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            self.logger.info("üîç –¢–µ—Å—Ç 5.3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫")
            update = self.create_test_update(callback_data='{"action":"edit_employee","id":99999}')
            
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 5: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", "SUCCESS", 
                               "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            
        except Exception as e:
            self.log_test_result("–°—Ü–µ–Ω–∞—Ä–∏–π 5: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", "ERROR", 
                               "", str(e))
    
    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –†–£–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–û–¢–ê")
        self.logger.info("=" * 60)
        
        start_time = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.initialize_bot():
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return False
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        test_scenarios = [
            self.test_scenario_1_employee_management,
            self.test_scenario_2_events_management,
            self.test_scenario_3_export_functionality,
            self.test_scenario_4_settings_management,
            self.test_edge_cases
        ]
        
        for scenario in test_scenarios:
            try:
                await scenario()
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ {scenario.__name__}: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await self.generate_final_report(start_time)
        
        return True
    
    async def generate_final_report(self, start_time: datetime):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        end_time = datetime.now()
        duration = end_time - start_time
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        success_count = len([r for r in self.test_results if r['status'] == 'SUCCESS'])
        error_count = len([r for r in self.test_results if r['status'] == 'ERROR'])
        warning_count = len([r for r in self.test_results if r['status'] == 'WARNING'])
        total_count = len(self.test_results)
        
        self.logger.info("\n" + "=" * 60)
        self.logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –†–£–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.logger.info("=" * 60)
        self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        self.logger.info(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_count}")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        self.logger.info(f"‚ùå –û—à–∏–±–∫–∏: {error_count}")
        self.logger.info(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_count}")
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if total_count > 0:
            success_rate = (success_count / total_count) * 100
            self.logger.info(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if error_count > 0:
            self.logger.info("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for result in self.test_results:
                if result['status'] == 'ERROR':
                    self.logger.info(f"   ‚Ä¢ {result['test_name']}: {result['error']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        await self.save_report_to_file()
    
    async def save_report_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ JSON —Ñ–∞–π–ª"""
        report_file = f"manual_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'test_results': self.test_results,
            'summary': {
                'total': len(self.test_results),
                'success': len([r for r in self.test_results if r['status'] == 'SUCCESS']),
                'errors': len([r for r in self.test_results if r['status'] == 'ERROR']),
                'warnings': len([r for r in self.test_results if r['status'] == 'WARNING'])
            }
        }
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

class InteractiveTestingShell:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    
    def __init__(self, framework: ManualTestingFramework):
        self.framework = framework
        self.running = True
    
    async def start_interactive_mode(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüîß –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  test1 - –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
        print("  test2 - –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏")
        print("  test3 - –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("  test4 - –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        print("  test5 - –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
        print("  all   - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤")
        print("  exit  - –í—ã—Ö–æ–¥")
        print("=" * 50)
        
        while self.running:
            try:
                command = input("\nü§ñ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É > ").strip().lower()
                
                if command == 'exit':
                    self.running = False
                    print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                    
                elif command == 'test1':
                    await self.framework.test_scenario_1_employee_management()
                    
                elif command == 'test2':
                    await self.framework.test_scenario_2_events_management()
                    
                elif command == 'test3':
                    await self.framework.test_scenario_3_export_functionality()
                    
                elif command == 'test4':
                    await self.framework.test_scenario_4_settings_management()
                    
                elif command == 'test5':
                    await self.framework.test_edge_cases()
                    
                elif command == 'all':
                    await self.framework.run_comprehensive_test()
                    
                else:
                    print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
                    
            except KeyboardInterrupt:
                self.running = False
                print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞')
    parser.add_argument('--mode', choices=['auto', 'interactive'], default='auto',
                       help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (auto/interactive)')
    parser.add_argument('--token', required=False, 
                       help='–¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–∑ .env)')
    
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    bot_token = args.token or os.getenv('BOT_TOKEN', 'test_token')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
    framework = ManualTestingFramework(bot_token)
    
    if args.mode == 'interactive':
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        shell = InteractiveTestingShell(framework)
        await shell.start_interactive_mode()
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        await framework.run_comprehensive_test()

if __name__ == "__main__":
    asyncio.run(main())