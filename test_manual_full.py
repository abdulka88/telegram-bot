#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞
–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º
"""

import asyncio
import sys
import os
from datetime import datetime, date, timedelta
import random

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.database import db_manager
from managers.notification_manager import NotificationManager
from managers.template_manager import TemplateManager
from managers.search_manager import SearchManager
from managers.export_manager import ExportManager
from managers.advanced_analytics_manager import AdvancedAnalyticsManager
from managers.automated_reports_manager import AutomatedReportsManager
from core.security import encrypt_data, decrypt_data

class BotManualTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.test_chat_id = 12345
        self.admin_id = 67890
        self.notification_manager = NotificationManager(db_manager)
        self.template_manager = TemplateManager(db_manager)
        self.search_manager = SearchManager(db_manager)
        self.export_manager = ExportManager(db_manager)
        self.analytics_manager = AdvancedAnalyticsManager(db_manager)
        self.reports_manager = AutomatedReportsManager(db_manager)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_positions = [
            "–ü–ª–æ—Ç–Ω–∏–∫", "–ú–∞–ª—è—Ä", "–†–∞–±–æ—á–∏–π –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∏ —Ä–µ–º–æ–Ω—Ç—É –∑–¥–∞–Ω–∏–π",
            "–î–≤–æ—Ä–Ω–∏–∫", "–£–±–æ—Ä—â–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π", "–ú–∞—Å—Ç–µ—Ä", "–°—Ç–∞—Ä—à–∏–π –º–∞—Å—Ç–µ—Ä"
        ]
        
        self.test_event_types = [
            "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä", "–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞",
            "–û–±—É—á–µ–Ω–∏–µ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π",
            "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", "–ü–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è"
        ]
        
        self.employee_names = [
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á", "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á",
            "–ö–æ–∑–ª–æ–≤ –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á", "–ù–æ–≤–∏–∫–æ–≤ –°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", "–ú–æ—Ä–æ–∑–æ–≤ –ê–ª–µ–∫—Å–µ–π –î–º–∏—Ç—Ä–∏–µ–≤–∏—á",
            "–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞", "–°–º–∏—Ä–Ω–æ–≤–∞ –ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞",
            "–ü–æ–ø–æ–≤ –í–ª–∞–¥–∏–º–∏—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á", "–õ–µ–±–µ–¥–µ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", "–ö–æ–∑–ª–æ–≤–∞ –û–ª—å–≥–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
            "–ù–æ–≤–∏–∫–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞", "–ú–æ—Ä–æ–∑–æ–≤–∞ –õ—é–¥–º–∏–ª–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞"
        ]
        
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("ü§ñ –ü–û–õ–ù–û–ï –†–£–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ë–û–¢–ê")
        print("=" * 60)
        print(f"üìÖ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print()
        
        try:
            # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã
            await self.prepare_test_environment()
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employee_ids = await self.create_test_employees()
            
            # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            await self.add_test_events(employee_ids)
            
            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            await self.test_search_functionality()
            
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await self.test_analytics()
            
            # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
            await self.test_reports()
            
            # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            await self.test_export()
            
            # 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.test_notifications()
            
            # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            await self.verify_data_integrity()
            
            print("\nüéâ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
            import traceback
            traceback.print_exc()
    
    async def prepare_test_environment(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        print("üîß –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã")
        print("-" * 40)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞
        db_manager.execute_with_retry('''
            INSERT OR REPLACE INTO chat_settings 
            (chat_id, admin_id, timezone, notification_days)
            VALUES (?, ?, ?, ?)
        ''', (self.test_chat_id, self.admin_id, 'Europe/Moscow', 90))
        
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç: {self.test_chat_id}")
        print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {self.admin_id}")
        print(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Moscow")
        print(f"‚úÖ –ü–µ—Ä–∏–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 90 –¥–Ω–µ–π")
        print()
    
    async def create_test_employees(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        print("üë• –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        print("-" * 40)
        
        employee_ids = []
        
        for i, name in enumerate(self.employee_names):
            position = self.test_positions[i % len(self.test_positions)]
            
            # –®–∏—Ñ—Ä—É–µ–º –∏–º—è
            encrypted_name = encrypt_data(name)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee_id = db_manager.execute_with_retry('''
                INSERT INTO employees (chat_id, full_name, position, is_active)
                VALUES (?, ?, ?, ?)
            ''', (self.test_chat_id, encrypted_name, position, True))
            
            employee_ids.append(employee_id)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} ({position}) [ID: {employee_id}]")
        
        print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employee_ids)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
        position_stats = {}
        for i, name in enumerate(self.employee_names):
            position = self.test_positions[i % len(self.test_positions)]
            position_stats[position] = position_stats.get(position, 0) + 1
        
        print("\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º:")
        for position, count in position_stats.items():
            print(f"   {position}: {count} —á–µ–ª.")
        
        print()
        return employee_ids
    
    async def add_test_events(self, employee_ids):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        print("üìÖ –≠—Ç–∞–ø 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        print("-" * 40)
        
        events_added = 0
        
        for employee_id in employee_ids:
            # –ö–∞–∂–¥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–æ–±–∞–≤–ª—è–µ–º 2-4 —Å–æ–±—ã—Ç–∏—è
            num_events = random.randint(2, 4)
            
            for _ in range(num_events):
                event_type = random.choice(self.test_event_types)
                
                # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è (–æ—Ç 30 –¥–æ 400 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
                days_ago = random.randint(30, 400)
                last_event_date = date.today() - timedelta(days=days_ago)
                
                # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–±—ã—Ç–∏—è (–æ—Ç 180 –¥–æ 365 –¥–Ω–µ–π)
                interval_days = random.choice([180, 240, 300, 365])
                
                # –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                next_date = last_event_date + timedelta(days=interval_days)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                event_id = db_manager.execute_with_retry('''
                    INSERT INTO employee_events 
                    (employee_id, event_type, last_event_date, next_notification_date, interval_days)
                    VALUES (?, ?, ?, ?, ?)
                ''', (employee_id, event_type, last_event_date.isoformat(), 
                      next_date.isoformat(), interval_days))
                
                events_added += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
                days_until = (next_date - date.today()).days
                if days_until < 0:
                    status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
                elif days_until <= 7:
                    status = "üü† –ö—Ä–∏—Ç–∏—á–Ω–æ"
                elif days_until <= 30:
                    status = "üü° –í–Ω–∏–º–∞–Ω–∏–µ"
                else:
                    status = "üü¢ –ü–ª–∞–Ω–æ–≤–æ–µ"
                
                print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event_type} [{status}] - —á–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π")
        
        print(f"\nüìä –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {events_added}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = self.get_events_status_stats()
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in status_stats.items():
            print(f"   {status}: {count}")
        
        print()
    
    def get_events_status_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Å–æ–±—ã—Ç–∏–π"""
        events = db_manager.execute_with_retry('''
            SELECT next_notification_date 
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ?
        ''', (self.test_chat_id,), fetch="all")
        
        stats = {"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ": 0, "–ö—Ä–∏—Ç–∏—á–Ω–æ": 0, "–í–Ω–∏–º–∞–Ω–∏–µ": 0, "–ü–ª–∞–Ω–æ–≤–æ–µ": 0}
        
        for event in events:
            next_date = date.fromisoformat(event['next_notification_date'])
            days_until = (next_date - date.today()).days
            
            if days_until < 0:
                stats["–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"] += 1
            elif days_until <= 7:
                stats["–ö—Ä–∏—Ç–∏—á–Ω–æ"] += 1
            elif days_until <= 30:
                stats["–í–Ω–∏–º–∞–Ω–∏–µ"] += 1
            else:
                stats["–ü–ª–∞–Ω–æ–≤–æ–µ"] += 1
        
        return stats
    
    async def test_search_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞"""
        print("üîç –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞")
        print("-" * 40)
        
        # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        search_results = self.search_manager.smart_text_search(self.test_chat_id, "–ò–≤–∞–Ω–æ–≤", 10)
        print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ '–ò–≤–∞–Ω–æ–≤': –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        search_results = self.search_manager.smart_text_search(self.test_chat_id, "–ü–ª–æ—Ç–Ω–∏–∫", 10)
        print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '–ü–ª–æ—Ç–Ω–∏–∫': –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
        search_results = self.search_manager.smart_text_search(self.test_chat_id, "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π", 10)
        print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ —Å–æ–±—ã—Ç–∏—é '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π': –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        filter_results = self.search_manager.filter_events_by_status(self.test_chat_id, "overdue")
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: –Ω–∞–π–¥–µ–Ω–æ {len(filter_results)} —Å–æ–±—ã—Ç–∏–π")
        
        filter_results = self.search_manager.filter_events_by_status(self.test_chat_id, "critical")
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: –Ω–∞–π–¥–µ–Ω–æ {len(filter_results)} —Å–æ–±—ã—Ç–∏–π")
        
        print()
    
    async def test_analytics(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        print("üìä –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        print("-" * 40)
        
        # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        trends = self.analytics_manager.get_trends_analysis(self.test_chat_id, 6)
        if trends.get('trend') != 'no_data':
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç 2: –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        efficiency = self.analytics_manager.get_efficiency_metrics(self.test_chat_id)
        print(f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency.get('efficiency_grade', 'N/A')} "
              f"({efficiency.get('compliance_rate', 0)}% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ)")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏
        forecast = self.analytics_manager.get_workload_forecast(self.test_chat_id, 30)
        summary = forecast.get('summary', {})
        print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π: {summary.get('total_events', 0)} —Å–æ–±—ã—Ç–∏–π, "
              f"—Å—Ä–µ–¥–Ω–µ–µ {summary.get('avg_per_day', 0):.1f}/–¥–µ–Ω—å")
        
        # –¢–µ—Å—Ç 4: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        charts = self.analytics_manager.get_detailed_timeline_charts(self.test_chat_id)
        print(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: {len(charts)} —Ç–∏–ø–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç 5: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        periods = {'short': 7, 'medium': 30, 'long': 90}
        advanced_forecast = self.analytics_manager.get_advanced_workload_forecast(self.test_chat_id, periods)
        forecasts = advanced_forecast.get('forecasts', {})
        print(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {len(forecasts)} –ø–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        print()
    
    async def test_reports(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        print("üìã –≠—Ç–∞–ø 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤")
        print("-" * 40)
        
        # –¢–µ—Å—Ç 1: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        daily_report = await self.reports_manager._generate_daily_summary(self.test_chat_id)
        if daily_report:
            print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: {len(daily_report)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("‚ö†Ô∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: –ø—É—Å—Ç")
        
        # –¢–µ—Å—Ç 2: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        weekly_report = await self.reports_manager._generate_weekly_report(self.test_chat_id)
        if weekly_report:
            print(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {len(weekly_report)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("‚ö†Ô∏è –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: –ø—É—Å—Ç")
        
        # –¢–µ—Å—Ç 3: –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
        monthly_report = await self.reports_manager._generate_monthly_report(self.test_chat_id)
        if monthly_report:
            print(f"‚úÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç: {len(monthly_report)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("‚ö†Ô∏è –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç: –ø—É—Å—Ç")
        
        # –¢–µ—Å—Ç 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
        settings = self.reports_manager.get_report_settings(self.test_chat_id)
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: {len(settings)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        print()
    
    async def test_export(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        print("üìÑ –≠—Ç–∞–ø 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞")
        print("-" * 40)
        
        # –¢–µ—Å—Ç 1: –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        excel_data = await self.export_manager.export_all_events(self.test_chat_id, "xlsx")
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π: {len(excel_data.getvalue())} –±–∞–π—Ç")
        
        # –¢–µ—Å—Ç 2: –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics_excel = await self.export_manager.export_analytics_report(self.test_chat_id, "full")
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {len(analytics_excel.getvalue())} –±–∞–π—Ç")
        
        # –¢–µ—Å—Ç 3: –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
        report_excel = await self.export_manager.export_automated_report(self.test_chat_id, "daily")
        if report_excel:
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞: {len(report_excel.getvalue())} –±–∞–π—Ç")
        else:
            print("‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        print()
    
    async def test_notifications(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üîî –≠—Ç–∞–ø 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        upcoming_events = db_manager.execute_with_retry('''
            SELECT ee.*, e.full_name, e.position
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            AND date(ee.next_notification_date) <= date('now', '+90 days')
            ORDER BY ee.next_notification_date
            LIMIT 10
        ''', (self.test_chat_id,), fetch="all")
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(upcoming_events)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        for event in upcoming_events[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5
            next_date = date.fromisoformat(event['next_notification_date'])
            days_until = (next_date - date.today()).days
            
            level = self.notification_manager.get_notification_level(days_until)
            
            try:
                name = decrypt_data(event['full_name'])
            except:
                name = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"
            
            print(f"   üìÖ {name}: {event['event_type']} —á–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π ({level})")
        
        print()
    
    async def verify_data_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –≠—Ç–∞–ø 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees_count = db_manager.execute_with_retry('''
            SELECT COUNT(*) as count FROM employees WHERE chat_id = ?
        ''', (self.test_chat_id,), fetch="one")['count']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π
        events_count = db_manager.execute_with_retry('''
            SELECT COUNT(*) as count 
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ?
        ''', (self.test_chat_id,), fetch="one")['count']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
        invalid_dates = db_manager.execute_with_retry('''
            SELECT COUNT(*) as count 
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? 
            AND date(ee.next_notification_date) < date(ee.last_event_date)
        ''', (self.test_chat_id,), fetch="one")['count']
        
        print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {employees_count}")
        print(f"‚úÖ –°–æ–±—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ: {events_count}")
        print(f"‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç: {invalid_dates}")
        
        if invalid_dates == 0:
            print("üéâ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        else:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        test_employee = db_manager.execute_with_retry('''
            SELECT full_name FROM employees WHERE chat_id = ? LIMIT 1
        ''', (self.test_chat_id,), fetch="one")
        
        if test_employee:
            try:
                decrypted_name = decrypt_data(test_employee['full_name'])
                print("‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º: {e}")
        
        print()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = BotManualTester()
    await tester.run_full_test()

if __name__ == "__main__":
    asyncio.run(main())