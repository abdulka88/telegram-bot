#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        from handlers.menu_handlers import menu_handler
        from handlers.settings_handlers import set_notification_days, set_timezone
        from handlers.employee_handlers import handle_position_selection, save_employee_position
        from handlers.template_handlers import templates_menu
        from handlers.export_handlers import handle_export
        
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_callback_handlers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è callback handlers"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ callback handlers...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ actions –µ—Å—Ç—å –≤ menu_handler
    from handlers.menu_handlers import menu_handler
    
    expected_actions = [
        "set_notif_days", "set_timezone", "save_notif_days", "save_timezone",
        "export", "select_template", "apply_template", 
        "edit_employee", "save_position"
    ]
    
    print("‚úÖ –û–∂–∏–¥–∞–µ–º—ã–µ actions –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for action in expected_actions:
        print(f"   - {action}")
    
    return True

def test_template_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ template_manager"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ template_manager...")
    
    try:
        from managers.template_manager import TemplateManager
        from core.database import db_manager
        
        tm = TemplateManager(db_manager)
        templates = tm.get_template_list()
        
        print(f"‚úÖ Template manager —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
        for template in templates[:3]:
            print(f"   - {template['name']}: {template['events_count']} —Å–æ–±—ã—Ç–∏–π")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ template_manager: {e}")
        return False

def test_settings_handlers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ settings handlers"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ settings handlers...")
    
    try:
        from handlers.settings_handlers import set_notification_days, save_notification_days
        print("‚úÖ Settings handlers –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ settings handlers: {e}")
        return False

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÉÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from core.database import db_manager
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
        
        table_names = [table['name'] for table in tables]
        expected_tables = ['employees', 'employee_events', 'chat_settings']
        
        missing_tables = [t for t in expected_tables if t not in table_names]
        
        if missing_tables:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
        else:
            print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        print(f"üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î: {len(table_names)}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ü–†–û–ë–õ–ï–ú –ë–û–¢–ê")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_callback_handlers, 
        test_template_manager,
        test_settings_handlers,
        test_database_connection
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test.__name__}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} ‚úÖ / {failed} ‚ùå")
    
    if failed == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("\nüí° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print("   ‚úÖ –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–∞")
        print("   ‚úÖ –®–∞–±–ª–æ–Ω—ã —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        print("   ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python main.py")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    return failed == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)