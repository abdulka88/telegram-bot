#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞
–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω–æ–µ —Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import asyncio
import sys
import os
from datetime import datetime, date, timedelta
import random

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.database import db_manager
from core.security import encrypt_data, decrypt_data

class InteractiveTester:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.test_chat_id = 12345
        self.admin_id = 67890
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.positions = [
            "–ü–ª–æ—Ç–Ω–∏–∫", "–ú–∞–ª—è—Ä", "–†–∞–±–æ—á–∏–π –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∏ —Ä–µ–º–æ–Ω—Ç—É –∑–¥–∞–Ω–∏–π",
            "–î–≤–æ—Ä–Ω–∏–∫", "–£–±–æ—Ä—â–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π", "–ú–∞—Å—Ç–µ—Ä", "–°—Ç–∞—Ä—à–∏–π –º–∞—Å—Ç–µ—Ä",
            "–≠–ª–µ–∫—Ç—Ä–∏–∫", "–°–ª–µ—Å–∞—Ä—å", "–°–≤–∞—Ä—â–∏–∫"
        ]
        
        self.event_types = [
            "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä", "–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞",
            "–û–±—É—á–µ–Ω–∏–µ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π",
            "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", "–ü–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ö—É—Ä—Å—ã –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        ]
        
        self.employee_names = [
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á", "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á",
            "–ö–æ–∑–ª–æ–≤ –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á", "–ù–æ–≤–∏–∫–æ–≤ –°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", "–ú–æ—Ä–æ–∑–æ–≤ –ê–ª–µ–∫—Å–µ–π –î–º–∏—Ç—Ä–∏–µ–≤–∏—á",
            "–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞", "–°–º–∏—Ä–Ω–æ–≤–∞ –ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞",
            "–ü–æ–ø–æ–≤ –í–ª–∞–¥–∏–º–∏—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á", "–õ–µ–±–µ–¥–µ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", "–ö–æ–∑–ª–æ–≤–∞ –û–ª—å–≥–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
            "–ù–æ–≤–∏–∫–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞", "–ú–æ—Ä–æ–∑–æ–≤–∞ –õ—é–¥–º–∏–ª–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", "–§–µ–¥–æ—Ä–æ–≤ –†–æ–º–∞–Ω –ê–Ω–¥—Ä–µ–µ–≤–∏—á",
            "–ì—Ä–∏–≥–æ—Ä—å–µ–≤ –ú–∞–∫—Å–∏–º –ü–µ—Ç—Ä–æ–≤–∏—á", "–°–æ–ª–æ–≤—å–µ–≤–∞ –°–≤–µ—Ç–ª–∞–Ω–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞", "–ë–æ—Ä–∏—Å–æ–≤ –ù–∏–∫–æ–ª–∞–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á"
        ]
    
    def print_header(self, title):
        """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("\n" + "="*60)
        print(f"ü§ñ {title}")
        print("="*60)
    
    def print_step(self, step_num, title):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–∞–ø–∞"""
        print(f"\nüìã –≠—Ç–∞–ø {step_num}: {title}")
        print("-"*40)
    
    async def setup_test_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        self.print_step(1, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã")
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞
            db_manager.execute_with_retry('''
                INSERT OR REPLACE INTO chat_settings 
                (chat_id, admin_id, timezone, notification_days)
                VALUES (?, ?, ?, ?)
            ''', (self.test_chat_id, self.admin_id, 'Europe/Moscow', 90))
            
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç: {self.test_chat_id}")
            print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {self.admin_id}")
            print(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Moscow")
            print(f"‚úÖ –ü–µ—Ä–∏–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 90 –¥–Ω–µ–π")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
            db_manager.execute_with_retry('''
                INSERT OR REPLACE INTO report_settings 
                (chat_id, daily_enabled, weekly_enabled, monthly_enabled, daily_time, weekly_day, monthly_day)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (self.test_chat_id, 1, 1, 1, '09:00', 1, 1))
            
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–µ–¥—ã: {e}")
            return False
    
    async def create_diverse_employees(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        self.print_step(2, "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        
        employee_ids = []
        
        try:
            for i, name in enumerate(self.employee_names):
                position = self.positions[i % len(self.positions)]
                
                # –®–∏—Ñ—Ä—É–µ–º –∏–º—è
                encrypted_name = encrypt_data(name)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                employee_id = db_manager.execute_with_retry('''
                    INSERT INTO employees (chat_id, full_name, position, is_active)
                    VALUES (?, ?, ?, ?)
                ''', (self.test_chat_id, encrypted_name, position, True))
                
                employee_ids.append(employee_id)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {name} ({position}) [ID: {employee_id}]")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
            position_stats = {}
            for i, name in enumerate(self.employee_names):
                position = self.positions[i % len(self.positions)]
                position_stats[position] = position_stats.get(position, 0) + 1
            
            print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employee_ids)}")
            print("\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º:")
            for position, count in sorted(position_stats.items()):
                print(f"   {position}: {count} —á–µ–ª.")
            
            return employee_ids
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
            return []
    
    async def add_realistic_events(self, employee_ids):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        self.print_step(3, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º")
        
        events_added = 0
        overdue_count = 0
        critical_count = 0
        warning_count = 0
        normal_count = 0
        
        try:
            for employee_id in employee_ids:
                # –ö–∞–∂–¥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–æ–±–∞–≤–ª—è–µ–º 2-5 —Å–æ–±—ã—Ç–∏–π
                num_events = random.randint(2, 5)
                
                for _ in range(num_events):
                    event_type = random.choice(self.event_types)
                    
                    # –í–∞—Ä—å–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                    if events_added % 4 == 0:  # 25% –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
                        days_ago = random.randint(400, 600)
                        interval_days = random.choice([180, 365])
                    elif events_added % 4 == 1:  # 25% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö (—Å–∫–æ—Ä–æ)
                        days_ago = random.randint(340, 360)
                        interval_days = 365
                    elif events_added % 4 == 2:  # 25% –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö
                        days_ago = random.randint(320, 350)
                        interval_days = 365
                    else:  # 25% –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö
                        days_ago = random.randint(30, 300)
                        interval_days = random.choice([180, 240, 300, 365])
                    
                    last_event_date = date.today() - timedelta(days=days_ago)
                    next_date = last_event_date + timedelta(days=interval_days)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                    event_id = db_manager.execute_with_retry('''
                        INSERT INTO employee_events 
                        (employee_id, event_type, last_event_date, next_notification_date, interval_days)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (employee_id, event_type, last_event_date.isoformat(), 
                          next_date.isoformat(), interval_days))
                    
                    events_added += 1
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    days_until = (next_date - date.today()).days
                    if days_until < 0:
                        status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
                        overdue_count += 1
                    elif days_until <= 7:
                        status = "üü† –ö—Ä–∏—Ç–∏—á–Ω–æ"
                        critical_count += 1
                    elif days_until <= 30:
                        status = "üü° –í–Ω–∏–º–∞–Ω–∏–µ"
                        warning_count += 1
                    else:
                        status = "üü¢ –ü–ª–∞–Ω–æ–≤–æ–µ"
                        normal_count += 1
                    
                    print(f"‚úÖ {event_type} [{status}] - —á–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π")
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π:")
            print(f"   üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue_count}")
            print(f"   üü† –ö—Ä–∏—Ç–∏—á–Ω–æ: {critical_count}")
            print(f"   üü° –í–Ω–∏–º–∞–Ω–∏–µ: {warning_count}")
            print(f"   üü¢ –ü–ª–∞–Ω–æ–≤–æ–µ: {normal_count}")
            print(f"   üìù –í—Å–µ–≥–æ: {events_added}")
            
            return events_added > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
            return False
    
    async def test_search_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
        self.print_step(4, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∏—Å–∫–∞
            from managers.search_manager import SearchManager
            search_manager = SearchManager(db_manager)
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
            results = search_manager.smart_text_search(self.test_chat_id, "–ò–≤–∞–Ω–æ–≤", 5)
            print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ '–ò–≤–∞–Ω–æ–≤': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            results = search_manager.smart_text_search(self.test_chat_id, "–ü–ª–æ—Ç–Ω–∏–∫", 5)
            print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '–ü–ª–æ—Ç–Ω–∏–∫': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            overdue = search_manager.filter_events_by_status(self.test_chat_id, "overdue")
            critical = search_manager.filter_events_by_status(self.test_chat_id, "critical")
            print(f"‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {len(overdue)}")
            print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è: {len(critical)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
            return False
    
    async def test_analytics(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.print_step(5, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        
        try:
            from managers.advanced_analytics_manager import AdvancedAnalyticsManager
            analytics = AdvancedAnalyticsManager(db_manager)
            
            # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            efficiency = analytics.get_efficiency_metrics(self.test_chat_id)
            print(f"‚úÖ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {efficiency.get('efficiency_grade', 'N/A')}")
            print(f"   –°–æ–±–ª—é–¥–µ–Ω–∏–µ: {efficiency.get('compliance_rate', 0):.1f}%")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
            forecast = analytics.get_workload_forecast(self.test_chat_id, 30)
            total_events = forecast.get('summary', {}).get('total_events', 0)
            avg_per_day = forecast.get('summary', {}).get('avg_per_day', 0)
            print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π: {total_events} —Å–æ–±—ã—Ç–∏–π, {avg_per_day:.1f}/–¥–µ–Ω—å")
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
            charts = analytics.get_detailed_timeline_charts(self.test_chat_id)
            print(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: {len(charts)} —Ç–∏–ø–æ–≤")
            
            # –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
            periods = {'short': 7, 'medium': 30, 'long': 90}
            advanced = analytics.get_advanced_workload_forecast(self.test_chat_id, periods)
            forecasts = advanced.get('forecasts', {})
            print(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {len(forecasts)} –ø–µ—Ä–∏–æ–¥–æ–≤")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return False
    
    async def test_reports(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤"""
        self.print_step(6, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤")
        
        try:
            from managers.automated_reports_manager import AutomatedReportsManager
            reports = AutomatedReportsManager(db_manager)
            
            # –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            daily = await reports._generate_daily_summary(self.test_chat_id)
            print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: {len(daily) if daily else 0} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –¢–µ—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            weekly = await reports._generate_weekly_report(self.test_chat_id)
            print(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {len(weekly) if weekly else 0} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –¢–µ—Å—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            monthly = await reports._generate_monthly_report(self.test_chat_id)
            print(f"‚úÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç: {len(monthly) if monthly else 0} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings = reports.get_report_settings(self.test_chat_id)
            enabled_reports = sum([
                settings.get('daily_enabled', 0),
                settings.get('weekly_enabled', 0),
                settings.get('monthly_enabled', 0)
            ])
            print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {enabled_reports} –∏–∑ 3")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
            return False
    
    async def test_export(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.print_step(7, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel")
        
        try:
            from managers.export_manager import ExportManager
            export = ExportManager(db_manager)
            
            # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
            excel_data = await export.export_all_events(self.test_chat_id, "xlsx")
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π: {len(excel_data.getvalue())} –±–∞–π—Ç")
            
            # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics_data = await export.export_analytics_report(self.test_chat_id, "full")
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {len(analytics_data.getvalue())} –±–∞–π—Ç")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return False
    
    async def verify_data_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.print_step(8, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employees = db_manager.execute_with_retry('''
                SELECT COUNT(*) as count FROM employees WHERE chat_id = ?
            ''', (self.test_chat_id,), fetch="one")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π
            events = db_manager.execute_with_retry('''
                SELECT COUNT(*) as count 
                FROM employee_events ee
                JOIN employees e ON ee.employee_id = e.id
                WHERE e.chat_id = ?
            ''', (self.test_chat_id,), fetch="one")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç
            invalid_dates = db_manager.execute_with_retry('''
                SELECT COUNT(*) as count 
                FROM employee_events ee
                JOIN employees e ON ee.employee_id = e.id
                WHERE e.chat_id = ? 
                AND date(ee.next_notification_date) < date(ee.last_event_date)
            ''', (self.test_chat_id,), fetch="one")
            
            print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {employees['count']}")
            print(f"‚úÖ –°–æ–±—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ: {events['count']}")
            print(f"‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç: {invalid_dates['count']}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            test_employee = db_manager.execute_with_retry('''
                SELECT full_name FROM employees WHERE chat_id = ? LIMIT 1
            ''', (self.test_chat_id,), fetch="one")
            
            if test_employee:
                decrypted_name = decrypt_data(test_employee['full_name'])
                print(f"‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {decrypted_name[:10]}...")
            
            return invalid_dates['count'] == 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_header("–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ë–û–¢–ê")
        print(f"üïí –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        
        results = []
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        results.append(await self.setup_test_environment())
        
        employee_ids = await self.create_diverse_employees()
        results.append(len(employee_ids) > 0)
        
        if employee_ids:
            results.append(await self.add_realistic_events(employee_ids))
            results.append(await self.test_search_functionality())
            results.append(await self.test_analytics())
            results.append(await self.test_reports())
            results.append(await self.test_export())
            results.append(await self.verify_data_integrity())
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_header("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        passed = sum(results)
        total = len(results)
        success_rate = (passed / total) * 100
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        print(f"üïí –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = InteractiveTester()
    await tester.run_comprehensive_test()

if __name__ == "__main__":
    asyncio.run(main())