#!/usr/bin/env python3
"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
"""

import sys
import os
import asyncio
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from unittest.mock import Mock, AsyncMock
from handlers.menu_handlers import menu_handler
from handlers.employee_handlers import (
    add_event_to_employee, add_event_to_employee_type, 
    add_event_to_employee_date, add_event_to_employee_interval
)
from core.database import db_manager
from core.security import encrypt_data, decrypt_data

class TelegramSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    def __init__(self):
        self.chat_id = 123456789
        self.user_id = 987654321
    
    def create_callback_update(self, callback_data):
        """–°–æ–∑–¥–∞–µ—Ç update –¥–ª—è callback query"""
        update = Mock()
        update.callback_query = Mock()
        update.callback_query.answer = AsyncMock()
        update.callback_query.edit_message_text = AsyncMock()
        update.callback_query.data = callback_data
        
        update.effective_chat = Mock()
        update.effective_chat.id = self.chat_id
        update.effective_user = Mock()
        update.effective_user.id = self.user_id
        
        return update
    
    def create_message_update(self, text):
        """–°–æ–∑–¥–∞–µ—Ç update –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        update = Mock()
        update.message = Mock()
        update.message.text = text
        update.message.reply_text = AsyncMock()
        
        update.effective_chat = Mock()
        update.effective_chat.id = self.chat_id
        update.effective_user = Mock()
        update.effective_user.id = self.user_id
        
        return update
    
    def create_context(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞"""
        context = Mock()
        context.user_data = {}
        context.bot = Mock()
        context.bot.send_message = AsyncMock()
        return context

async def test_new_add_event_function():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
    print("\nüÜï –¢–ï–°–¢: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    encrypted_name = encrypt_data("–¢–µ—Å—Ç–æ–≤—ã–π –†–∞–±–æ—Ç–Ω–∏–∫")
    employee_id = db_manager.execute_with_retry('''
        INSERT INTO employees (chat_id, full_name, position, is_active)
        VALUES (?, ?, ?, 1)
    ''', (123456789, encrypted_name, "–ú–∞–ª—è—Ä"))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {employee_id}")
    
    sim = TelegramSimulator()
    
    # –®–∞–≥ 1: –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    print("\nüìã –®–∞–≥ 1: –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
    try:
        update1 = sim.create_callback_update(f'{{"action":"add_event","id":{employee_id}}}')
        context1 = sim.create_context()
        
        result1 = await add_event_to_employee(update1, context1)
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {result1}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if context1.user_data.get('current_employee_id') == employee_id:
            print("‚úÖ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
        else:
            print("‚ùå ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        if update1.callback_query.edit_message_text.called:
            print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –ø–æ–∫–∞–∑–∞–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –Ω–∞ —à–∞–≥–µ 1: {e}")
        return False
    
    # –®–∞–≥ 2: –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    print("\nüìù –®–∞–≥ 2: –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
    try:
        update2 = sim.create_message_update("–ú–µ–¥–æ—Å–º–æ—Ç—Ä")
        context2 = sim.create_context()
        context2.user_data = context1.user_data.copy()  # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        result2 = await add_event_to_employee_type(update2, context2)
        print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {result2}")
        
        if context2.user_data.get('new_event_type') == "–ú–µ–¥–æ—Å–º–æ—Ç—Ä":
            print("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        else:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
        if update2.message.reply_text.called:
            print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è")
        else:
            print("‚ùå –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –ù–ï –ø–æ–∫–∞–∑–∞–Ω")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –Ω–∞ —à–∞–≥–µ 2: {e}")
        return False
    
    # –®–∞–≥ 3: –í–≤–æ–¥–∏–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
    print("\nüìÖ –®–∞–≥ 3: –í–≤–æ–¥ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è")
    try:
        update3 = sim.create_message_update("15.01.2024")
        context3 = sim.create_context()
        context3.user_data = context2.user_data.copy()  # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        result3 = await add_event_to_employee_date(update3, context3)
        print(f"‚úÖ –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {result3}")
        
        if context3.user_data.get('new_event_last_date'):
            print("‚úÖ –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        else:
            print("‚ùå –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        if update3.message.reply_text.called:
            print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        else:
            print("‚ùå –ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ù–ï –ø–æ–∫–∞–∑–∞–Ω")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –Ω–∞ —à–∞–≥–µ 3: {e}")
        return False
    
    # –®–∞–≥ 4: –í–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    print("\nüîÑ –®–∞–≥ 4: –í–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    try:
        update4 = sim.create_message_update("365")
        context4 = sim.create_context()
        context4.user_data = context3.user_data.copy()  # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        result4 = await add_event_to_employee_interval(update4, context4)
        print(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {result4}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –≤ –±–∞–∑—É
        event = db_manager.execute_with_retry('''
            SELECT * FROM employee_events WHERE employee_id = ? AND event_type = ?
        ''', (employee_id, "–ú–µ–¥–æ—Å–º–æ—Ç—Ä"), fetch="one")
        
        if event:
            print("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            print(f"   üìã –¢–∏–ø: {event['event_type']}")
            print(f"   üìÖ –î–∞—Ç–∞: {event['last_event_date']}")
            print(f"   üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {event['interval_days']} –¥–Ω–µ–π")
            print(f"   üîî –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {event['next_notification_date']}")
        else:
            print("‚ùå –°–æ–±—ã—Ç–∏–µ –ù–ï –¥–æ–±–∞–≤–∏–ª–æ—Å—å –≤ –±–∞–∑—É")
            return False
            
        if update4.message.reply_text.called:
            print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        else:
            print("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ù–ï –ø–æ–∫–∞–∑–∞–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –Ω–∞ —à–∞–≥–µ 4: {e}")
        return False
    
    # –û—á–∏—Å—Ç–∫–∞
    db_manager.execute_with_retry('DELETE FROM employee_events WHERE employee_id = ?', (employee_id,))
    db_manager.execute_with_retry('DELETE FROM employees WHERE id = ?', (employee_id,))
    print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    
    return True

async def test_route_through_menu_handler():
    """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ menu_handler"""
    print("\nüîÑ –¢–ï–°–¢: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ menu_handler")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    encrypted_name = encrypt_data("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
    employee_id = db_manager.execute_with_retry('''
        INSERT INTO employees (chat_id, full_name, position, is_active)
        VALUES (?, ?, ?, 1)
    ''', (123456789, encrypted_name, "–ü–ª–æ—Ç–Ω–∏–∫"))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {employee_id}")
    
    sim = TelegramSimulator()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ menu_handler
        update = sim.create_callback_update(f'{{"action":"add_event","id":{employee_id}}}')
        context = sim.create_context()
        
        await menu_handler(update, context)
        print("‚úÖ Callback 'add_event' —É—Å–ø–µ—à–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ menu_handler")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–ª–∞—Å—å
        if context.user_data.get('current_employee_id') == employee_id:
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è add_event_to_employee –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è add_event_to_employee –ù–ï –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # –û—á–∏—Å—Ç–∫–∞
    db_manager.execute_with_retry('DELETE FROM employee_events WHERE employee_id = ?', (employee_id,))
    db_manager.execute_with_retry('DELETE FROM employees WHERE id = ?', (employee_id,))
    print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üÜï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –°–û–ë–´–¢–ò–ô")
    print("=" * 80)
    
    tests = [
        ("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è", test_new_add_event_function),
        ("–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ menu_handler", test_route_through_menu_handler)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            if await test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
            else:
                failed += 1
                print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê")
        except Exception as e:
            failed += 1
            print(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò: {passed} ‚úÖ / {failed} ‚ùå")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚ú® –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º!")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
    
    return failed == 0

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)