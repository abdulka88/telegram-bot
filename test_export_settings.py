#!/usr/bin/env python3
"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import sys
import os
import asyncio
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from unittest.mock import Mock, AsyncMock
from handlers.menu_handlers import menu_handler
from handlers.export_handlers import export_menu_start, handle_export
from handlers.settings_handlers import set_notification_days, set_timezone
from core.database import db_manager
from core.security import encrypt_data

class TelegramSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self):
        self.chat_id = 123456789
        self.user_id = 987654321
    
    def create_callback_update(self, callback_data):
        """–°–æ–∑–¥–∞–µ—Ç update –¥–ª—è callback query"""
        update = Mock()
        update.callback_query = Mock()
        update.callback_query.answer = AsyncMock()
        update.callback_query.edit_message_text = AsyncMock()
        update.callback_query.data = callback_data
        
        update.effective_chat = Mock()
        update.effective_chat.id = self.chat_id
        update.effective_user = Mock()
        update.effective_user.id = self.user_id
        
        return update
    
    def create_context(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞"""
        context = Mock()
        context.user_data = {}
        context.bot = Mock()
        context.bot.send_document = AsyncMock()
        context.bot.send_message = AsyncMock()
        return context

async def test_export_functionality():
    """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (Excel –∏ CSV)"""
    print("\nüìä –¢–ï–°–¢: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    test_employees = []
    for i in range(2):
        encrypted_name = encrypt_data(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {i+1}")
        employee_id = db_manager.execute_with_retry('''
            INSERT INTO employees (chat_id, full_name, position, is_active)
            VALUES (?, ?, ?, 1)
        ''', (123456789, encrypted_name, f"–î–æ–ª–∂–Ω–æ—Å—Ç—å{i+1}"))
        test_employees.append(employee_id)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_employees)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    
    sim = TelegramSimulator()
    
    # –¢–µ—Å—Ç –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
    try:
        update = sim.create_callback_update('{"action":"export_data"}')
        context = sim.create_context()
        
        await export_menu_start(update, context)
        print("‚úÖ –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
    try:
        update_excel = sim.create_callback_update('{"action":"export","format":"xlsx"}')
        context_excel = sim.create_context()
        
        await handle_export(update_excel, context_excel)
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel: {e}")
    
    # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
    try:
        update_csv = sim.create_callback_update('{"action":"export","format":"csv"}')
        context_csv = sim.create_context()
        
        await handle_export(update_csv, context_csv)
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for emp_id in test_employees:
        db_manager.execute_with_retry('DELETE FROM employee_events WHERE employee_id = ?', (emp_id,))
        db_manager.execute_with_retry('DELETE FROM employees WHERE id = ?', (emp_id,))
    
    print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    return True

async def test_settings_functionality():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    print("\n‚öôÔ∏è –¢–ï–°–¢: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 40)
    
    sim = TelegramSimulator()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        db_manager.execute_with_retry('''
            INSERT OR IGNORE INTO chat_settings (chat_id, notification_days, timezone)
            VALUES (?, 90, 'Europe/Moscow')
        ''', (123456789,))
    except:
        pass
    
    # –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        update_days = sim.create_callback_update('{"action":"set_notification_days"}')
        context_days = sim.create_context()
        
        await set_notification_days(update_days, context_days)
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    try:
        update_tz = sim.create_callback_update('{"action":"set_timezone"}')
        context_tz = sim.create_context()
        
        await set_timezone(update_tz, context_tz)
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
    
    return True

async def test_callback_routing():
    """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ menu_handler"""
    print("\nüîÑ –¢–ï–°–¢: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("=" * 40)
    
    sim = TelegramSimulator()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback actions
    test_callbacks = [
        '{"action":"export_data"}',
        '{"action":"export","format":"xlsx"}', 
        '{"action":"export","format":"csv"}',
        '{"action":"settings"}',
        '{"action":"set_notification_days"}',
        '{"action":"set_timezone"}',
        '{"action":"add_employee"}',
        '{"action":"view_employees"}'
    ]
    
    success_count = 0
    
    for callback_data in test_callbacks:
        try:
            update = sim.create_callback_update(callback_data)
            context = sim.create_context()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ menu_handler –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å callback
            await menu_handler(update, context)
            success_count += 1
            action = callback_data.split('"action":"')[1].split('"')[0]
            print(f"‚úÖ Callback '{action}' –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç—Å—è")
            
        except Exception as e:
            action = callback_data.split('"action":"')[1].split('"')[0]
            print(f"‚ùå Callback '{action}' –æ—à–∏–±–∫–∞: {e}")
    
    print(f"üìä –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(test_callbacks)} callbacks")
    return success_count == len(test_callbacks)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    
    tests = [
        ("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (Excel/CSV)", test_export_functionality),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", test_settings_functionality),
        ("–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callbacks", test_callback_routing)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            if await test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
            else:
                failed += 1
                print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê")
        except Exception as e:
            failed += 1
            print(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed} ‚úÖ / {failed} ‚ùå")
    
    return failed == 0

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)