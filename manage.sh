#!/bin/bash

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
# –í–µ—Ä—Å–∏—è: 1.0
# –î–∞—Ç–∞: $(date +%Y-%m-%d)

PROJECT_DIR="/Users/vadim/telegram_bot"
PYTHON_CMD="python3"
BOT_SCRIPT="main.py"
PID_FILE="bot.pid"
LOG_FILE="bot.log"
VENV_DIR="venv"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_DIR" || {
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"
    exit 1
}

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
activate_venv() {
    if [ -d "$VENV_DIR" ]; then
        log_info "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        source "$VENV_DIR/bin/activate"
        log_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    else
        log_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ $VENV_DIR"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
start_bot() {
    log_info "–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞..."
    
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            log_warning "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID: $PID"
            return 1
        else
            log_info "–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ PID —Ñ–∞–π–ª–∞"
            rm -f "$PID_FILE"
        fi
    fi
    
    activate_venv
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    nohup $PYTHON_CMD $BOT_SCRIPT > $LOG_FILE 2>&1 &
    BOT_PID=$!
    echo $BOT_PID > $PID_FILE
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    sleep 2
    if ps -p $BOT_PID > /dev/null; then
        log_success "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å PID: $BOT_PID"
        log_info "–õ–æ–≥–∏: tail -f $LOG_FILE"
        return 0
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: $LOG_FILE"
        rm -f $PID_FILE
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
stop_bot() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞..."
    
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            log_info "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ TERM –ø—Ä–æ—Ü–µ—Å—Å—É $PID"
            kill "$PID"
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            for i in {1..10}; do
                if ! ps -p "$PID" > /dev/null 2>&1; then
                    break
                fi
                sleep 1
            done
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if ps -p "$PID" > /dev/null 2>&1; then
                log_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ $PID"
                kill -9 "$PID"
                sleep 1
            fi
            
            if ! ps -p "$PID" > /dev/null 2>&1; then
                log_success "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                rm -f "$PID_FILE"
                return 0
            else
                log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç"
                return 1
            fi
        else
            log_warning "–ü—Ä–æ—Ü–µ—Å—Å —Å PID $PID –Ω–µ –Ω–∞–π–¥–µ–Ω"
            rm -f "$PID_FILE"
            return 0
        fi
    else
        log_warning "PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        RUNNING_PIDS=$(pgrep -f "$PYTHON_CMD $BOT_SCRIPT")
        if [ -n "$RUNNING_PIDS" ]; then
            log_warning "–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞: $RUNNING_PIDS"
            echo "$RUNNING_PIDS" | xargs kill
            log_success "–ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        fi
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
restart_bot() {
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞..."
    stop_bot
    sleep 2
    start_bot
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞..."
    
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            MEMORY=$(ps -o rss= -p "$PID" | awk '{print $1}')
            CPU=$(ps -o pcpu= -p "$PID" | awk '{print $1}')
            UPTIME=$(ps -o etime= -p "$PID" | awk '{print $1}')
            
            log_success "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PID: $PID"
            echo "  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $UPTIME"
            echo "  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: ${CPU}%"
            echo "  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY}KB"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥ —Ñ–∞–π–ª–∞
            if [ -f "$LOG_FILE" ]; then
                LOG_SIZE=$(du -h "$LOG_FILE" | cut -f1)
                echo "  –†–∞–∑–º–µ—Ä –ª–æ–≥ —Ñ–∞–π–ª–∞: $LOG_SIZE"
            fi
            return 0
        else
            log_warning "PID —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            rm -f "$PID_FILE"
        fi
    fi
    
    # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞
    RUNNING_PIDS=$(pgrep -f "$PYTHON_CMD $BOT_SCRIPT")
    if [ -n "$RUNNING_PIDS" ]; then
        log_warning "–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –±–µ–∑ PID —Ñ–∞–π–ª–∞:"
        echo "$RUNNING_PIDS" | while read -r pid; do
            UPTIME=$(ps -o etime= -p "$pid" | awk '{print $1}')
            echo "  PID: $pid, –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $UPTIME"
        done
        return 2
    else
        log_error "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        case "$2" in
            "-f"|"--follow")
                log_info "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
                tail -f "$LOG_FILE"
                ;;
            "-n"|"--lines")
                LINES=${3:-20}
                log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ $LINES —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:"
                tail -n "$LINES" "$LOG_FILE"
                ;;
            *)
                log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:"
                tail -n 50 "$LOG_FILE"
                ;;
        esac
    else
        log_error "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_FILE"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_deps() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    activate_venv
    
    if [ -f "requirements.txt" ]; then
        pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org -r requirements.txt
        log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        log_error "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_bot() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    
    activate_venv
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    $PYTHON_CMD -m py_compile $BOT_SCRIPT
    if [ $? -eq 0 ]; then
        log_success "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ $BOT_SCRIPT"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
    if [ -d "tests" ]; then
        $PYTHON_CMD -m pytest tests/ -v
    else
        log_info "–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ .pyc —Ñ–∞–π–ª–æ–≤
    find . -type f -name "*.pyc" -delete
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    find . -name "*.log.*" -mtime +30 -delete 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    rm -f *.db-journal
    rm -f bot.lock
    
    log_success "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
show_status() {
    log_info "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:"
    echo ""
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
    echo "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
    echo "  Python —Ñ–∞–π–ª—ã: $(find . -name "*.py" | wc -l)"
    echo "  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: $(find . -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')"
    echo "  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: $(find . -name "*.txt" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" | wc -l)"
    
    echo ""
    echo "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
    if [ -f "employees.db" ]; then
        DB_SIZE=$(du -h "employees.db" | cut -f1)
        echo "  –†–∞–∑–º–µ—Ä –ë–î: $DB_SIZE"
        
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π (–µ—Å–ª–∏ sqlite3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        if command -v sqlite3 >/dev/null 2>&1; then
            EMPLOYEES=$(sqlite3 employees.db "SELECT COUNT(*) FROM employees WHERE is_active = 1;" 2>/dev/null || echo "N/A")
            EVENTS=$(sqlite3 employees.db "SELECT COUNT(*) FROM employee_events;" 2>/dev/null || echo "N/A")
            echo "  –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: $EMPLOYEES"
            echo "  –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: $EVENTS"
        fi
    else
        echo "  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    echo ""
    check_status
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    cat << EOF
ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    ./manage.sh <–∫–æ–º–∞–Ω–¥–∞> [–æ–ø—Ü–∏–∏]

–ö–û–ú–ê–ù–î–´:
    start               –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    stop                –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    restart             –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (stop + start)
    status              –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    logs [–æ–ø—Ü–∏–∏]        –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
    install             –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    test               –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    cleanup            –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    info               –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
    help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–û–ü–¶–ò–ò –î–õ–Ø LOGS:
    -f, --follow        –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    -n, --lines N       –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)

–ü–†–ò–ú–ï–†–´:
    ./manage.sh start                 # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    ./manage.sh logs -f               # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    ./manage.sh logs -n 100           # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
    ./manage.sh restart               # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    ./manage.sh cleanup               # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

–§–ê–ô–õ–´:
    $BOT_SCRIPT          –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
    $PID_FILE            –§–∞–π–ª —Å PID –ø—Ä–æ—Ü–µ—Å—Å–∞
    $LOG_FILE            –§–∞–π–ª –ª–æ–≥–æ–≤
    requirements.txt     –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python

–£–ü–†–ê–í–õ–ï–ù–ò–ï:
    –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: Ctrl+C (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ) –∏–ª–∏ ./manage.sh stop
    –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: ./manage.sh logs -f
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: ./manage.sh status

EOF
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
case "$1" in
    start)
        start_bot
        ;;
    stop)
        stop_bot
        ;;
    restart)
        restart_bot
        ;;
    status)
        check_status
        ;;
    logs)
        show_logs "$@"
        ;;
    install)
        install_deps
        ;;
    test)
        test_bot
        ;;
    cleanup)
        cleanup
        ;;
    info)
        show_status
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ './manage.sh help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"
        echo ""
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: start, stop, restart, status, logs, install, test, cleanup, info, help"
        exit 1
        ;;
esac