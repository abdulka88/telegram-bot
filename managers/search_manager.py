"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
"""

import logging
from typing import List, Dict, Optional
from core.security import decrypt_data

logger = logging.getLogger(__name__)

class SearchManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self, db_manager):
        self.db = db_manager
    
    async def search_events(self, chat_id: int, query: str, filters: Dict = None, page: int = 0, per_page: int = 10) -> Dict:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–±—ã—Ç–∏—è–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            filters: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        base_query = '''
            SELECT 
                e.id as employee_id,
                e.full_name,
                e.position,
                ee.id as event_id,
                ee.event_type,
                ee.next_notification_date,
                ee.interval_days,
                (julianday(ee.next_notification_date) - julianday('now')) as days_until
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
        '''
        
        params = [chat_id]
        conditions = []
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        if query and query.strip():
            search_condition = '''
                (LOWER(e.full_name) LIKE LOWER(?) OR 
                 LOWER(e.position) LIKE LOWER(?) OR 
                 LOWER(ee.event_type) LIKE LOWER(?))
            '''
            conditions.append(search_condition)
            search_term = f"%{query.strip()}%"
            params.extend([search_term, search_term, search_term])
        
        # –§–∏–ª—å—Ç—Ä—ã
        if filters:
            if filters.get('status'):
                status = filters['status']
                if status == 'overdue':
                    conditions.append("date(ee.next_notification_date) < date('now')")
                elif status == 'urgent':
                    conditions.append("date(ee.next_notification_date) BETWEEN date('now') AND date('now', '+7 days')")
                elif status == 'upcoming':
                    conditions.append("date(ee.next_notification_date) BETWEEN date('now', '+8 days') AND date('now', '+30 days')")
            
            if filters.get('event_type'):
                conditions.append("ee.event_type = ?")
                params.append(filters['event_type'])
            
            if filters.get('date_from'):
                conditions.append("date(ee.next_notification_date) >= date(?)")
                params.append(filters['date_from'])
            
            if filters.get('date_to'):
                conditions.append("date(ee.next_notification_date) <= date(?)")
                params.append(filters['date_to'])
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if conditions:
            final_query = base_query + " AND " + " AND ".join(conditions)
        else:
            final_query = base_query
            
        final_query += " ORDER BY ee.next_notification_date"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        count_query = final_query.replace(
            "SELECT e.id as employee_id, e.full_name, e.position, ee.id as event_id, ee.event_type, ee.next_notification_date, ee.interval_days, (julianday(ee.next_notification_date) - julianday('now')) as days_until",
            "SELECT COUNT(*)"
        )
        total_results = self.db.execute_with_retry(count_query, tuple(params), fetch="one")
        total_count = total_results[0] if total_results else 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        final_query += f" LIMIT {per_page} OFFSET {page * per_page}"
        
        results = self.db.execute_with_retry(final_query, tuple(params), fetch="all")
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        decrypted_results = []
        for result in results:
            result_dict = dict(result)
            try:
                result_dict['full_name'] = decrypt_data(result_dict['full_name'])
            except ValueError:
                result_dict['full_name'] = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
            days_until = result_dict.get('days_until', 0)
            if days_until < 0:
                result_dict['status'] = 'overdue'
                result_dict['status_emoji'] = 'üî¥'
                result_dict['status_text'] = f'–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(int(days_until))} –¥–Ω.'
            elif days_until <= 3:
                result_dict['status'] = 'critical'
                result_dict['status_emoji'] = 'üî¥'
                result_dict['status_text'] = f'—á–µ—Ä–µ–∑ {int(days_until)} –¥–Ω. (–∫—Ä–∏—Ç–∏—á–Ω–æ!)'
            elif days_until <= 7:
                result_dict['status'] = 'urgent'
                result_dict['status_emoji'] = 'üü†'
                result_dict['status_text'] = f'—á–µ—Ä–µ–∑ {int(days_until)} –¥–Ω. (—Å—Ä–æ—á–Ω–æ)'
            elif days_until <= 30:
                result_dict['status'] = 'upcoming'
                result_dict['status_emoji'] = 'üü°'
                result_dict['status_text'] = f'—á–µ—Ä–µ–∑ {int(days_until)} –¥–Ω.'
            else:
                result_dict['status'] = 'planned'
                result_dict['status_emoji'] = 'üü¢'
                result_dict['status_text'] = f'—á–µ—Ä–µ–∑ {int(days_until)} –¥–Ω.'
                
            decrypted_results.append(result_dict)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        return {
            'results': decrypted_results,
            'pagination': {
                'current_page': page,
                'per_page': per_page,
                'total_count': total_count,
                'total_pages': (total_count + per_page - 1) // per_page,
                'has_next': (page + 1) * per_page < total_count,
                'has_prev': page > 0
            }
        }

    def get_available_event_types(self, chat_id: int) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        """
        result = self.db.execute_with_retry('''
            SELECT DISTINCT ee.event_type 
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            ORDER BY ee.event_type
        ''', (chat_id,), fetch="all")
        
        return [row['event_type'] for row in result]
    
    def get_events_statistics(self, chat_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—ã—Ç–∏—è–º
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        stats_query = '''
            SELECT 
                COUNT(*) as total_events,
                COUNT(CASE WHEN date(ee.next_notification_date) < date('now') THEN 1 END) as overdue,
                COUNT(CASE WHEN date(ee.next_notification_date) BETWEEN date('now') AND date('now', '+3 days') THEN 1 END) as critical,
                COUNT(CASE WHEN date(ee.next_notification_date) BETWEEN date('now', '+4 days') AND date('now', '+7 days') THEN 1 END) as urgent,
                COUNT(CASE WHEN date(ee.next_notification_date) BETWEEN date('now', '+8 days') AND date('now', '+30 days') THEN 1 END) as upcoming,
                COUNT(CASE WHEN date(ee.next_notification_date) > date('now', '+30 days') THEN 1 END) as planned,
                COUNT(DISTINCT e.id) as total_employees
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
        '''
        
        result = self.db.execute_with_retry(stats_query, (chat_id,), fetch="one")
        
        if result:
            return {
                'total_events': result['total_events'],
                'total_employees': result['total_employees'],
                'overdue': result['overdue'],
                'critical': result['critical'], 
                'urgent': result['urgent'],
                'upcoming': result['upcoming'],
                'planned': result['planned']
            }
        else:
            return {
                'total_events': 0,
                'total_employees': 0,
                'overdue': 0,
                'critical': 0,
                'urgent': 0,
                'upcoming': 0,
                'planned': 0
            }
    
    def search_employees(self, chat_id: int, query: str = None) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        """
        base_query = '''
            SELECT id, full_name, position, user_id, created_at
            FROM employees 
            WHERE chat_id = ? AND is_active = 1
        '''
        
        params = [chat_id]
        
        if query and query.strip():
            base_query += " AND (LOWER(full_name) LIKE LOWER(?) OR LOWER(position) LIKE LOWER(?))"
            search_term = f"%{query.strip()}%"
            params.extend([search_term, search_term])
        
        base_query += " ORDER BY full_name"
        
        results = self.db.execute_with_retry(base_query, tuple(params), fetch="all")
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏–º–µ–Ω–∞
        decrypted_results = []
        for result in results:
            result_dict = dict(result)
            try:
                result_dict['full_name'] = decrypt_data(result_dict['full_name'])
            except ValueError:
                result_dict['full_name'] = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
            decrypted_results.append(result_dict)
        
        return decrypted_results
    
    async def smart_text_search(self, chat_id: int, query: str, additional_filters: Dict = None, page: int = 0, per_page: int = 10) -> Dict:
        """
        –£–º–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            additional_filters: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        if not query or not query.strip():
            return {'results': [], 'pagination': {'total_count': 0, 'current_page': 0, 'total_pages': 0}}
        
        query = query.strip().lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è (–±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ SQL)
        base_query = '''
            SELECT 
                e.id as employee_id,
                e.full_name,
                e.position,
                ee.id as event_id,
                ee.event_type,
                ee.next_notification_date,
                ee.interval_days,
                (julianday(ee.next_notification_date) - julianday('now')) as days_until
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
        '''
        
        params = [chat_id]
        conditions = []
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ)
        if additional_filters:
            if additional_filters.get('status'):
                status = additional_filters['status']
                if status == 'overdue':
                    conditions.append("date(ee.next_notification_date) < date('now')")
                elif status == 'critical':
                    conditions.append("date(ee.next_notification_date) BETWEEN date('now') AND date('now', '+3 days')")
                elif status == 'urgent':
                    conditions.append("date(ee.next_notification_date) BETWEEN date('now', '+4 days') AND date('now', '+7 days')")
                elif status == 'upcoming':
                    conditions.append("date(ee.next_notification_date) BETWEEN date('now', '+8 days') AND date('now', '+30 days')")
            
            if additional_filters.get('position'):
                conditions.append("e.position = ?")
                params.append(additional_filters['position'])
        
        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if conditions:
            final_query = base_query + " AND " + " AND ".join(conditions)
        else:
            final_query = base_query
            
        final_query += " ORDER BY ee.next_notification_date ASC"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = self.db.execute_with_retry(final_query, tuple(params), fetch="all")
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        matching_results = []
        for result in all_results:
            result_dict = dict(result)
            
            try:
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞
                decrypted_name = decrypt_data(result_dict['full_name'])
                result_dict['full_name'] = decrypted_name
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                if (query in decrypted_name.lower() or 
                    query in result_dict['position'].lower() or 
                    query in result_dict['event_type'].lower()):
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                    relevance_score = 1
                    if query in decrypted_name.lower():
                        relevance_score = 10
                    elif query in result_dict['position'].lower():
                        relevance_score = 8
                    elif query in result_dict['event_type'].lower():
                        relevance_score = 6
                    
                    result_dict['relevance_score'] = relevance_score
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    days_until = result_dict.get('days_until', 0)
                    if days_until < 0:
                        result_dict['status'] = 'overdue'
                        result_dict['status_emoji'] = 'üî¥'
                        result_dict['status_text'] = f'–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(int(days_until))} –¥–Ω.'
                    elif days_until <= 3:
                        result_dict['status'] = 'critical'
                        result_dict['status_emoji'] = 'üî¥'
                        result_dict['status_text'] = f'—á–µ—Ä–µ–∑ {int(days_until)} –¥–Ω. (–∫—Ä–∏—Ç–∏—á–Ω–æ!)'
                    elif days_until <= 7:
                        result_dict['status'] = 'urgent'
                        result_dict['status_emoji'] = 'üü†'
                        result_dict['status_text'] = f'—á–µ—Ä–µ–∑ {int(days_until)} –¥–Ω. (—Å—Ä–æ—á–Ω–æ)'
                    elif days_until <= 30:
                        result_dict['status'] = 'upcoming'
                        result_dict['status_emoji'] = 'üü°'
                        result_dict['status_text'] = f'—á–µ—Ä–µ–∑ {int(days_until)} –¥–Ω.'
                    else:
                        result_dict['status'] = 'planned'
                        result_dict['status_emoji'] = 'üü¢'
                        result_dict['status_text'] = f'—á–µ—Ä–µ–∑ {int(days_until)} –¥–Ω.'
                    
                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    result_dict['match_highlights'] = self._highlight_matches(result_dict, query)
                    
                    matching_results.append(result_dict)
                    
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        matching_results.sort(key=lambda x: (-x['relevance_score'], x['days_until']))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_count = len(matching_results)
        start_idx = page * per_page
        end_idx = start_idx + per_page
        paginated_results = matching_results[start_idx:end_idx]
        
        return {
            'results': paginated_results,
            'query': query,
            'pagination': {
                'current_page': page,
                'per_page': per_page,
                'total_count': total_count,
                'total_pages': (total_count + per_page - 1) // per_page if total_count > 0 else 0,
                'has_next': (page + 1) * per_page < total_count,
                'has_prev': page > 0
            },
            'search_suggestions': self._get_search_suggestions(chat_id, query)
        }
    
    def _highlight_matches(self, result: Dict, query: str) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤ –∫–∞–∫–∏—Ö –ø–æ–ª—è—Ö –Ω–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        """
        matches = []
        query_lower = query.lower()
        
        if query_lower in result['full_name'].lower():
            matches.append('üë§ –§–ò–û')
        if query_lower in result['position'].lower():
            matches.append('üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å')
        if query_lower in result['event_type'].lower():
            matches.append('üìã –°–æ–±—ã—Ç–∏–µ')
        
        return matches
    
    def _get_search_suggestions(self, chat_id: int, query: str) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        """
        suggestions = []
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –§–ò–û
        similar_names = self.db.execute_with_retry('''
            SELECT DISTINCT e.full_name
            FROM employees e
            WHERE e.chat_id = ? AND e.is_active = 1
            AND LOWER(e.full_name) LIKE ?
            LIMIT 3
        ''', (chat_id, f"%{query.lower()}%"), fetch="all")
        
        for name_row in similar_names:
            try:
                decrypted = decrypt_data(name_row['full_name'])
                suggestions.append(f"üë§ {decrypted}")
            except ValueError:
                pass
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        similar_positions = self.db.execute_with_retry('''
            SELECT DISTINCT e.position
            FROM employees e
            WHERE e.chat_id = ? AND e.is_active = 1
            AND LOWER(e.position) LIKE ?
            LIMIT 2
        ''', (chat_id, f"%{query.lower()}%"), fetch="all")
        
        for pos_row in similar_positions:
            suggestions.append(f"üíº {pos_row['position']}")
        
        return suggestions[:5]
    
    def get_popular_searches(self, chat_id: int) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        """
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        popular_positions = self.db.execute_with_retry('''
            SELECT e.position, COUNT(*) as cnt
            FROM employees e
            WHERE e.chat_id = ? AND e.is_active = 1
            GROUP BY e.position
            ORDER BY cnt DESC
            LIMIT 3
        ''', (chat_id,), fetch="all")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        popular_events = self.db.execute_with_retry('''
            SELECT ee.event_type, COUNT(*) as cnt
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            GROUP BY ee.event_type
            ORDER BY cnt DESC
            LIMIT 3
        ''', (chat_id,), fetch="all")
        
        popular = []
        
        for pos in popular_positions:
            popular.append(pos['position'])
            
        for event in popular_events:
            popular.append(event['event_type'][:20])  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        
        return popular
    
    def get_employee_events(self, employee_id: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        
        Args:
            employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        """
        results = self.db.execute_with_retry('''
            SELECT id, event_type, last_event_date, next_notification_date, interval_days,
                   (julianday(next_notification_date) - julianday('now')) as days_until
            FROM employee_events 
            WHERE employee_id = ?
            ORDER BY next_notification_date
        ''', (employee_id,), fetch="all")
        
        return [dict(result) for result in results]
    
    def get_events_by_status(self, chat_id: int, status: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            status: –°—Ç–∞—Ç—É—Å ('overdue', 'urgent', 'upcoming', 'planned')
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        """
        base_query = '''
            SELECT 
                e.id as employee_id,
                e.full_name,
                e.position,
                ee.id as event_id,
                ee.event_type,
                ee.next_notification_date,
                ee.interval_days,
                (julianday(ee.next_notification_date) - julianday('now')) as days_until
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
        '''
        
        params = [chat_id]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if status == 'overdue':
            base_query += " AND date(ee.next_notification_date) < date('now')"
        elif status == 'urgent':
            base_query += " AND date(ee.next_notification_date) BETWEEN date('now') AND date('now', '+7 days')"
        elif status == 'upcoming':
            base_query += " AND date(ee.next_notification_date) BETWEEN date('now', '+8 days') AND date('now', '+30 days')"
        elif status == 'planned':
            base_query += " AND date(ee.next_notification_date) > date('now', '+30 days')"
        
        base_query += " ORDER BY ee.next_notification_date"
        
        results = self.db.execute_with_retry(base_query, tuple(params), fetch="all")
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏–º–µ–Ω–∞
        decrypted_results = []
        for result in results:
            result_dict = dict(result)
            try:
                result_dict['full_name'] = decrypt_data(result_dict['full_name'])
            except ValueError:
                result_dict['full_name'] = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
            decrypted_results.append(result_dict)
        
        return decrypted_results