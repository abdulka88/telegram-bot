"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from datetime import datetime, timedelta
from typing import List, Dict, Tuple
from collections import Counter, defaultdict
from core.security import decrypt_data

logger = logging.getLogger(__name__)

class DashboardManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, db_manager):
        self.db = db_manager
    
    def get_overview_statistics(self, chat_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞—à–±–æ—Ä–¥–∞
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        main_stats = self.db.execute_with_retry('''
            SELECT 
                COUNT(DISTINCT e.id) as total_employees,
                COUNT(ee.id) as total_events,
                COUNT(CASE WHEN date(ee.next_notification_date) < date('now') THEN 1 END) as overdue,
                COUNT(CASE WHEN date(ee.next_notification_date) BETWEEN date('now') AND date('now', '+3 days') THEN 1 END) as critical,
                COUNT(CASE WHEN date(ee.next_notification_date) BETWEEN date('now', '+4 days') AND date('now', '+7 days') THEN 1 END) as urgent,
                COUNT(CASE WHEN date(ee.next_notification_date) BETWEEN date('now', '+8 days') AND date('now', '+30 days') THEN 1 END) as upcoming,
                COUNT(CASE WHEN date(ee.next_notification_date) > date('now', '+30 days') THEN 1 END) as planned
            FROM employees e
            LEFT JOIN employee_events ee ON e.id = ee.employee_id
            WHERE e.chat_id = ? AND e.is_active = 1
        ''', (chat_id,), fetch="one")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
        positions_stats = self.db.execute_with_retry('''
            SELECT 
                e.position,
                COUNT(DISTINCT e.id) as employee_count,
                COUNT(ee.id) as event_count,
                COUNT(CASE WHEN date(ee.next_notification_date) < date('now') THEN 1 END) as overdue_count
            FROM employees e
            LEFT JOIN employee_events ee ON e.id = ee.employee_id
            WHERE e.chat_id = ? AND e.is_active = 1
            GROUP BY e.position
            ORDER BY overdue_count DESC, event_count DESC
        ''', (chat_id,), fetch="all")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
        event_types_stats = self.db.execute_with_retry('''
            SELECT 
                ee.event_type,
                COUNT(*) as count,
                COUNT(CASE WHEN date(ee.next_notification_date) < date('now') THEN 1 END) as overdue_count,
                AVG(ee.interval_days) as avg_interval
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            GROUP BY ee.event_type
            ORDER BY overdue_count DESC, count DESC
        ''', (chat_id,), fetch="all")
        
        return {
            'main': dict(main_stats) if main_stats else {},
            'positions': [dict(row) for row in positions_stats] if positions_stats else [],
            'event_types': [dict(row) for row in event_types_stats] if event_types_stats else []
        }
    
    def get_timeline_analysis(self, chat_id: int, months: int = 12) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–º–µ—Å—è—á–Ω–æ)
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            months: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        timeline_data = self.db.execute_with_retry('''
            SELECT 
                strftime('%Y-%m', ee.next_notification_date) as month,
                COUNT(*) as events_count,
                COUNT(CASE WHEN date(ee.next_notification_date) < date('now') THEN 1 END) as overdue_count,
                ee.event_type
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            AND date(ee.next_notification_date) >= date('now', '-{} months')
            AND date(ee.next_notification_date) <= date('now', '+{} months')
            GROUP BY strftime('%Y-%m', ee.next_notification_date), ee.event_type
            ORDER BY month
        '''.format(months // 2, months // 2), (chat_id,), fetch="all")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_stats = defaultdict(lambda: {'total': 0, 'overdue': 0, 'types': Counter()})
        
        for row in timeline_data:
            month = row['month']
            monthly_stats[month]['total'] += row['events_count']
            monthly_stats[month]['overdue'] += row['overdue_count']
            monthly_stats[month]['types'][row['event_type']] += row['events_count']
        
        return dict(monthly_stats)
    
    def get_employee_analysis(self, chat_id: int) -> List[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º - –∫—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –ê–Ω–∞–ª–∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        """
        employee_stats = self.db.execute_with_retry('''
            SELECT 
                e.id,
                e.full_name,
                e.position,
                COUNT(ee.id) as total_events,
                COUNT(CASE WHEN date(ee.next_notification_date) < date('now') THEN 1 END) as overdue_events,
                COUNT(CASE WHEN date(ee.next_notification_date) BETWEEN date('now') AND date('now', '+7 days') THEN 1 END) as urgent_events,
                MIN(julianday(ee.next_notification_date) - julianday('now')) as days_to_next_event
            FROM employees e
            LEFT JOIN employee_events ee ON e.id = ee.employee_id
            WHERE e.chat_id = ? AND e.is_active = 1
            GROUP BY e.id, e.full_name, e.position
            ORDER BY overdue_events DESC, urgent_events DESC, days_to_next_event ASC
        ''', (chat_id,), fetch="all")
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å–∫–∞
        processed_employees = []
        for row in employee_stats:
            employee = dict(row)
            try:
                employee['full_name'] = decrypt_data(employee['full_name'])
            except ValueError:
                employee['full_name'] = "–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            overdue = employee['overdue_events']
            urgent = employee['urgent_events']
            
            if overdue > 0:
                employee['risk_level'] = 'critical'
                employee['risk_emoji'] = 'üî¥'
                employee['risk_text'] = f"{overdue} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
            elif urgent > 0:
                employee['risk_level'] = 'urgent'
                employee['risk_emoji'] = 'üü†'
                employee['risk_text'] = f"{urgent} —Å—Ä–æ—á–Ω—ã—Ö"
            elif employee['days_to_next_event'] and employee['days_to_next_event'] <= 30:
                employee['risk_level'] = 'attention'
                employee['risk_emoji'] = 'üü°'
                employee['risk_text'] = f"—Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ {int(employee['days_to_next_event'])} –¥–Ω."
            else:
                employee['risk_level'] = 'ok'
                employee['risk_emoji'] = 'üü¢'
                employee['risk_text'] = "–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"
            
            processed_employees.append(employee)
        
        return processed_employees
    
    def get_performance_metrics(self, chat_id: int) -> Dict:
        """
        –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = self.db.execute_with_retry('''
            SELECT 
                COUNT(DISTINCT e.id) as active_employees,
                COUNT(ee.id) as total_events,
                AVG(ee.interval_days) as avg_interval,
                MIN(date(ee.next_notification_date)) as earliest_event,
                MAX(date(ee.next_notification_date)) as latest_event
            FROM employees e
            LEFT JOIN employee_events ee ON e.id = ee.employee_id
            WHERE e.chat_id = ? AND e.is_active = 1
        ''', (chat_id,), fetch="one")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–∫
        overdue_metrics = self.db.execute_with_retry('''
            SELECT 
                COUNT(*) as total_overdue,
                AVG(julianday('now') - julianday(ee.next_notification_date)) as avg_overdue_days,
                MAX(julianday('now') - julianday(ee.next_notification_date)) as max_overdue_days
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            AND date(ee.next_notification_date) < date('now')
        ''', (chat_id,), fetch="one")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è
        total_events = metrics['total_events'] if metrics else 0
        overdue_count = overdue_metrics['total_overdue'] if overdue_metrics else 0
        
        compliance_rate = 0 if total_events == 0 else ((total_events - overdue_count) / total_events) * 100
        
        return {
            'general': dict(metrics) if metrics else {},
            'overdue': dict(overdue_metrics) if overdue_metrics else {},
            'compliance_rate': round(compliance_rate, 1),
            'total_events': total_events,
            'overdue_count': overdue_count
        }
    
    def generate_text_chart(self, data: Dict, chart_type: str = "bar", max_width: int = 20) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è Telegram
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã {–Ω–∞–∑–≤–∞–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏–µ}
            chart_type: –¢–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã ("bar", "progress")
            max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º–æ–π
        """
        if not data:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        max_value = max(data.values()) if data.values() else 1
        lines = []
        
        if chart_type == "bar":
            for name, value in data.items():
                bar_length = int((value / max_value) * max_width)
                bar = "‚ñà" * bar_length + "‚ñë" * (max_width - bar_length)
                lines.append(f"{name[:15]:15} ‚îÇ{bar}‚îÇ {value}")
        
        elif chart_type == "progress":
            for name, value in data.items():
                percentage = (value / max_value) * 100
                bar_length = int((percentage / 100) * max_width)
                bar = "üü¢" * bar_length + "‚ö™" * (max_width - bar_length)
                lines.append(f"{name[:15]:15} {bar} {percentage:.1f}%")
        
        return "\n".join(lines)
    
    def generate_trend_indicator(self, current: int, previous: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞
        
        Args:
            current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            previous: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ç—Ä–µ–Ω–¥–∞
        """
        if previous == 0:
            return "üÜï –Ω–æ–≤–æ–µ"
        
        change = ((current - previous) / previous) * 100
        
        if change > 10:
            return f"üìà +{change:.1f}%"
        elif change < -10:
            return f"üìâ {change:.1f}%"
        elif change > 0:
            return f"‚ÜóÔ∏è +{change:.1f}%"
        elif change < 0:
            return f"‚ÜòÔ∏è {change:.1f}%"
        else:
            return "‚û°Ô∏è —Å—Ç–∞–±–∏–ª—å–Ω–æ"
    
    def get_alerts_and_recommendations(self, chat_id: int) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
        critical_overdue = self.db.execute_with_retry('''
            SELECT COUNT(*) as count
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            AND julianday('now') - julianday(ee.next_notification_date) > 30
        ''', (chat_id,), fetch="one")
        
        if critical_overdue and critical_overdue['count'] > 0:
            alerts.append({
                'level': 'critical',
                'emoji': 'üö®',
                'title': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏',
                'message': f"–ù–∞–π–¥–µ–Ω–æ {critical_overdue['count']} —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π –±–æ–ª–µ–µ 30 –¥–Ω–µ–π",
                'action': '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!'
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º–∏  
        multiple_overdue = self.db.execute_with_retry('''
            SELECT e.full_name, COUNT(*) as overdue_count
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            AND date(ee.next_notification_date) < date('now')
            GROUP BY e.id, e.full_name
            HAVING COUNT(*) >= 3
        ''', (chat_id,), fetch="all")
        
        if multiple_overdue:
            for emp in multiple_overdue[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                try:
                    name = decrypt_data(emp['full_name'])
                except ValueError:
                    name = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
                
                alerts.append({
                    'level': 'warning',
                    'emoji': '‚ö†Ô∏è',
                    'title': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏',
                    'message': f"{name}: {emp['overdue_count']} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
                    'action': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
                })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é
        upcoming_week = self.db.execute_with_retry('''
            SELECT COUNT(*) as count
            FROM employee_events ee
            JOIN employees e ON ee.employee_id = e.id
            WHERE e.chat_id = ? AND e.is_active = 1
            AND date(ee.next_notification_date) BETWEEN date('now') AND date('now', '+7 days')
        ''', (chat_id,), fetch="one")
        
        if upcoming_week and upcoming_week['count'] > 10:
            alerts.append({
                'level': 'info',
                'emoji': 'üìÖ',
                'title': '–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
                'message': f"–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {upcoming_week['count']} —Å–æ–±—ã—Ç–∏–π",
                'action': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'
            })
        
        return alerts