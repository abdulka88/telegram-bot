"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
"""

import logging
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from config.constants import NotificationLevel
from core.security import decrypt_data
from core.utils import create_callback_data

logger = logging.getLogger(__name__)

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, db_manager):
        self.db = db_manager
        
    def get_notification_level(self, days_until: int) -> NotificationLevel:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            days_until: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            –£—Ä–æ–≤–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        if days_until < 0:
            return NotificationLevel.OVERDUE
        elif days_until <= 3:
            return NotificationLevel.CRITICAL
        elif days_until <= 7:
            return NotificationLevel.URGENT
        elif days_until <= 30:
            return NotificationLevel.WARNING
        else:
            return NotificationLevel.INFO
    
    def should_send_notification(self, level: NotificationLevel, days_until: int) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            days_until: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if level == NotificationLevel.OVERDUE:
            return True
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ (0-3 –¥–Ω—è) - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if level == NotificationLevel.CRITICAL:
            return True
        
        # –°—Ä–æ—á–Ω—ã–µ (4-7 –¥–Ω–µ–π) - —Ç–æ–ª—å–∫–æ –≤ –∫–ª—é—á–µ–≤—ã–µ –¥–Ω–∏
        if level == NotificationLevel.URGENT:
            return days_until in [7]  # –¢–æ–ª—å–∫–æ –∑–∞ 7 –¥–Ω–µ–π
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (8-30 –¥–Ω–µ–π) - —Ç–æ–ª—å–∫–æ –∑–∞ 30 –¥–Ω–µ–π
        if level == NotificationLevel.WARNING:
            return days_until in [30]  # –¢–æ–ª—å–∫–æ –∑–∞ 30 –¥–Ω–µ–π
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ (31+ –¥–Ω–µ–π) - —Ç–æ–ª—å–∫–æ –∑–∞ 90 –¥–Ω–µ–π
        if level == NotificationLevel.INFO:
            return days_until in [90]  # –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 90 –¥–Ω–µ–π
        
        return False
    
    def format_notification_message(self, notification: dict, level: NotificationLevel) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        
        Args:
            notification: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            level: –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        full_name = decrypt_data(notification['full_name'])
        event_date = datetime.fromisoformat(notification['next_notification_date']).date()
        days_until = (event_date - datetime.now().date()).days
        
        # –≠–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        level_config = {
            NotificationLevel.INFO: {
                "emoji": "‚ÑπÔ∏è",
                "title": "–ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                "color": "üü¢",
                "urgency": f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
            },
            NotificationLevel.WARNING: {
                "emoji": "‚ö†Ô∏è", 
                "title": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "color": "üü°",
                "urgency": f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
            },
            NotificationLevel.URGENT: {
                "emoji": "üö®",
                "title": "–°–†–û–ß–ù–û",
                "color": "üü†", 
                "urgency": f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
            },
            NotificationLevel.CRITICAL: {
                "emoji": "üî¥",
                "title": "–ö–†–ò–¢–ò–ß–ù–û",
                "color": "üî¥",
                "urgency": "–°–ö–û–†–û!" if days_until > 0 else "–°–ï–ì–û–î–ù–Ø!"
            },
            NotificationLevel.OVERDUE: {
                "emoji": "üíÄ",
                "title": "–ü–†–û–°–†–û–ß–ï–ù–û",
                "color": "‚ö´",
                "urgency": f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_until)} –¥–Ω."
            }
        }
        
        config = level_config[level]
        
        message = (
            f"{config['emoji']} <b>{config['title']}: {notification['event_type']}</b>\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {full_name}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: {event_date.strftime('%d.%m.%Y')}\n"
            f"{config['color']} –°—Ä–æ—á–Ω–æ—Å—Ç—å: {config['urgency']}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if level in [NotificationLevel.CRITICAL, NotificationLevel.OVERDUE]:
            message += f"\n\nüìû <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!</b>"
            try:
                if notification['position']:
                    message += f"\nüíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {notification['position']}"
            except (KeyError, IndexError):
                pass  # –ü–æ–ª–µ position –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        
        return message

    async def send_escalated_notifications(self, context, notification: dict, level: NotificationLevel):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            notification: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            level: –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        """
        if level not in [NotificationLevel.CRITICAL, NotificationLevel.OVERDUE]:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
            admins = self.db.execute_with_retry(
                "SELECT admin_id FROM chat_settings WHERE chat_id = ?",
                (notification['chat_id'],),
                fetch="all"
            )
            
            escalation_message = (
                f"üö® <b>–≠–°–ö–ê–õ–ê–¶–ò–Ø</b>\n"
                f"{self.format_notification_message(notification, level)}\n\n"
                f"‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin in admins:
                try:
                    await context.bot.send_message(
                        chat_id=admin['admin_id'],
                        text=escalation_message,
                        parse_mode='HTML',
                        reply_markup=self.create_action_keyboard(notification)
                    )
                except Exception as e:
                    logger.warning(f"Failed to send escalation to admin {admin['admin_id']}: {e}")
                    
        except Exception as e:
            logger.error(f"Error in escalated notifications: {e}")

    def create_action_keyboard(self, notification: dict):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        
        Args:
            notification: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", 
                    callback_data=create_callback_data("mark_completed", event_id=notification['id'])
                ),
                InlineKeyboardButton(
                    "üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞—Ç—É", 
                    callback_data=create_callback_data("reschedule", event_id=notification['id'])
                )
            ],
            [
                InlineKeyboardButton(
                    "üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", 
                    callback_data=create_callback_data("contact_employee", emp_id=notification['employee_id'] if 'employee_id' in notification else None)
                )
            ]
        ]
        return InlineKeyboardMarkup(keyboard)