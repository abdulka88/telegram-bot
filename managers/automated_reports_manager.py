"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞
–°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Bot
from telegram.ext import ContextTypes

from core.security import decrypt_data, is_admin
from core.utils import create_callback_data
from managers.advanced_analytics_manager import AdvancedAnalyticsManager

logger = logging.getLogger(__name__)

class AutomatedReportsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, db_manager):
        self.db = db_manager
        self.analytics_manager = AdvancedAnalyticsManager(db_manager)
        
    def setup_report_schedules(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        schedules = [
            {
                'name': 'daily_summary',
                'frequency': 'daily',
                'time': '09:00',
                'recipients': 'admins',
                'enabled': True
            },
            {
                'name': 'weekly_analytics',
                'frequency': 'weekly',
                'time': '08:00',
                'day': 'monday',
                'recipients': 'admins',
                'enabled': True
            },
            {
                'name': 'monthly_report',
                'frequency': 'monthly',
                'time': '09:00',
                'day': 1,  # –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
                'recipients': 'admins',
                'enabled': True
            }
        ]
        return schedules
    
    async def send_daily_summary_report(self, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        logger.info("Generating daily summary reports")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
            chats = self.db.execute_with_retry('''
                SELECT DISTINCT chat_id, admin_id, timezone 
                FROM chat_settings 
                WHERE admin_id IS NOT NULL
            ''', fetch="all")
            
            for chat in chats:
                chat_id = chat['chat_id']
                admin_id = chat['admin_id']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                report = await self._generate_daily_summary(chat_id)
                
                if report:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=report,
                            parse_mode='HTML'
                        )
                        logger.info(f"Daily report sent to admin {admin_id} for chat {chat_id}")
                    except Exception as e:
                        logger.error(f"Failed to send daily report to {admin_id}: {e}")
                        
        except Exception as e:
            logger.error(f"Error in daily summary reports: {e}")
    
    async def send_weekly_analytics_report(self, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        logger.info("Generating weekly analytics reports")
        
        try:
            chats = self.db.execute_with_retry('''
                SELECT DISTINCT chat_id, admin_id, timezone 
                FROM chat_settings 
                WHERE admin_id IS NOT NULL
            ''', fetch="all")
            
            for chat in chats:
                chat_id = chat['chat_id']
                admin_id = chat['admin_id']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                report = await self._generate_weekly_report(chat_id)
                
                if report:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=report,
                            parse_mode='HTML'
                        )
                        logger.info(f"Weekly report sent to admin {admin_id} for chat {chat_id}")
                    except Exception as e:
                        logger.error(f"Failed to send weekly report to {admin_id}: {e}")
                        
        except Exception as e:
            logger.error(f"Error in weekly analytics reports: {e}")
    
    async def send_monthly_report(self, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        logger.info("Generating monthly reports")
        
        try:
            chats = self.db.execute_with_retry('''
                SELECT DISTINCT chat_id, admin_id, timezone 
                FROM chat_settings 
                WHERE admin_id IS NOT NULL
            ''', fetch="all")
            
            for chat in chats:
                chat_id = chat['chat_id']
                admin_id = chat['admin_id']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
                report = await self._generate_monthly_report(chat_id)
                
                if report:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=report,
                            parse_mode='HTML'
                        )
                        logger.info(f"Monthly report sent to admin {admin_id} for chat {chat_id}")
                    except Exception as e:
                        logger.error(f"Failed to send monthly report to {admin_id}: {e}")
                        
        except Exception as e:
            logger.error(f"Error in monthly reports: {e}")
    
    async def _generate_daily_summary(self, chat_id: int) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
            today = datetime.now().date()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today_events = self.db.execute_with_retry('''
                SELECT COUNT(*) as count
                FROM employee_events ee
                JOIN employees e ON ee.employee_id = e.id
                WHERE e.chat_id = ? AND e.is_active = 1
                AND date(ee.next_notification_date) = date('now')
            ''', (chat_id,), fetch="one")
            
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            overdue_events = self.db.execute_with_retry('''
                SELECT COUNT(*) as count
                FROM employee_events ee
                JOIN employees e ON ee.employee_id = e.id
                WHERE e.chat_id = ? AND e.is_active = 1
                AND date(ee.next_notification_date) < date('now')
            ''', (chat_id,), fetch="one")
            
            # –°–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            tomorrow_events = self.db.execute_with_retry('''
                SELECT COUNT(*) as count
                FROM employee_events ee
                JOIN employees e ON ee.employee_id = e.id
                WHERE e.chat_id = ? AND e.is_active = 1
                AND date(ee.next_notification_date) = date('now', '+1 day')
            ''', (chat_id,), fetch="one")
            
            # –°–æ–±—ã—Ç–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
            week_events = self.db.execute_with_retry('''
                SELECT COUNT(*) as count
                FROM employee_events ee
                JOIN employees e ON ee.employee_id = e.id
                WHERE e.chat_id = ? AND e.is_active = 1
                AND date(ee.next_notification_date) BETWEEN date('now') 
                AND date('now', '+7 days')
            ''', (chat_id,), fetch="one")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            if not any([today_events['count'], overdue_events['count'], tomorrow_events['count']]):
                return None
            
            report_lines = [
                "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç</b>",
                f"üìÖ {today.strftime('%d.%m.%Y (%A)')}",
                "",
                "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>"
            ]
            
            # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            if today_events['count'] > 0:
                report_lines.append(f"üìÖ –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è: {today_events['count']}")
            else:
                report_lines.append("üìÖ –°–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è: –Ω–µ—Ç")
            
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
            if overdue_events['count'] > 0:
                status = "üî¥ –ö–†–ò–¢–ò–ß–ù–û" if overdue_events['count'] > 5 else "üü° –í–Ω–∏–º–∞–Ω–∏–µ"
                report_lines.append(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ: {overdue_events['count']} {status}")
            else:
                report_lines.append("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: –Ω–µ—Ç")
            
            # –°–æ–±—ã—Ç–∏—è –∑–∞–≤—Ç—Ä–∞
            if tomorrow_events['count'] > 0:
                report_lines.append(f"üîú –°–æ–±—ã—Ç–∏—è –∑–∞–≤—Ç—Ä–∞: {tomorrow_events['count']}")
            
            # –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
            report_lines.extend([
                "",
                f"üìä <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b> {week_events['count']} —Å–æ–±—ã—Ç–∏–π"
            ])
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            if overdue_events['count'] > 0:
                recommendations.append("üî¥ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")
            if tomorrow_events['count'] > 3:
                recommendations.append("üü° –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–º —Å–æ–±—ã—Ç–∏—è–º")
            if week_events['count'] > 20:
                recommendations.append("üìà –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ω–µ–¥–µ–ª–µ")
            
            if recommendations:
                report_lines.extend(["", "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>"])
                for rec in recommendations:
                    report_lines.append(f"   {rec}")
            
            report_lines.extend([
                "",
                f"üïí –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%H:%M')}",
                "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–æ—Ç–µ"
            ])
            
            return "\n".join(report_lines)
            
        except Exception as e:
            logger.error(f"Error generating daily summary for chat {chat_id}: {e}")
            return None
    
    async def _generate_weekly_report(self, chat_id: int) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
            weekly_stats = self.analytics_manager.get_weekly_analysis(chat_id, 1)
            trends = self.analytics_manager.get_trends_analysis(chat_id, 3)
            efficiency = self.analytics_manager.get_efficiency_metrics(chat_id)
            
            if not weekly_stats and efficiency.get('total_events', 0) == 0:
                return None
            
            report_lines = [
                "üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</b>",
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {(datetime.now() - timedelta(days=7)).strftime('%d.%m')} - {datetime.now().strftime('%d.%m.%Y')}",
                "",
                "üìà <b>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>"
            ]
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if efficiency.get('total_events', 0) > 0:
                report_lines.extend([
                    f"‚ö° –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency.get('efficiency_grade', 'N/A')} {efficiency.get('efficiency_emoji', '')}",
                    f"‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤: {efficiency.get('compliance_rate', 0)}%",
                    f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {efficiency.get('total_events', 0)}",
                    f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {efficiency.get('overdue_events', 0)}"
                ])
            
            # –¢—Ä–µ–Ω–¥—ã
            if trends.get('trend') != 'no_data':
                total_trend = trends.get('total_events_trend', {})
                if total_trend:
                    report_lines.extend([
                        "",
                        "üìà <b>–¢—Ä–µ–Ω–¥—ã:</b>",
                        f"üìä –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: {total_trend.get('description', '–°—Ç–∞–±–∏–ª—å–Ω–æ')}",
                        f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {self.analytics_manager.generate_text_charts(total_trend, 'trend')}"
                    ])
            
            # –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if weekly_stats:
                current_week = list(weekly_stats.values())[-1] if weekly_stats else None
                if current_week:
                    report_lines.extend([
                        "",
                        "üìÖ <b>–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:</b>",
                        f"üìä –û–±—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {current_week.get('total', 0)}",
                        f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {current_week.get('overdue', 0)}"
                    ])
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            forecast = self.analytics_manager.get_workload_forecast(chat_id, 7)
            forecast_summary = forecast.get('summary', {})
            if forecast_summary.get('total_events', 0) > 0:
                report_lines.extend([
                    "",
                    "üéØ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:</b>",
                    f"üìä –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–π: {forecast_summary.get('total_events', 0)}",
                    f"‚≠ï –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {forecast_summary.get('avg_per_day', 0):.1f}"
                ])
                
                if forecast_summary.get('peak_day'):
                    peak_date = datetime.strptime(forecast_summary['peak_day'], '%Y-%m-%d')
                    report_lines.append(f"üî• –ü–∏–∫–æ–≤—ã–π –¥–µ–Ω—å: {peak_date.strftime('%d.%m (%A)')} ({forecast_summary.get('peak_count', 0)} —Å–æ–±—ã—Ç–∏–π)")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = efficiency.get('recommendations', [])
            if recommendations:
                report_lines.extend(["", "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>"])
                for rec in recommendations[:3]:  # –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    report_lines.append(f"   {rec}")
            
            report_lines.extend([
                "",
                f"üïí –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –±–æ—Ç–∞"
            ])
            
            return "\n".join(report_lines)
            
        except Exception as e:
            logger.error(f"Error generating weekly report for chat {chat_id}: {e}")
            return None
    
    async def _generate_monthly_report(self, chat_id: int) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü
            trends = self.analytics_manager.get_trends_analysis(chat_id, 1)
            efficiency = self.analytics_manager.get_efficiency_metrics(chat_id)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
            last_month = datetime.now().replace(day=1) - timedelta(days=1)
            month_stats = self.db.execute_with_retry('''
                SELECT 
                    COUNT(*) as total_events,
                    COUNT(CASE WHEN date(ee.next_notification_date) < date('now') THEN 1 END) as overdue_events,
                    COUNT(CASE WHEN ee.event_type LIKE '%–º–µ–¥–æ—Å–º–æ—Ç—Ä%' OR ee.event_type LIKE '%–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π%' THEN 1 END) as medical_events,
                    COUNT(CASE WHEN ee.event_type LIKE '%–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂%' OR ee.event_type LIKE '%–æ–±—É—á–µ–Ω–∏–µ%' THEN 1 END) as training_events
                FROM employee_events ee
                JOIN employees e ON ee.employee_id = e.id
                WHERE e.chat_id = ? AND e.is_active = 1
                AND strftime('%Y-%m', ee.next_notification_date) = ?
            ''', (chat_id, last_month.strftime('%Y-%m')), fetch="one")
            
            if not month_stats or month_stats['total_events'] == 0:
                return None
            
            report_lines = [
                "üìä <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</b>",
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {last_month.strftime('%B %Y')}",
                "",
                "üìà <b>–ò—Ç–æ–≥–∏ –º–µ—Å—è—Ü–∞:</b>",
                f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {month_stats['total_events']}",
                f"üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ: {month_stats['medical_events']}",
                f"üìö –û–±—É—á–µ–Ω–∏–µ/–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∏: {month_stats['training_events']}",
                f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {month_stats['overdue_events']}"
            ]
            
            # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if efficiency.get('total_events', 0) > 0:
                report_lines.extend([
                    "",
                    "‚ö° <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:</b>",
                    f"üèÜ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {efficiency.get('efficiency_grade', 'N/A')} {efficiency.get('efficiency_emoji', '')}",
                    f"‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤: {efficiency.get('compliance_rate', 0)}%"
                ])
                
                if efficiency.get('avg_overdue_days', 0) > 0:
                    report_lines.append(f"‚è∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Å—Ä–æ—á–∫–∞: {efficiency.get('avg_overdue_days', 0):.1f} –¥–Ω–µ–π")
            
            # –¢—Ä–µ–Ω–¥—ã
            if trends.get('trend') != 'no_data':
                summary = trends.get('period_summary', {})
                if summary:
                    report_lines.extend([
                        "",
                        "üìà <b>–î–∏–Ω–∞–º–∏–∫–∞ –∏ —Ç—Ä–µ–Ω–¥—ã:</b>",
                        f"‚≠ï –°—Ä–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–π/–º–µ—Å—è—Ü: {summary.get('avg_events_per_month', 0):.1f}",
                        f"üìà –ú–∞–∫—Å–∏–º—É–º: {summary.get('max_events_month', 0)}",
                        f"üìâ –ú–∏–Ω–∏–º—É–º: {summary.get('min_events_month', 0)}"
                    ])
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            forecast = self.analytics_manager.get_workload_forecast(chat_id, 30)
            forecast_summary = forecast.get('summary', {})
            if forecast_summary.get('total_events', 0) > 0:
                report_lines.extend([
                    "",
                    "üéØ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü:</b>",
                    f"üìä –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–π: {forecast_summary.get('total_events', 0)}",
                    f"‚≠ï –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {forecast_summary.get('avg_per_day', 0):.1f}"
                ])
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            if month_stats['overdue_events'] > month_stats['total_events'] * 0.1:
                recommendations.append("üî¥ –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            if month_stats['medical_events'] > month_stats['total_events'] * 0.7:
                recommendations.append("üè• –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö")
            if efficiency.get('compliance_rate', 0) < 85:
                recommendations.append("üìà –ü–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
            if recommendations:
                report_lines.extend(["", "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>"])
                for rec in recommendations:
                    report_lines.append(f"   {rec}")
            
            report_lines.extend([
                "",
                f"üïí –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–æ—Ç–µ"
            ])
            
            return "\n".join(report_lines)
            
        except Exception as e:
            logger.error(f"Error generating monthly report for chat {chat_id}: {e}")
            return None
    
    async def send_custom_report(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, report_type: str, admin_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞
            report_type: –¢–∏–ø –æ—Ç—á–µ—Ç–∞ ('daily', 'weekly', 'monthly')
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        try:
            report = None
            
            if report_type == 'daily':
                report = await self._generate_daily_summary(chat_id)
            elif report_type == 'weekly':
                report = await self._generate_weekly_report(chat_id)
            elif report_type == 'monthly':
                report = await self._generate_monthly_report(chat_id)
            
            if report:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üìä <b>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç ({report_type})</b>\n\n{report}",
                    parse_mode='HTML'
                )
                logger.info(f"Custom {report_type} report sent to {admin_id}")
            else:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è {report_type} –æ—Ç—á–µ—Ç–∞",
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"Error sending custom report: {e}")
    
    def get_report_settings(self, chat_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        """
        try:
            settings = self.db.execute_with_retry('''
                SELECT * FROM report_settings WHERE chat_id = ?
            ''', (chat_id,), fetch="one")
            
            if not settings:
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_settings = {
                    'chat_id': chat_id,
                    'daily_enabled': True,
                    'weekly_enabled': True,
                    'monthly_enabled': True,
                    'daily_time': '09:00',
                    'weekly_day': 1,  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                    'monthly_day': 1  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
                }
                
                self.db.execute_with_retry('''
                    INSERT OR REPLACE INTO report_settings 
                    (chat_id, daily_enabled, weekly_enabled, monthly_enabled, 
                     daily_time, weekly_day, monthly_day)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    chat_id, default_settings['daily_enabled'],
                    default_settings['weekly_enabled'], default_settings['monthly_enabled'],
                    default_settings['daily_time'], default_settings['weekly_day'],
                    default_settings['monthly_day']
                ))
                
                return default_settings
            
            return dict(settings)
            
        except Exception as e:
            logger.error(f"Error getting report settings for chat {chat_id}: {e}")
            return {}