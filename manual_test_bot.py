#!/usr/bin/env python3
"""
–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import sys
import os
import asyncio
import json
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from unittest.mock import Mock, AsyncMock
from handlers.menu_handlers import menu_handler, show_menu
from handlers.employee_handlers import (
    add_employee_start, add_employee_name, handle_position_selection,
    edit_employee_start, edit_employee_name, save_employee_name,
    edit_employee_position, save_employee_position,
    delete_employee, confirm_delete_employee
)
from core.database import db_manager
from core.security import encrypt_data, decrypt_data

class TelegramSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.chat_id = 123456789
        self.user_id = 987654321
        self.message_history = []
    
    def create_callback_update(self, callback_data, message_text=""):
        """–°–æ–∑–¥–∞–µ—Ç update –¥–ª—è callback query"""
        update = Mock()
        update.callback_query = Mock()
        update.callback_query.answer = AsyncMock()
        update.callback_query.edit_message_text = AsyncMock()
        update.callback_query.data = callback_data
        
        update.effective_chat = Mock()
        update.effective_chat.id = self.chat_id
        update.effective_user = Mock()
        update.effective_user.id = self.user_id
        
        update.message = None
        return update
    
    def create_message_update(self, text):
        """–°–æ–∑–¥–∞–µ—Ç update –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        update = Mock()
        update.message = Mock()
        update.message.text = text
        update.message.reply_text = AsyncMock()
        
        update.effective_chat = Mock()
        update.effective_chat.id = self.chat_id
        update.effective_user = Mock()
        update.effective_user.id = self.user_id
        
        update.callback_query = None
        return update
    
    def create_context(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞"""
        context = Mock()
        context.user_data = {}
        context.bot = Mock()
        context.bot.send_message = AsyncMock()
        return context
    
    async def log_interaction(self, action, result):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ"""
        self.message_history.append({
            'action': action,
            'result': result,
            'success': 'Error' not in str(result)
        })
        print(f"üìù {action}: {'‚úÖ' if 'Error' not in str(result) else '‚ùå'}")

async def test_main_menu():
    """–¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –®–∞–±–ª–æ–Ω—ã —É–±—Ä–∞–Ω–∞)"""
    print("\nüè† –¢–ï–°–¢ 1: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print("=" * 40)
    
    sim = TelegramSimulator()
    update = sim.create_callback_update('{"action":"menu"}')
    context = sim.create_context()
    
    try:
        await show_menu(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–ª–∞—Å—å
        if update.callback_query.edit_message_text.called:
            print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–®–∞–±–ª–æ–Ω—ã' –¥–æ–ª–∂–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
        else:
            print("‚ùå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
        return False
    
    return True

async def test_add_employee_flow():
    """–¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–º–µ–Ω–µ–º –ê–°–Æ)"""
    print("\nüë®‚Äçüíº –¢–ï–°–¢ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    print("=" * 40)
    
    sim = TelegramSimulator()
    
    # –®–∞–≥ 1: –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    update1 = sim.create_callback_update('{"action":"add_employee"}')
    context1 = sim.create_context()
    
    try:
        result1 = await add_employee_start(update1, context1)
        print(f"‚úÖ –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result1}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False
    
    # –®–∞–≥ 2: –í–≤–æ–¥–∏–º –∏–º—è "–ê–°–Æ" (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π)
    update2 = sim.create_message_update("–ê–°–Æ")
    context2 = sim.create_context()
    context2.user_data = context1.user_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    try:
        result2 = await add_employee_name(update2, context2)
        print(f"‚úÖ –í–≤–æ–¥ –∏–º–µ–Ω–∏ '–ê–°–Æ': —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        if 'full_name' in context2.user_data:
            print(f"‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {context2.user_data['full_name']}")
        else:
            print("‚ùå –ò–º—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏: {e}")
        return False
    
    # –®–∞–≥ 3: –í—ã–±–∏—Ä–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    update3 = sim.create_callback_update('{"action":"select_position","position":"–ü–ª–æ—Ç–Ω–∏–∫"}')
    context3 = sim.create_context()
    context3.user_data = context2.user_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    try:
        result3 = await handle_position_selection(update3, context3)
        print(f"‚úÖ –í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result3}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–ª—Å—è
        if 'new_employee_id' in context3.user_data:
            employee_id = context3.user_data['new_employee_id']
            print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω —Å ID: {employee_id}")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            db_manager.execute_with_retry('DELETE FROM employee_events WHERE employee_id = ?', (employee_id,))
            db_manager.execute_with_retry('DELETE FROM employees WHERE id = ?', (employee_id,))
            print("üßπ –¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
            
            return True
        else:
            print("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
        return False

async def test_employee_editing():
    """–¢–µ—Å—Ç 3: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    print("\n‚úèÔ∏è –¢–ï–°–¢ 3: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    encrypted_name = encrypt_data("–¢–µ—Å—Ç–æ–≤—ã–π –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π")
    employee_id = db_manager.execute_with_retry('''
        INSERT INTO employees (chat_id, full_name, position, is_active)
        VALUES (?, ?, ?, 1)
    ''', (123456789, encrypted_name, "–ü–ª–æ—Ç–Ω–∏–∫"))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {employee_id}")
    
    sim = TelegramSimulator()
    
    # –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"
    try:
        update = sim.create_callback_update(f'{{"action":"edit_name","id":{employee_id}}}')
        context = sim.create_context()
        
        result = await edit_employee_name(update, context)
        print(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è' —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if 'editing_employee_id' in context.user_data:
            print("‚úÖ ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            print("‚ùå ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ edit_name: {e}")
    
    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    try:
        update_save = sim.create_message_update("–ù–æ–≤–æ–µ –¢–µ—Å—Ç–æ–≤–æ–µ –ò–º—è")
        context_save = sim.create_context()
        context_save.user_data['editing_employee_id'] = employee_id
        
        result_save = await save_employee_name(update_save, context_save)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result_save}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ –±–∞–∑–µ
        employee = db_manager.execute_with_retry('''
            SELECT full_name FROM employees WHERE id = ?
        ''', (employee_id,), fetch="one")
        
        if employee:
            decrypted_name = decrypt_data(employee['full_name'])
            if decrypted_name == "–ù–æ–≤–æ–µ –¢–µ—Å—Ç–æ–≤–æ–µ –ò–º—è":
                print("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            else:
                print(f"‚ùå –ò–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ü–æ–ª—É—á–µ–Ω–æ: {decrypted_name}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
    
    # –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
    try:
        update_pos = sim.create_callback_update(f'{{"action":"edit_position","id":{employee_id}}}')
        context_pos = sim.create_context()
        
        await edit_employee_position(update_pos, context_pos)
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å' —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ edit_position: {e}")
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    try:
        update_save_pos = sim.create_callback_update(f'{{"action":"save_position","id":{employee_id},"pos":"–ú–∞–ª—è—Ä"}}')
        context_save_pos = sim.create_context()
        
        await save_employee_position(update_save_pos, context_save_pos)
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        employee = db_manager.execute_with_retry('''
            SELECT position FROM employees WHERE id = ?
        ''', (employee_id,), fetch="one")
        
        if employee and employee['position'] == "–ú–∞–ª—è—Ä":
            print("‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '–ú–∞–ª—è—Ä'")
        else:
            print("‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞
    db_manager.execute_with_retry('DELETE FROM employee_events WHERE employee_id = ?', (employee_id,))
    db_manager.execute_with_retry('DELETE FROM employees WHERE id = ?', (employee_id,))
    print("üßπ –¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
    
    return True

async def test_employee_deletion():
    """–¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    print("\nüóëÔ∏è –¢–ï–°–¢ 4: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    encrypted_name = encrypt_data("–£–¥–∞–ª—è–µ–º—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫")
    employee_id = db_manager.execute_with_retry('''
        INSERT INTO employees (chat_id, full_name, position, is_active)
        VALUES (?, ?, ?, 1)
    ''', (123456789, encrypted_name, "–ü–ª–æ—Ç–Ω–∏–∫"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
    for i in range(2):
        db_manager.execute_with_retry('''
            INSERT INTO employee_events (employee_id, event_type, last_event_date, interval_days, next_notification_date)
            VALUES (?, ?, ?, ?, ?)
        ''', (employee_id, f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {i+1}", "2024-01-01", 365, "2024-12-31"))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {employee_id} —Å 2 —Å–æ–±—ã—Ç–∏—è–º–∏")
    
    sim = TelegramSimulator()
    
    # –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    try:
        update_del = sim.create_callback_update(f'{{"action":"delete_employee","id":{employee_id}}}')
        context_del = sim.create_context()
        
        await delete_employee(update_del, context_del)
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ delete_employee: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    try:
        update_confirm = sim.create_callback_update(f'{{"action":"confirm_delete","id":{employee_id}}}')
        context_confirm = sim.create_context()
        
        await confirm_delete_employee(update_confirm, context_confirm)
        print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã
        employee_check = db_manager.execute_with_retry('''
            SELECT id FROM employees WHERE id = ?
        ''', (employee_id,), fetch="one")
        
        events_check = db_manager.execute_with_retry('''
            SELECT COUNT(*) as count FROM employee_events WHERE employee_id = ?
        ''', (employee_id,), fetch="one")
        
        if not employee_check and events_check['count'] == 0:
            print("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã")
        else:
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ confirm_delete: {e}")
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ –†–£–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ë–û–¢–ê")
    print("üìû –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("=" * 60)
    
    tests = [
        ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –®–∞–±–ª–æ–Ω—ã)", test_main_menu),
        ("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–ø—Ä–æ–±–ª–µ–º–∞ —Å '–ê–°–Æ')", test_add_employee_flow),
        ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", test_employee_editing),
        ("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", test_employee_deletion)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            if await test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
            else:
                failed += 1
                print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê")
        except Exception as e:
            failed += 1
            print(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–£–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed} ‚úÖ / {failed} ‚ùå")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º Telegram")
    
    return failed == 0

if __name__ == "__main__":
    result = asyncio.run(main())
    print("\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –∏ —Ñ—É–Ω–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    
    sys.exit(0 if result else 1)