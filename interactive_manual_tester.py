#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
–ü—Ä–æ–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
"""

import json
import time
from datetime import datetime
from typing import Dict, List
import os

class InteractiveManualTester:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self):
        self.test_results = []
        self.current_step = 0
        self.problems_found = []
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        self.test_scenarios = self.define_test_scenarios()
    
    def define_test_scenarios(self) -> List[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        return [
            {
                "category": "üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                "tests": [
                    {
                        "name": "–ö–æ–º–∞–Ω–¥–∞ /start",
                        "action": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É: /start",
                        "expected": "–î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏",
                        "critical": True
                    },
                    {
                        "name": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        "action": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                        "expected": "–ö–Ω–æ–ø–∫–∏: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö, –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ë–ï–ó –∫–Ω–æ–ø–∫–∏ –®–∞–±–ª–æ–Ω—ã)",
                        "critical": True
                    }
                ]
            },
            {
                "category": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
                "tests": [
                    {
                        "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –®–∞–≥ 1",
                        "action": "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'",
                        "expected": "–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                        "critical": True
                    },
                    {
                        "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –®–∞–≥ 2",
                        "action": "–í–≤–µ–¥–∏—Ç–µ: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –¢–µ—Å—Ç–æ–≤'",
                        "expected": "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (dropdown —Å–ø–∏—Å–æ–∫)",
                        "critical": True
                    },
                    {
                        "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –®–∞–≥ 3",
                        "action": "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞",
                        "expected": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤",
                        "critical": True
                    },
                    {
                        "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                        "action": "–ù–∞–∂–º–∏—Ç–µ 'üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'",
                        "expected": "–°–ø–∏—Å–æ–∫ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º",
                        "critical": True
                    },
                    {
                        "name": "–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                        "action": "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                        "expected": "–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ",
                        "critical": True
                    },
                    {
                        "name": "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                        "action": "–ù–∞–∂–º–∏—Ç–µ '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'",
                        "expected": "–ú–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è + –∫–Ω–æ–ø–∫–∞ '–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'",
                        "critical": True
                    }
                ]
            },
            {
                "category": "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏", 
                "tests": [
                    {
                        "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - –ù–∞—á–∞–ª–æ",
                        "action": "–í –∫–∞—Ä—Ç–æ—á–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞–∂–º–∏—Ç–µ 'üìÖ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'",
                        "expected": "–ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (–ù–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ)",
                        "critical": True
                    },
                    {
                        "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - –ù–∞–∑–≤–∞–Ω–∏–µ",
                        "action": "–í–≤–µ–¥–∏—Ç–µ: '–ú–µ–¥–æ—Å–º–æ—Ç—Ä'",
                        "expected": "–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è",
                        "critical": True
                    },
                    {
                        "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - –î–∞—Ç–∞",
                        "action": "–í–≤–µ–¥–∏—Ç–µ: '15.01.2024'",
                        "expected": "–ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ –¥–Ω—è—Ö",
                        "critical": True
                    },
                    {
                        "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - –ò–Ω—Ç–µ—Ä–≤–∞–ª",
                        "action": "–í–≤–µ–¥–∏—Ç–µ: '365'",
                        "expected": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è",
                        "critical": True
                    },
                    {
                        "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è",
                        "action": "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—â–µ —Ä–∞–∑",
                        "expected": "–°–æ–±—ã—Ç–∏–µ '–ú–µ–¥–æ—Å–º–æ—Ç—Ä' –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ",
                        "critical": True
                    }
                ]
            },
            {
                "category": "üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                "tests": [
                    {
                        "name": "–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞",
                        "action": "–ù–∞–∂–º–∏—Ç–µ 'üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'",
                        "expected": "–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞",
                        "critical": True
                    },
                    {
                        "name": "–≠–∫—Å–ø–æ—Ä—Ç Excel",
                        "action": "–ù–∞–∂–º–∏—Ç–µ 'üìà Excel'",
                        "expected": "–§–∞–π–ª .xlsx –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç",
                        "critical": True
                    },
                    {
                        "name": "–≠–∫—Å–ø–æ—Ä—Ç CSV",
                        "action": "–°–Ω–æ–≤–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ 'üìÑ CSV'",
                        "expected": "–§–∞–π–ª .csv –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç",
                        "critical": True
                    }
                ]
            },
            {
                "category": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                "tests": [
                    {
                        "name": "–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                        "action": "–ù–∞–∂–º–∏—Ç–µ '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'",
                        "expected": "–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–ø—Ü–∏—è–º–∏",
                        "critical": True
                    },
                    {
                        "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                        "action": "–ù–∞–∂–º–∏—Ç–µ '‚è∞ –î–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'",
                        "expected": "–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π",
                        "critical": True
                    },
                    {
                        "name": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                        "action": "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–Ω–µ–π",
                        "expected": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                        "critical": True
                    },
                    {
                        "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞",
                        "action": "–ù–∞–∂–º–∏—Ç–µ 'üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å'",
                        "expected": "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤",
                        "critical": True
                    },
                    {
                        "name": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞",
                        "action": "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                        "expected": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                        "critical": True
                    }
                ]
            },
            {
                "category": "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                "tests": [
                    {
                        "name": "–ò–Ω–∏—Ü–∏–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è",
                        "action": "–í –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'",
                        "expected": "–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                        "critical": True
                    },
                    {
                        "name": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                        "action": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ",
                        "expected": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω, –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–º–µ—Å—Ç–µ —Å —Å–æ–±—ã—Ç–∏—è–º–∏",
                        "critical": True
                    }
                ]
            }
        ]
    
    def print_header(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("\n" + "=" * 80)
        print("üß™ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –†–£–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ë–û–¢–ê")
        print("=" * 80)
        print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ–¥–µ—Ç –≤–∞—Å —á–µ—Ä–µ–∑ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.")
        print("–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—ã –±—É–¥–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ—Ç.")
        print("–í –∫–æ–Ω—Ü–µ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.")
        print("=" * 80)
    
    def ask_user_confirmation(self, question: str) -> bool:
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            response = input(f"{question} (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if response in ['–¥–∞', 'yes', 'y', '–¥']:
                return True
            elif response in ['–Ω–µ—Ç', 'no', 'n', '–Ω']:
                return False
            else:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
    
    def get_user_input(self, prompt: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return input(f"{prompt}: ").strip()
    
    def run_test_scenario(self, category: str, tests: List[Dict]) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        print(f"\n{'='*20} {category} {'='*20}")
        
        category_results = []
        
        for i, test in enumerate(tests, 1):
            print(f"\nüß™ –¢–ï–°–¢ {i}: {test['name']}")
            print("‚îÄ" * 60)
            print(f"üìã –î–ï–ô–°–¢–í–ò–ï: {test['action']}")
            print(f"‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {test['expected']}")
            print("‚îÄ" * 60)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ready = self.ask_user_confirmation("–ì–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç?")
            if not ready:
                print("‚è∏Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                category_results.append({
                    "name": test['name'],
                    "status": "SKIPPED",
                    "notes": "–ü—Ä–æ–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                    "critical": test.get('critical', False)
                })
                continue
            
            # –ü–∞—É–∑–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            print("\n‚è≥ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            input("–ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã —Å–æ–æ–±—â–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            success = self.ask_user_confirmation("–†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å?")
            
            test_result = {
                "name": test['name'],
                "action": test['action'],
                "expected": test['expected'],
                "status": "SUCCESS" if success else "FAILED",
                "critical": test.get('critical', False),
                "timestamp": datetime.now().isoformat()
            }
            
            if not success:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–±–ª–µ–º—ã
                actual_result = self.get_user_input("–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ?")
                error_message = self.get_user_input("–ï—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ? (–µ—Å–ª–∏ –Ω–µ—Ç - –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)")
                
                test_result["actual_result"] = actual_result
                test_result["error_message"] = error_message
                test_result["notes"] = f"–ü—Ä–æ–±–ª–µ–º–∞: {actual_result}"
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
                self.problems_found.append({
                    "category": category,
                    "test": test['name'],
                    "problem": actual_result,
                    "error": error_message,
                    "critical": test.get('critical', False)
                })
                
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {actual_result}")
            else:
                test_result["notes"] = "–†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            category_results.append(test_result)
            self.test_results.append(test_result)
        
        return category_results
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –†–£–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = len(self.test_results)
        successful_tests = len([t for t in self.test_results if t['status'] == 'SUCCESS'])
        failed_tests = len([t for t in self.test_results if t['status'] == 'FAILED'])
        skipped_tests = len([t for t in self.test_results if t['status'] == 'SKIPPED'])
        critical_failures = len([t for t in self.test_results if t['status'] == 'FAILED' and t['critical']])
        
        print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_tests}")
        print(f"   ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {failed_tests}")
        print(f"   ‚è∏Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_tests}")
        print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {critical_failures}")
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if total_tests > 0:
            success_rate = (successful_tests / (total_tests - skipped_tests)) * 100 if (total_tests - skipped_tests) > 0 else 0
            print(f"   üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for scenario in self.test_scenarios:
            category = scenario['category']
            category_tests = [t for t in self.test_results if any(test['name'] == t['name'] for test in scenario['tests'])]
            
            if category_tests:
                cat_success = len([t for t in category_tests if t['status'] == 'SUCCESS'])
                cat_total = len(category_tests)
                cat_failed = len([t for t in category_tests if t['status'] == 'FAILED'])
                
                status_icon = "‚úÖ" if cat_failed == 0 else "‚ùå"
                print(f"   {status_icon} {category}: {cat_success}/{cat_total}")
        
        # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        if self.problems_found:
            print(f"\nüö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, problem in enumerate(self.problems_found, 1):
                critical_mark = "üî• [–ö–†–ò–¢–ò–ß–ù–ê–Ø] " if problem['critical'] else ""
                print(f"\n   {i}. {critical_mark}{problem['category']} - {problem['test']}")
                print(f"      –ü—Ä–æ–±–ª–µ–º–∞: {problem['problem']}")
                if problem['error']:
                    print(f"      –û—à–∏–±–∫–∞: {problem['error']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if critical_failures > 0:
            print("   üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        if failed_tests > 0:
            print("   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
        if failed_tests == 0:
            print("   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self.save_report()
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f"manual_test_report_{timestamp}.json"
        
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "total_tests": len(self.test_results),
            "successful_tests": len([t for t in self.test_results if t['status'] == 'SUCCESS']),
            "failed_tests": len([t for t in self.test_results if t['status'] == 'FAILED']),
            "skipped_tests": len([t for t in self.test_results if t['status'] == 'SKIPPED']),
            "critical_failures": len([t for t in self.test_results if t['status'] == 'FAILED' and t['critical']]),
            "test_results": self.test_results,
            "problems_found": self.problems_found
        }
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def run_complete_testing(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_header()
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        bot_running = self.ask_user_confirmation("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω?")
        if not bot_running:
            print("üö® –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: ./manage.sh start")
            return
        
        bot_accessible = self.ask_user_confirmation("–û—Ç–∫—Ä—ã—Ç –ª–∏ Telegram –∏ –Ω–∞–π–¥–µ–Ω –ª–∏ –≤–∞—à –±–æ—Ç?")
        if not bot_accessible:
            print("üö® –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        start_time = datetime.now()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        for scenario in self.test_scenarios:
            self.run_test_scenario(scenario['category'], scenario['tests'])
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            if scenario != self.test_scenarios[-1]:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
                continue_testing = self.ask_user_confirmation("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?")
                if not continue_testing:
                    print("‚è∏Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    break
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        end_time = datetime.now()
        duration = end_time - start_time
        
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {duration}")
        self.generate_final_report()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞")
    
    tester = InteractiveManualTester()
    
    try:
        tester.run_complete_testing()
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        if tester.test_results:
            print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
            tester.generate_final_report()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()