"""
–ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram –±–æ—Ç–∞
"""

import logging
from config.settings import encryption_manager

logger = logging.getLogger(__name__)

def encrypt_data(data: str) -> str:
    """
    –®–∏—Ñ—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Fernet
    
    Args:
        data: –°—Ç—Ä–æ–∫–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    try:
        return encryption_manager.encrypt(data.encode()).decode()
    except Exception as e:
        logger.error(f"Encryption failed: {e}")
        raise ValueError("Encryption error")

def decrypt_data(encrypted_data: str) -> str:
    """
    –î–µ—à–∏—Ñ—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Fernet
    
    Args:
        encrypted_data: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        
    Returns:
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    try:
        return encryption_manager.decrypt(encrypted_data.encode()).decode()
    except Exception as e:
        logger.error(f"Decryption failed: {e}")
        raise ValueError("Decryption error")

def is_admin(chat_id: int, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    from core.database import db_manager
    
    logger.info(f"üîí is_admin: –ø—Ä–æ–≤–µ—Ä—è–µ–º chat_id={chat_id}, user_id={user_id}")
    
    try:
        admin_data = db_manager.execute_with_retry(
            "SELECT admin_id FROM chat_settings WHERE chat_id = ?",
            (chat_id,),
            fetch="one"
        )
        logger.info(f"üìÑ –î–∞–Ω–Ω—ã–µ –∏–∑ chat_settings: {admin_data}")
        
        result = admin_data and admin_data['admin_id'] == user_id
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {result}")
        
        return result
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return False